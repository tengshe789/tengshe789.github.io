<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tEngSHe789の小站</title>
  <icon>https://www.gravatar.com/avatar/daec6fa7cb1df4f13fb41049b91a3c4f</icon>
  <subtitle>随性而行，不行拉倒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tengshe789.github.io/"/>
  <updated>2020-07-01T14:27:18.335Z</updated>
  <id>https://tengshe789.github.io/</id>
  
  <author>
    <name>tEngSHe789</name>
    <email>randyvan007@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>window terminal 玩法大全</title>
    <link href="https://tengshe789.github.io/2020/07/01/window-terminal-%E7%8E%A9%E6%B3%95%E5%A4%A7%E5%85%A8/"/>
    <id>https://tengshe789.github.io/2020/07/01/window-terminal-玩法大全/</id>
    <published>2020-07-01T14:18:06.000Z</published>
    <updated>2020-07-01T14:27:18.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="window-terminal-玩法大全"><a href="#window-terminal-玩法大全" class="headerlink" title="window terminal 玩法大全"></a>window terminal 玩法大全</h2><h3 id="添加到右键菜单"><a href="#添加到右键菜单" class="headerlink" title="添加到右键菜单"></a>添加到右键菜单</h3><h4 id="第一步，创建文件夹"><a href="#第一步，创建文件夹" class="headerlink" title="第一步，创建文件夹"></a>第一步，创建文件夹</h4><p>首先打开<code>cmd</code>，注意，<code>gitbash</code>无效。</p><p>运行下方命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="string">"%USERPROFILE%\AppData\Local\Terminal"</span></span><br></pre></td></tr></table></figure><h4 id="第二步，下载window-terminal-ico图标"><a href="#第二步，下载window-terminal-ico图标" class="headerlink" title="第二步，下载window terminal ico图标"></a>第二步，下载window terminal ico图标</h4><p>打开下方网址，将图标复制到上方，命令的路径</p><p><a href="https://raw.githubusercontent.com/microsoft/terminal/master/res/terminal.ico" target="_blank" rel="noopener">https://raw.githubusercontent.com/microsoft/terminal/master/res/terminal.ico</a></p><h4 id="第三步，添加注册表文件"><a href="#第三步，添加注册表文件" class="headerlink" title="第三步，添加注册表文件"></a>第三步，添加注册表文件</h4><p>创建文件，代码如下，重命名成<code>.reg</code>格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt]</span><br><span class="line">@=&quot;Windows Terminal here&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\[你的用户名]\\AppData\\Local\\Terminal\\terminal.ico&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command]</span><br><span class="line">@=&quot;C:\\Users\\[你的用户名]\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;window-terminal-玩法大全&quot;&gt;&lt;a href=&quot;#window-terminal-玩法大全&quot; class=&quot;headerlink&quot; title=&quot;window terminal 玩法大全&quot;&gt;&lt;/a&gt;window terminal 玩法大全&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="软件分享" scheme="https://tengshe789.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>快速git pull更新所有项目文件</title>
    <link href="https://tengshe789.github.io/2019/09/17/%E5%BF%AB%E9%80%9Fgit-pull%E6%89%80%E6%9C%89%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://tengshe789.github.io/2019/09/17/快速git-pull所有项目文件/</id>
    <published>2019-09-17T11:24:03.000Z</published>
    <updated>2019-11-20T13:39:41.382Z</updated>
    
    <content type="html"><![CDATA[<p>河蟹，本山大王回来了。回想一下，已经大概整整7个月没用更新博客了！！！等我意识到这个问题的时候，居然连markdown都不会写了，罪恶罪恶。今日，重拾我的纸币，继续更新博客，请各位看客给予鼓励。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>故事的开始是这样的，有位搬砖工，名字叫小徐，他所在的公司用的是<code>VMware Horizon 7</code>虚拟桌面环境，软件开发根本连不上外部网络，这让他非常苦恼。</p><p>突然有一天，公司内部大变革，要开始使用maven私服，要开始使用内部PaaS，这让小徐心里乐开了花。“可是新知识太多，这该如何学习呢？”小徐泛起了嘀咕。</p><p>功夫不负有心人，在小徐的日夜努力中，在一个号称全球最大的同性交友网站上，找到了很多学习资料。小徐在自己查询外部互联网资料的笔记本上，熟练的git clone各种各样的仓库，很快，满满一个硬盘都是这些仓库的文件夹。</p><p>时间过的很快，转眼7个月过去了。</p><p>技术变化的很快，转眼，满满硬盘的学习资料都过时了，怎么一下子将他们更新呢？</p><p>以上就是小徐向我提出了需求。</p><h3 id="设计软件"><a href="#设计软件" class="headerlink" title="设计软件"></a>设计软件</h3><p>python是世界上最好的语言！😆</p><p>设计思路很简单，判断当前目录的所有文件夹中，是否其中包含后缀是<code>.git</code>的文件夹，如果是，则为仓库，进行更新，不是就跳过。</p><p>其中需要依赖<code>gitpython</code>这个包，来进行git pull操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> git</span><br><span class="line"><span class="keyword">from</span> git <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isGitDir</span><span class="params">(dir)</span>:</span></span><br><span class="line">    repdir = os.path.join(os.path.abspath(<span class="string">'.'</span>), dir)</span><br><span class="line">    repgitdir = os.path.join(repdir, <span class="string">'.git'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(repgitdir):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateSub</span><span class="params">(subdir)</span>:</span></span><br><span class="line">    repdir = os.path.join(os.path.abspath(<span class="string">'.'</span>), subdir)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        repo = git.Repo(repdir)</span><br><span class="line">        <span class="keyword">if</span> repo.is_dirty():</span><br><span class="line">            dirSubDir.append(subdir)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        remote = repo.remote()</span><br><span class="line">        print(<span class="string">"start pulling from remote for: %s\r\n"</span> %subdir)</span><br><span class="line">        remote.pull()</span><br><span class="line">        print(<span class="string">"Done pulling for %s\r\n"</span> %subdir)</span><br><span class="line">    <span class="keyword">except</span> NoSuchPathError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> InvalidGitRepositoryError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">currDir = os.path.abspath(<span class="string">'.'</span>)</span><br><span class="line">subDirs = [x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> isGitDir(x)]</span><br><span class="line">print(<span class="string">"ready to update git repo:"</span>)</span><br><span class="line"><span class="keyword">for</span> dir <span class="keyword">in</span> subDirs:</span><br><span class="line">    print(dir+ <span class="string">'\r\n'</span>)</span><br><span class="line">dirSubDir = []</span><br><span class="line">poole = []</span><br><span class="line"><span class="keyword">for</span> subdir <span class="keyword">in</span> subDirs:</span><br><span class="line">    t = threading.Thread(target=updateSub,args=(subdir,))</span><br><span class="line">    t.start()</span><br><span class="line">    poole.append(t)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> poole:</span><br><span class="line">    t.join(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\r\n'</span>)</span><br><span class="line"><span class="keyword">if</span> len(dirSubDir)!= <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'these repos have uncommitted changes:'</span>)</span><br><span class="line">    <span class="keyword">for</span> dirtyDir <span class="keyword">in</span> dirSubDir:</span><br><span class="line">        print(<span class="string">'dir %s has uncommited change, please check'</span> % dirtyDir)</span><br></pre></td></tr></table></figure><h3 id="测试投产"><a href="#测试投产" class="headerlink" title="测试投产"></a>测试投产</h3><p>打开电脑，在cmd中运行<code>pip install gitpython</code>或者<code>conda install gitpython</code>，来安装必要的包。</p><p>将上述文件保存到仓库的目录，并且命名为<code>update.py</code>，右键使用VS Code运行，即可发现目录中所有仓库都成功git pull 了，大成功！</p><h3 id="续1s时间"><a href="#续1s时间" class="headerlink" title="续1s时间"></a>续1s时间</h3><p>写完这个博客的时候，偷偷看了一下记录博客浏览量的网站，爆炸了！！！这7个月我不在线的日子，这么多人访问我博客啊。很开心，谢谢你那么可爱，还一直关注着我~❤😝</p><p>全片结束，觉得我写的不错？想要了解更多精彩新姿势？赶快打开我的👉个人<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">博客</a> 👈吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;河蟹，本山大王回来了。回想一下，已经大概整整7个月没用更新博客了！！！等我意识到这个问题的时候，居然连markdown都不会写了，罪恶罪恶。今日，重拾我的纸币，继续更新博客，请各位看客给予鼓励。&lt;/p&gt;
&lt;h3 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class
      
    
    </summary>
    
    
      <category term="分享" scheme="https://tengshe789.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="窍门" scheme="https://tengshe789.github.io/tags/%E7%AA%8D%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>分享一下微服务监控软件以及其部署</title>
    <link href="https://tengshe789.github.io/2019/02/15/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%8B%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7%E8%BD%AF%E4%BB%B6%E4%BB%A5%E5%8F%8A%E5%85%B6%E9%83%A8%E7%BD%B2/"/>
    <id>https://tengshe789.github.io/2019/02/15/分享一下微服务监控软件以及其部署/</id>
    <published>2019-02-15T09:58:03.000Z</published>
    <updated>2019-11-20T13:39:41.189Z</updated>
    
    <content type="html"><![CDATA[<p>最近在寻找有利的监控软件为我的微服务献身，于是乎整理文档，试验，花了很长时间。今天分享一下整理的部分工具，有时间会继续在此post中更新的！🙃</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a>。</p><h1 id="influxDB"><a href="#influxDB" class="headerlink" title="influxDB"></a>influxDB</h1><h3 id="什么是influxDB"><a href="#什么是influxDB" class="headerlink" title="什么是influxDB"></a>什么是influxDB</h3><p>influxDB是一个分布式时间序列数据库。cAdvisor仅仅显示实时信息，但是不存储监视数据。因此，我们需要提供时序数据库用于存储cAdvisor组件所提供的监控信息，以便显示除实时信息之外的时序数据。</p><h3 id="influxDB安装"><a href="#influxDB安装" class="headerlink" title="influxDB安装"></a>influxDB安装</h3><p>（1）下载镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tutum/influxdb</span><br></pre></td></tr></table></figure></p><p>（2）创建容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run ‐di \</span><br><span class="line">‐p 8083:8083 \</span><br><span class="line">‐p 8086:8086 \</span><br><span class="line">‐‐expose 8090 \</span><br><span class="line">‐‐expose 8099 \</span><br><span class="line">‐‐name influxsrv \</span><br><span class="line">tutum/influxdb</span><br></pre></td></tr></table></figure></p><p>端口概述： 8083端口:web访问端口 8086:数据写入端口<br>打开浏览器 <a href="http://192.168.184.135:8083/" target="_blank" rel="noopener">http://192.168.184.135:8083/</a> (ip自觉替换)</p><h3 id="influxDB常用操作"><a href="#influxDB常用操作" class="headerlink" title="influxDB常用操作"></a>influxDB常用操作</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE &quot;cadvisor&quot;</span><br></pre></td></tr></table></figure><p>回车创建数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES</span><br></pre></td></tr></table></figure></p><p>查看数据库</p><h4 id="创建用户并授权"><a href="#创建用户并授权" class="headerlink" title="创建用户并授权"></a>创建用户并授权</h4><p>创建用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &quot;cadvisor&quot; WITH PASSWORD &apos;cadvisor&apos; WITH ALL PRIVILEGES</span><br></pre></td></tr></table></figure></p><p>查看用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW USRES</span><br></pre></td></tr></table></figure></p><p>用户授权<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on cadvisor to cadvisor</span><br><span class="line">grant WRITE on cadvisor to cadvisor</span><br><span class="line">grant READ on cadvisor to cadvisor</span><br></pre></td></tr></table></figure></p><h4 id="查看采集的数据"><a href="#查看采集的数据" class="headerlink" title="查看采集的数据"></a>查看采集的数据</h4><p>切换到cadvisor数据库，使用以下命令查看采集的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW MEASUREMENTS</span><br></pre></td></tr></table></figure></p><p>如果想采集系统的数据，我们需要使用Cadvisor软件来实现</p><h3 id="More"><a href="#More" class="headerlink" title="More"></a>More</h3><p>官方文档 ： <a href="https://github.com/influxdata/docs.influxdata.com" target="_blank" rel="noopener">https://github.com/influxdata/docs.influxdata.com</a></p><h1 id="cAdvisor"><a href="#cAdvisor" class="headerlink" title="cAdvisor"></a>cAdvisor</h1><h3 id="啥么是cAdvisor"><a href="#啥么是cAdvisor" class="headerlink" title="啥么是cAdvisor"></a>啥么是cAdvisor</h3><p>Google开源的用于监控基础设施应用的工具，它是一个强大的监控工具，不需要任何配置就可以通过运行在Docker主机上的容器来监控Docker容器，而且可以监控Docker主机。</p><h3 id="cAdvisor安装"><a href="#cAdvisor安装" class="headerlink" title="cAdvisor安装"></a>cAdvisor安装</h3><p>（1）下载镜像<br><code>docker pull google/cadvisor</code><br>（2）创建容器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> ‐‐volume=/:/rootfs:ro ‐‐volume=/var/run:/var/run:rw ‐‐</span></span><br><span class="line"><span class="bash">volume=/sys:/sys:ro ‐‐volume=/var/lib/docker/:/var/lib/docker:ro ‐‐</span></span><br><span class="line"><span class="bash">publish=8080:8080 ‐‐detach=<span class="literal">true</span> ‐‐link influxsrv:influxsrv ‐‐name=cadvisor</span></span><br><span class="line"><span class="bash">google/cadvisor ‐storage_driver=influxdb ‐storage_driver_db=cadvisor ‐</span></span><br><span class="line"><span class="bash">storage_driver_host=influxsrv:8086</span></span><br></pre></td></tr></table></figure><p>WEB前端访问地址<br><a href="http://192.168.184.135:8080/containers/" target="_blank" rel="noopener">http://192.168.184.135:8080/containers/</a>  (请自觉替换实际ip)<br>性能指标含义参照如下地址<br><a href="https://blog.csdn.net/ZHANG_H_A/article/details/53097084" target="_blank" rel="noopener">https://blog.csdn.net/ZHANG_H_A/article/details/53097084</a><br>再次查看influxDB，发现已经有很多数据被采集进去了。</p><h1 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h1><p>Grafana是一个可视化面板（Dashboard），有着非常漂亮的图表和布局展示，功能齐全的度量仪表盘和图形编辑器。支持Graphite、zabbix、InfluxDB、Prometheus和OpenTSDB作为数据源。</p><p>Grafana主要特性：灵活丰富的图形化选项；可以混合多种风格；支持白天和夜间模式；多个数据源。</p><h3 id="Grafana安装"><a href="#Grafana安装" class="headerlink" title="Grafana安装"></a>Grafana安装</h3><p>（1）下载镜像<br><code>docker pull grafana/grafana</code><br>（2）创建容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run ‐d ‐p 3001:3000 ‐e INFLUXDB_HOST=influxsrv ‐e</span><br><span class="line">INFLUXDB_PORT=8086 ‐e INFLUXDB_NAME=cadvisor ‐e INFLUXDB_USER=cadvisor ‐e</span><br><span class="line">INFLUXDB_PASS=cadvisor ‐‐link influxsrv:influxsrv ‐‐name grafana</span><br><span class="line">grafana/grafana</span><br></pre></td></tr></table></figure></p><p>注意，<code>INFLUXDB</code>配置请与上文我的写的配置相同。<br>（3）访问<br><a href="http://192.168.184.135:3001" target="_blank" rel="noopener">http://192.168.184.135:3001</a> （自觉更换ip）<br>用户名密码均为<code>admin</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>//TODO</p><h1 id="pinpoint"><a href="#pinpoint" class="headerlink" title="pinpoint"></a>pinpoint</h1><h3 id="是啥"><a href="#是啥" class="headerlink" title="是啥"></a>是啥</h3><p>pinpoint是开源在github上的一款APM监控工具，它是用Java编写的，用于大规模分布式系统监控。它对性能的影响最小（只增加约3％资源利用率），安装agent是无侵入式的，只需要在被测试的Tomcat中加上3句话，打下探针，就可以监控整套程序了。</p><h3 id="所需软件"><a href="#所需软件" class="headerlink" title="所需软件"></a>所需软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hbase-1.2.6-bin.tar.gz</span><br><span class="line">pinpoint-1.6.2.zip pinpoint源码，使用hbase-create.hbase脚本初始化</span><br><span class="line">hbase</span><br><span class="line">pinpoint-collector-1.6.2.war collector模块，使用tomcat进行部署</span><br><span class="line">pinpoint-web-1.6.2.war web管控台，使用tomcat进行部署</span><br><span class="line">pinpoint-agent-1.6.2.tar.gz 不需要部署，在被监控应用一端</span><br><span class="line">apache-tomcat-8.5.15.zip</span><br></pre></td></tr></table></figure><p>准备两个tomcat环境，一个部署pinpoint-collector-1.6.2.war，另一个部署pinpoint-web-1.6.2.war</p><h3 id="安装hbase"><a href="#安装hbase" class="headerlink" title="安装hbase"></a>安装hbase</h3><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>解压hbase-1.2.6-bin.tar.gz，修改hbase/conf/hbase-site.xml文件内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;file:///pinpoint/data/hbase&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;/pinpoint/data/zookeeper&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hbase.master.port&lt;/name&gt;</span><br><span class="line">&lt;value&gt;60000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hbase.regionserver.port&lt;/name&gt;</span><br><span class="line">&lt;value&gt;60020&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>修改<code>hbase/conf/hbase-env.sh</code>文件，设置<code>JAVA_HOME</code>环境变量<br><code>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</code></p><h4 id="启动hbase"><a href="#启动hbase" class="headerlink" title="启动hbase"></a>启动hbase</h4><p><code>hbase/bin/start-hbase.sh</code></p><h4 id="执行jps查看是否有HMaster进程"><a href="#执行jps查看是否有HMaster进程" class="headerlink" title="执行jps查看是否有HMaster进程"></a>执行jps查看是否有HMaster进程</h4><p>访问 <a href="http://127.0.0.1:16010/master-status" target="_blank" rel="noopener">http://127.0.0.1:16010/master-status</a> 查看hbase web管控台<br>导入hbase初始化脚步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">hbase/bin/hbase shell /pinpoint-1.6.2/hbase/scripts/hbase-create.hbase</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">0 row(s) in 1.4160 seconds</span><br><span class="line">0 row(s) in 1.2420 seconds</span><br><span class="line">0 row(s) in 2.2410 seconds</span><br><span class="line">0 row(s) in 1.2400 seconds</span><br><span class="line">0 row(s) in 1.2450 seconds</span><br><span class="line">0 row(s) in 1.2420 seconds</span><br><span class="line">0 row(s) in 1.2360 seconds</span><br><span class="line">0 row(s) in 1.2400 seconds</span><br><span class="line">0 row(s) in 1.2370 seconds</span><br><span class="line">0 row(s) in 2.2450 seconds</span><br><span class="line">0 row(s) in 4.2480 seconds</span><br><span class="line">0 row(s) in 1.2310 seconds</span><br><span class="line">0 row(s) in 1.2430 seconds</span><br><span class="line">0 row(s) in 1.2390 seconds</span><br><span class="line">0 row(s) in 1.2440 seconds</span><br><span class="line">0 row(s) in 1.2440 seconds</span><br><span class="line">TABLE</span><br><span class="line">AgentEvent</span><br><span class="line">AgentInfo</span><br><span class="line">AgentLifeCycle</span><br><span class="line">AgentStat</span><br><span class="line">AgentStatV2</span><br><span class="line">ApiMetaData</span><br><span class="line">ApplicationIndex</span><br><span class="line">ApplicationMapStatisticsCallee_Ver2</span><br><span class="line">ApplicationMapStatisticsCaller_Ver2</span><br><span class="line">ApplicationMapStatisticsSelf_Ver2</span><br><span class="line">ApplicationTraceIndex</span><br><span class="line">HostApplicationMap_Ver2</span><br><span class="line">SqlMetaData_Ver2</span><br><span class="line">StringMetaData</span><br><span class="line">TraceV2</span><br><span class="line">Traces</span><br><span class="line">16 row(s) in 0.0190 seconds</span><br></pre></td></tr></table></figure></p><h4 id="进入hbase-shell"><a href="#进入hbase-shell" class="headerlink" title="进入hbase shell"></a>进入hbase shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hbase/bin/hbase shell</span><br><span class="line">HBase Shell; enter &apos;help&lt;RETURN&gt;&apos; for list of supported commands.</span><br><span class="line">Type &quot;exit&lt;RETURN&gt;&quot; to leave the HBase Shell</span><br><span class="line">Version 1.2.6, rUnknown, Mon May 29 02:25:32 CDT 2017</span><br><span class="line">hbase(main):001:0&gt;</span><br></pre></td></tr></table></figure><p>输入status ‘detailed’查看刚才初始化的表，是否存在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):001:0&gt; status &apos;detailed&apos;</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://127.0.0.1:16010/master-status" target="_blank" rel="noopener">http://127.0.0.1:16010/master-status</a> 查看hbase web管控台</p><h4 id="部署collector"><a href="#部署collector" class="headerlink" title="部署collector"></a>部署collector</h4><p>解压apache-tomcat-8.5.15.zip并重命名为collector<br>拷贝pinpoint-collector-1.6.2.war到collector\webapps\目录下并重命名为ROOT.war<br>涉及到两个配置文件</p><ul><li>hbase.properties<br>由于使用的为hbase自带的zookeeper即hbase和zookeeper在同一台机器上，则不需要修改collector/webapps/ROOT/WEB-INF/classes/hbase.properties文件</li><li>pinpoint-collector.properties<br>注意观察该配置文件中中的三个端口9994、9995、9996 默认不需要修改，其中9994为collector监听的tcp端口，9995为collector监听的udp端口</li></ul><p>执行collector/bin/startup.sh启动collector<br>部署web管控台<br>解压apache-tomcat-8.5.15.zip并重命名为web<br>拷贝pinpoint-web-1.6.2.war到web\webapps\目录下并重命名为ROOT.war<br>同样留意web/webapps/ROOT/WEB-INF/classes/hbase.properties中的配置，若与hbase在同一台机器则不需要修改<br>执行web/bin/startup.sh启动web管控台(注意修改tomcat端口号，防止冲突，这里修改端口为8088)<br>浏览器访问 <a href="http://127.0.0.1:8088/" target="_blank" rel="noopener">http://127.0.0.1:8088/</a> 查看pinpoint管控台</p><h3 id="监控spring-boot应用"><a href="#监控spring-boot应用" class="headerlink" title="监控spring boot应用"></a>监控spring boot应用</h3><p>这里有一个spring-boot-example.jar的应用，现在要使用pinpoint来对其监控跟踪。操作很简单，分两步<br>解压pinpoint-agent-1.6.2.tar.gz并对其进行配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf pinpoint-agent-1.6.2.tar.gz -C pinpoint-agent</span><br></pre></td></tr></table></figure></p><p>修改pinpoint-agent/pinpoint.config中的配置与collector服务一致。此处因为pinpoint-agent与collector在同<br>一台机器，因此默认配置即可不需要修改。<br>为spring-boot应用配置pinpoint-agent<br>启动spring-boot应用时添加如下参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:$AGENT_PATH/pinpoint-bootstrap-$VERSION.jar</span><br><span class="line">-Dpinpoint.agentId</span><br><span class="line">-Dpinpoint.applicationName</span><br></pre></td></tr></table></figure></p><p>本例中的启动参数为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:/pinpoint-agent/pinpoint-bootstrap-1.6.2.jar -Dpinpoint.agentId=spring-boot-app -Dpinpoint.applicationName=spring-boot-app -jar spring-boot-docker-example-1.0.jar</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://127.0.0.1:8088/" target="_blank" rel="noopener">http://127.0.0.1:8088/</a> ，第一次访问可能没有数据，可以先访问下应用，然后在刷新pinpoint管控台即可</p><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p><a href="https://www.cnblogs.com/yyhh/p/6106472.html" target="_blank" rel="noopener">https://www.cnblogs.com/yyhh/p/6106472.html</a></p><h1 id="Open-Falcon"><a href="#Open-Falcon" class="headerlink" title="Open-Falcon"></a>Open-Falcon</h1><p>Open-Falcon，小米家的开源监控系统。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>1、强大灵活的数据采集：自动发现，支持falcon-agent、snmp、支持用户主动push、用户自定义插件支持、opentsdb data model like（timestamp、endpoint、metric、key-value tags）</p><p>2、水平扩展能力：支持每个周期上亿次的数据采集、告警判定、历史数据存储和查询</p><p>3、高效率的告警策略管理：高效的portal、支持策略模板、模板继承和覆盖、多种告警方式、支持callback调用</p><p>4、人性化的告警设置：最大告警次数、告警级别、告警恢复通知、告警暂停、不同时段不同阈值、支持维护周期</p><p>5、高效率的graph组件：单机支撑200万metric的上报、归档、存储（周期为1分钟）</p><p>6、高效的历史数据query组件：采用rrdtool的数据归档策略，秒级返回上百个metric一年的历史数据</p><p>7、dashboard：多维度的数据展示，用户自定义Screen</p><p>8、高可用：整个系统无核心单点，易运维，易部署，可水平扩展</p><p>9、开发语言： 整个系统的后端，全部golang编写，portal和dashboard使用python编写。</p><h3 id="社区和文档支持"><a href="#社区和文档支持" class="headerlink" title="社区和文档支持"></a>社区和文档支持</h3><p><a href="http://book.open-falcon.org/zh/index.html" target="_blank" rel="noopener">http://book.open-falcon.org/zh/index.html</a></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h3><p>yum安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y redis</span><br></pre></td></tr></table></figure></p><p>修改配置redis.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/redis.conf</span><br></pre></td></tr></table></figure></p><p>启动redis：<code>redis-server &amp;</code></p><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mysql-server</span><br></pre></td></tr></table></figure><p>启动mysql：<code>service mysqld start</code><br>查看mysql状态：<code>service mysqld status</code></p><h3 id="初始化mysql数据库表"><a href="#初始化mysql数据库表" class="headerlink" title="初始化mysql数据库表"></a>初始化mysql数据库表</h3><p>数据默认没有设置密码，执行的时候出现输入密码，直接回车。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp/ &amp;&amp; git clone https://github.com/open-falcon/falcon-plus.git </span><br><span class="line">cd /tmp/falcon-plus/scripts/mysql/db_schema/</span><br><span class="line">mysql -h 127.0.0.1 -u root -p &lt; 1_uic-db-schema.sql</span><br><span class="line">mysql -h 127.0.0.1 -u root -p &lt; 2_portal-db-schema.sql</span><br><span class="line">mysql -h 127.0.0.1 -u root -p &lt; 3_dashboard-db-schema.sql</span><br><span class="line">mysql -h 127.0.0.1 -u root -p &lt; 4_graph-db-schema.sql</span><br><span class="line">mysql -h 127.0.0.1 -u root -p &lt; 5_alarms-db-schema.sql</span><br><span class="line">rm -rf /tmp/falcon-plus/</span><br></pre></td></tr></table></figure></p><p>设置mysql的root用户密码：<br><code>mysql –u root</code><br>查看mysql用户和密码<br><code>select user,host,password from mysql.user;</code></p><p>发现查询密码都是空，然后开始设置root的密码为bigdata<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set password for root@localhost=password(&apos;bigdata&apos;);</span><br></pre></td></tr></table></figure></p><p>退出：<code>mysql&gt;exit</code></p><h3 id="下载编译后的二进制包"><a href="#下载编译后的二进制包" class="headerlink" title="下载编译后的二进制包"></a>下载编译后的二进制包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/program/software</span><br><span class="line">wget https://github.com/open-falcon/falcon-plus/releases/download/v0.2.1/open-falcon-v0.2.1.tar.gz</span><br></pre></td></tr></table></figure><h2 id="后端安装"><a href="#后端安装" class="headerlink" title="后端安装"></a>后端安装</h2><h3 id="创建工作目录"><a href="#创建工作目录" class="headerlink" title="创建工作目录"></a>创建工作目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export FALCON_HOME=/home/work</span><br><span class="line">export WORKSPACE=$FALCON_HOME/open-falcon</span><br><span class="line">mkdir -p $WORKSPACE</span><br></pre></td></tr></table></figure><h3 id="解压二进制包"><a href="#解压二进制包" class="headerlink" title="解压二进制包"></a>解压二进制包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/program/software</span><br><span class="line">tar -xzvf open-falcon-v0.2.1.tar.gz -C $WORKSPACE</span><br></pre></td></tr></table></figure><h3 id="配置数据库账号和密码"><a href="#配置数据库账号和密码" class="headerlink" title="配置数据库账号和密码"></a>配置数据库账号和密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $WORKSPACE</span><br><span class="line">grep -Ilr 3306  ./ | xargs -n1 -- sed -i &apos;s/root:/root:bigdata/g&apos;</span><br></pre></td></tr></table></figure><p>注意root:后面默认密码为空.</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>查看目录下包括Open-Falcon的所有组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $WORKSPACE</span><br><span class="line">./open-falcon start</span><br></pre></td></tr></table></figure></p><p>检查所有模块的启动状况<br><code>./open-falcon check</code></p><h3 id="更多命令行工具"><a href="#更多命令行工具" class="headerlink" title="更多命令行工具"></a>更多命令行工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">./open-falcon [start|stop|restart|check|monitor|reload] module</span><br><span class="line">./open-falcon start agent</span><br><span class="line"></span><br><span class="line">./open-falcon check</span><br><span class="line">  falcon-graph         UP           53007</span><br><span class="line">  falcon-hbs         UP           53014</span><br><span class="line">  falcon-judge         UP           53020</span><br><span class="line">  falcon-transfer         UP           53026</span><br><span class="line">  falcon-nodata         UP           53032</span><br><span class="line">  falcon-aggregator         UP           53038</span><br><span class="line">  falcon-agent         UP           53044</span><br><span class="line">  falcon-gateway         UP           53050</span><br><span class="line">  falcon-api         UP           53056</span><br><span class="line">  falcon-alarm         UP           53063</span><br><span class="line"></span><br><span class="line">For debugging , You can check $WorkDir/$moduleName/log/logs/xxx.log</span><br></pre></td></tr></table></figure><h2 id="前端安装"><a href="#前端安装" class="headerlink" title="前端安装"></a>前端安装</h2><h3 id="创建工作目录-1"><a href="#创建工作目录-1" class="headerlink" title="创建工作目录"></a>创建工作目录</h3><p>这一步在创建后端服务的时候已经建立好，所以不需要再进行操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export HOME=/home/work</span><br><span class="line">export WORKSPACE=$HOME/open-falcon</span><br><span class="line">mkdir -p $WORKSPACE</span><br><span class="line">cd $WORKSPACE</span><br></pre></td></tr></table></figure></p><h3 id="克隆前端组件代码"><a href="#克隆前端组件代码" class="headerlink" title="克隆前端组件代码"></a>克隆前端组件代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $WORKSPACE</span><br><span class="line">git clone https://github.com/open-falcon/dashboard.git</span><br></pre></td></tr></table></figure><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y python-virtualenv</span><br><span class="line">yum install -y python-devel</span><br><span class="line">yum install -y openldap-devel</span><br><span class="line">yum install -y mysql-devel</span><br><span class="line">yum groupinstall &quot;Development tools&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $WORKSPACE/dashboard/</span><br><span class="line">virtualenv ./env</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./env/bin/pip install -r pip_requirements.txt -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><p>注意：如果执行上面有问题，就直接执行<code>./env/bin/pip install -r pip_requirements.txt</code></p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>dashboard的配置文件为：<strong> ‘rrd/config.py’</strong>，请根据实际情况修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## API_ADDR 表示后端api组件的地址</span><br><span class="line">API_ADDR = &quot;http://127.0.0.1:8080/api/v1&quot; </span><br><span class="line">## 根据实际情况，修改PORTAL_DB_*, 默认用户名为root，默认密码为&quot;&quot;</span><br><span class="line">## 根据实际情况，修改ALARM_DB_*, 默认用户名为root，默认密码为&quot;&quot;</span><br></pre></td></tr></table></figure></p><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash control start</span><br></pre></td></tr></table></figure><p>open <a href="http://127.0.0.1:8081" target="_blank" rel="noopener">http://127.0.0.1:8081</a> in your browser.</p><p>停止<code>bash control stop</code></p><h2 id="安装-Agent"><a href="#安装-Agent" class="headerlink" title="安装-Agent"></a>安装-Agent</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>agent用于采集机器负载监控指标，比如cpu.idle、load.1min、disk.io.util等等，每隔60秒push给Transfer。agent与Transfer建立了长连接，数据发送速度比较快，agent提供了一个http接口/v1/push用于接收用户手工push的一些数据，然后通过长连接迅速转发给Transfer。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>agent需要部署到所有要被监控的机器上，比如公司有10万台机器，那就要部署10万个agent。agent本身资源消耗很少，不用担心。<br>首先找到之前后端服务的解压目录：<br><code>/home/work/open-falcon/</code><br>拷贝agent到需要监控的服务器上面<br><code>scp -r agent/ root@dst1:/home/work/open-falcon</code><br>拷贝open-falcon到需要监控的服务器上面<br><code>scp -r open-falcon root@dst1:/home/work/open-falcon</code><br>修改配置文件：<br>配置文件必须叫cfg.json，如下参照修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;debug&quot;: true,  # 控制一些debug信息的输出，生产环境通常设置为false</span><br><span class="line">    &quot;hostname&quot;: &quot;&quot;, # agent采集了数据发给transfer，endpoint就设置为了hostname，默认通过`hostname`获取，如果配置中配置了hostname，就用配置中的</span><br><span class="line">    &quot;ip&quot;: &quot;&quot;, # agent与hbs心跳的时候会把自己的ip地址发给hbs，agent会自动探测本机ip，如果不想让agent自动探测，可以手工修改该配置</span><br><span class="line">    &quot;plugin&quot;: &#123;</span><br><span class="line">        &quot;enabled&quot;: false, # 默认不开启插件机制</span><br><span class="line">        &quot;dir&quot;: &quot;./plugin&quot;,  # 把放置插件脚本的git repo clone到这个目录</span><br><span class="line">        &quot;git&quot;: &quot;https://github.com/open-falcon/plugin.git&quot;, # 放置插件脚本的git repo地址</span><br><span class="line">        &quot;logs&quot;: &quot;./logs&quot; # 插件执行的log，如果插件执行有问题，可以去这个目录看log</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;heartbeat&quot;: &#123;</span><br><span class="line">        &quot;enabled&quot;: true,  # 此处enabled要设置为true</span><br><span class="line">        &quot;addr&quot;: &quot;127.0.0.1:6030&quot;, # hbs的地址，端口是hbs的rpc端口</span><br><span class="line">        &quot;interval&quot;: 60, # 心跳周期，单位是秒</span><br><span class="line">        &quot;timeout&quot;: 1000 # 连接hbs的超时时间，单位是毫秒</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;transfer&quot;: &#123;</span><br><span class="line">        &quot;enabled&quot;: true, </span><br><span class="line">        &quot;addrs&quot;: [</span><br><span class="line">            &quot;127.0.0.1:18433&quot;</span><br><span class="line">        ],  # transfer的地址，端口是transfer的rpc端口, 可以支持写多个transfer的地址，agent会保证HA</span><br><span class="line">        &quot;interval&quot;: 60, # 采集周期，单位是秒，即agent一分钟采集一次数据发给transfer</span><br><span class="line">        &quot;timeout&quot;: 1000 # 连接transfer的超时时间，单位是毫秒</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;http&quot;: &#123;</span><br><span class="line">        &quot;enabled&quot;: true,  # 是否要监听http端口</span><br><span class="line">        &quot;listen&quot;: &quot;:1988&quot;,</span><br><span class="line">        &quot;backdoor&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;collector&quot;: &#123;</span><br><span class="line">        &quot;ifacePrefix&quot;: [&quot;eth&quot;, &quot;em&quot;], # 默认配置只会采集网卡名称前缀是eth、em的网卡流量，配置为空就会采集所有的，lo的也会采集。可以从/proc/net/dev看到各个网卡的流量信息</span><br><span class="line">        &quot;mountPoint&quot;: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;default_tags&quot;: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;ignore&quot;: &#123;  # 默认采集了200多个metric，可以通过ignore设置为不采集</span><br><span class="line">        &quot;cpu.busy&quot;: true,</span><br><span class="line">        &quot;df.bytes.free&quot;: true,</span><br><span class="line">        &quot;df.bytes.total&quot;: true,</span><br><span class="line">        &quot;df.bytes.used&quot;: true,</span><br><span class="line">        &quot;df.bytes.used.percent&quot;: true,</span><br><span class="line">        &quot;df.inodes.total&quot;: true,</span><br><span class="line">        &quot;df.inodes.free&quot;: true,</span><br><span class="line">        &quot;df.inodes.used&quot;: true,</span><br><span class="line">        &quot;df.inodes.used.percent&quot;: true,</span><br><span class="line">        &quot;mem.memtotal&quot;: true,</span><br><span class="line">        &quot;mem.memused&quot;: true,</span><br><span class="line">        &quot;mem.memused.percent&quot;: true,</span><br><span class="line">        &quot;mem.memfree&quot;: true,</span><br><span class="line">        &quot;mem.swaptotal&quot;: true,</span><br><span class="line">        &quot;mem.swapused&quot;: true,</span><br><span class="line">        &quot;mem.swapfree&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h3><p><code>./open-falcon start agent</code>  启动进程<br><code>./open-falcon stop agent</code>  停止进程<br><code>./open-falcon monitor agent</code>  查看日志<br>看var目录下的log是否正常，或者浏览器访问其1988端口。另外agent提供了一个–check参数，可以检查agent是否可以正常跑在当前机器上<br><code>./falcon-agent --check</code>可进入监控界面查看</p><h2 id="安装数据转发服务-Transfer"><a href="#安装数据转发服务-Transfer" class="headerlink" title="安装数据转发服务-Transfer"></a>安装数据转发服务-Transfer</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>transfer是数据转发服务。它接收agent上报的数据，然后按照哈希规则进行数据分片、并将分片后的数据分别push给graph&amp;judge等组件。</p><h3 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h3><p>服务部署，包括配置修改、启动服务、检验服务、停止服务等。这之前，需要将安装包解压到服务的部署目录下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 修改配置, 配置项含义见下文</span><br><span class="line">vim cfg.json</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动服务</span><br><span class="line">./open-falcon start transfer</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 校验服务,这里假定服务开启了6060的http监听端口。检验结果为ok表明服务正常启动。</span><br><span class="line">curl -s &quot;127.0.0.1:6060/health&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 停止服务</span><br><span class="line">./open-falcon stop transfer</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看日志</span><br><span class="line">./open-falcon monitor transfer</span><br></pre></td></tr></table></figure><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p>配置文件默认为<code>./cfg.json</code><br>debug: true/false, 如果为true，日志中会打印debug信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">minStep: 30, 允许上报的数据最小间隔，默认为30秒</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">    - enabled: true/false, 表示是否开启该http端口，该端口为控制端口，主要用来对transfer发送控制命令、统计命令、debug命令等</span><br><span class="line">    - listen: 表示监听的http端口</span><br><span class="line"></span><br><span class="line">rpc</span><br><span class="line">    - enabled: true/false, 表示是否开启该jsonrpc数据接收端口, Agent发送数据使用的就是该端口</span><br><span class="line">    - listen: 表示监听的http端口</span><br><span class="line"></span><br><span class="line">socket #即将被废弃,请避免使用</span><br><span class="line">    - enabled: true/false, 表示是否开启该telnet方式的数据接收端口，这是为了方便用户一行行的发送数据给transfer</span><br><span class="line">    - listen: 表示监听的http端口</span><br><span class="line"></span><br><span class="line">judge</span><br><span class="line">    - enabled: true/false, 表示是否开启向judge发送数据</span><br><span class="line">    - batch: 数据转发的批量大小，可以加快发送速度，建议保持默认值</span><br><span class="line">    - connTimeout: 单位是毫秒，与后端建立连接的超时时间，可以根据网络质量微调，建议保持默认</span><br><span class="line">    - callTimeout: 单位是毫秒，发送数据给后端的超时时间，可以根据网络质量微调，建议保持默认</span><br><span class="line">    - pingMethod: 后端提供的ping接口，用来探测连接是否可用，必须保持默认</span><br><span class="line">    - maxConns: 连接池相关配置，最大连接数，建议保持默认</span><br><span class="line">    - maxIdle: 连接池相关配置，最大空闲连接数，建议保持默认</span><br><span class="line">    - replicas: 这是一致性hash算法需要的节点副本数量，建议不要变更，保持默认即可</span><br><span class="line">    - cluster: key-value形式的字典，表示后端的judge列表，其中key代表后端judge名字，value代表的是具体的ip:port</span><br><span class="line"></span><br><span class="line">graph</span><br><span class="line">    - enabled: true/false, 表示是否开启向graph发送数据</span><br><span class="line">    - batch: 数据转发的批量大小，可以加快发送速度，建议保持默认值</span><br><span class="line">    - connTimeout: 单位是毫秒，与后端建立连接的超时时间，可以根据网络质量微调，建议保持默认</span><br><span class="line">    - callTimeout: 单位是毫秒，发送数据给后端的超时时间，可以根据网络质量微调，建议保持默认</span><br><span class="line">    - pingMethod: 后端提供的ping接口，用来探测连接是否可用，必须保持默认</span><br><span class="line">    - maxConns: 连接池相关配置，最大连接数，建议保持默认</span><br><span class="line">    - maxIdle: 连接池相关配置，最大空闲连接数，建议保持默认</span><br><span class="line">    - replicas: 这是一致性hash算法需要的节点副本数量，建议不要变更，保持默认即可</span><br><span class="line">    - cluster: key-value形式的字典，表示后端的graph列表，其中key代表后端graph名字，value代表的是具体的ip:port(多个地址用逗号隔开, transfer会将同一份数据发送至各个地址，利用这个特性可以实现数据的多重备份)</span><br><span class="line"></span><br><span class="line">tsdb</span><br><span class="line">    - enabled: true/false, 表示是否开启向open tsdb发送数据</span><br><span class="line">    - batch: 数据转发的批量大小，可以加快发送速度</span><br><span class="line">    - connTimeout: 单位是毫秒，与后端建立连接的超时时间，可以根据网络质量微调，建议保持默认</span><br><span class="line">    - callTimeout: 单位是毫秒，发送数据给后端的超时时间，可以根据网络质量微调，建议保持默认</span><br><span class="line">    - maxConns: 连接池相关配置，最大连接数，建议保持默认</span><br><span class="line">    - maxIdle: 连接池相关配置，最大空闲连接数，建议保持默认</span><br><span class="line">    - retry: 连接后端的重试次数和发送数据的重试次数</span><br><span class="line">    - address: tsdb地址或者tsdb集群vip地址, 通过tcp连接tsdb.</span><br></pre></td></tr></table></figure></p><p>部署完成transfer组件后，请修改agent的配置，使其指向正确的transfer地址。在安装完graph和judge后，请修改transfer的相应配置、使其能够正确寻址到这两个组件。</p><h2 id="安装查询组件-API"><a href="#安装查询组件-API" class="headerlink" title="安装查询组件-API"></a>安装查询组件-API</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>api组件，提供统一的restAPI操作接口。比如：api组件接收查询请求，根据一致性哈希算法去相应的graph实例查询不同metric的数据，然后汇总拿到的数据，最后统一返回给用户。</p><h3 id="服务部署-1"><a href="#服务部署-1" class="headerlink" title="服务部署"></a>服务部署</h3><p>服务部署，包括配置修改、启动服务、检验服务、停止服务等。这之前，需要将安装包解压到服务的部署目录下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 修改配置, 配置项含义见下文, 注意graph集群的配置</span><br><span class="line">vim cfg.json</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">./open-falcon start api</span><br><span class="line"></span><br><span class="line"># 停止服务</span><br><span class="line">./open-falcon stop api</span><br><span class="line"></span><br><span class="line"># 查看日志</span><br><span class="line">./open-falcon monitor api</span><br></pre></td></tr></table></figure></p><h3 id="服务说明"><a href="#服务说明" class="headerlink" title="服务说明"></a>服务说明</h3><p>注意: 请确保 graphs的内容与transfer的配置完全一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;log_level&quot;: &quot;debug&quot;,</span><br><span class="line">    &quot;db&quot;: &#123;  //数据库相关的连接配置信息</span><br><span class="line">        &quot;faclon_portal&quot;: &quot;root:@tcp(127.0.0.1:3306)/falcon_portal?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;,</span><br><span class="line">        &quot;graph&quot;: &quot;root:@tcp(127.0.0.1:3306)/graph?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;,</span><br><span class="line">        &quot;uic&quot;: &quot;root:@tcp(127.0.0.1:3306)/uic?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;,</span><br><span class="line">        &quot;dashboard&quot;: &quot;root:@tcp(127.0.0.1:3306)/dashboard?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;,</span><br><span class="line">        &quot;alarms&quot;: &quot;root:@tcp(127.0.0.1:3306)/alarms?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;,</span><br><span class="line">        &quot;db_bug&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;graphs&quot;: &#123;  // graph模块的部署列表信息</span><br><span class="line">        &quot;cluster&quot;: &#123;</span><br><span class="line">            &quot;graph-00&quot;: &quot;127.0.0.1:6070&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_conns&quot;: 100,</span><br><span class="line">        &quot;max_idle&quot;: 100,</span><br><span class="line">        &quot;conn_timeout&quot;: 1000,</span><br><span class="line">        &quot;call_timeout&quot;: 5000,</span><br><span class="line">        &quot;numberOfReplicas&quot;: 500</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;metric_list_file&quot;: &quot;./api/data/metric&quot;,</span><br><span class="line">    &quot;web_port&quot;: &quot;:8080&quot;,  // http监听端口</span><br><span class="line">    &quot;access_control&quot;: true, // 如果设置为false，那么任何用户都可以具备管理员权限</span><br><span class="line">    &quot;salt&quot;: &quot;pleaseinputwhichyouareusingnow&quot;,  //数据库加密密码的时候的salt</span><br><span class="line">    &quot;skip_auth&quot;: false, //如果设置为true，那么访问api就不需要经过认证</span><br><span class="line">    &quot;default_token&quot;: &quot;default-token-used-in-server-side&quot;,  //用于服务端各模块间的访问授权</span><br><span class="line">    &quot;gen_doc&quot;: false,</span><br><span class="line">    &quot;gen_doc_path&quot;: &quot;doc/module.html&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>备注：<br>   部署完成api组件后，请修改dashboard组件的配置、使其能够正确寻址到api组件。<br>请确保api组件的graph列表 与 transfer的配置 一致。</p><h2 id="安装绘图数据的组件-Graph"><a href="#安装绘图数据的组件-Graph" class="headerlink" title="安装绘图数据的组件- Graph"></a>安装绘图数据的组件- Graph</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>graph是存储绘图数据的组件。graph组件 接收transfer组件推送上来的监控数据，同时处理api组件的查询请求、返回绘图数据。</p><h3 id="服务部署-2"><a href="#服务部署-2" class="headerlink" title="服务部署"></a>服务部署</h3><p>服务部署，包括配置修改、启动服务、检验服务、停止服务等。这之前，需要将安装包解压到服务的部署目录下。（通知之前的一样，拷贝需要的包到指定的服务器）</p><h1 id="修改配置-配置项含义见下文"><a href="#修改配置-配置项含义见下文" class="headerlink" title="修改配置, 配置项含义见下文"></a>修改配置, 配置项含义见下文</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim cfg.json</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">./open-falcon start graph</span><br><span class="line"></span><br><span class="line"># 停止服务</span><br><span class="line">./open-falcon stop graph</span><br><span class="line"></span><br><span class="line"># 查看日志</span><br><span class="line">    ./open-falcon monitor graph</span><br></pre></td></tr></table></figure><p>三、    配置说明<br>配置文件默认为<code>./cfg.json</code>，配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;debug&quot;: false, //true or false, 是否开启debug日志</span><br><span class="line">    &quot;http&quot;: &#123;</span><br><span class="line">        &quot;enabled&quot;: true, //true or false, 表示是否开启该http端口，该端口为控制端口，主要用来对graph发送控制命令、统计命令、debug命令</span><br><span class="line">        &quot;listen&quot;: &quot;0.0.0.0:6071&quot; //表示监听的http端口</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;rpc&quot;: &#123;</span><br><span class="line">        &quot;enabled&quot;: true, //true or false, 表示是否开启该rpc端口，该端口为数据接收端口</span><br><span class="line">        &quot;listen&quot;: &quot;0.0.0.0:6070&quot; //表示监听的rpc端口</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;rrd&quot;: &#123;</span><br><span class="line">        &quot;storage&quot;: &quot;./data/6070&quot; // 历史数据的文件存储路径（如有必要，请修改为合适的路径）</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;db&quot;: &#123;</span><br><span class="line">        &quot;dsn&quot;: &quot;root:@tcp(127.0.0.1:3306)/graph?loc=Local&amp;parseTime=true&quot;, //MySQL的连接信息，默认用户名是root，密码为空，host为127.0.0.1，database为graph（如有必要，请修改)</span><br><span class="line">        &quot;maxIdle&quot;: 4  //MySQL连接池配置，连接池允许的最大连接数，保持默认即可</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;callTimeout&quot;: 5000,  //RPC调用超时时间，单位ms</span><br><span class="line">    &quot;migrate&quot;: &#123;  //扩容graph时历史数据自动迁移</span><br><span class="line">        &quot;enabled&quot;: false,  //true or false, 表示graph是否处于数据迁移状态</span><br><span class="line">        &quot;concurrency&quot;: 2, //数据迁移时的并发连接数，建议保持默认</span><br><span class="line">        &quot;replicas&quot;: 500, //这是一致性hash算法需要的节点副本数量，建议不要变更，保持默认即可（必须和transfer的配置中保持一致）</span><br><span class="line">        &quot;cluster&quot;: &#123; //未扩容前老的graph实例列表</span><br><span class="line">            &quot;graph-00&quot; : &quot;127.0.0.1:6070&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>如果上图红框中出现同一台服务器的不同名字的配置，则进入数据库，进行如下操作：<br>进入数据库：<code>mysql –u root –p</code><br>查看所有数据库：<code>show databses;</code><br>选择数据库：<code>use graph;</code><br>查看表：<code>show tables;</code><br>查询表：<code>select * from endpoint;</code><br>删除不需要的数据：<code>delete from endpoint where id=153;</code><br>如下可以不操作：<br>可以一起删除falcon_portal库中的host表中的无用数据。</p><h2 id="Mysql监控"><a href="#Mysql监控" class="headerlink" title="Mysql监控"></a>Mysql监控</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>在数据采集一节中我们介绍了常见的监控数据源。open-falcon作为一个监控框架，可以去采集任何系统的监控指标数据，只要将监控数据组织为open-falcon规范的格式就OK了。<br>MySQL的数据采集可以通过mymon来做。<br>mymon是一个cron，每分钟跑一次，配置文件中配置了数据库连接地址，mymon连到该数据库，采集一些监控指标，比如global status, global variables, slave status等等，然后组装为open-falcon规定的格式的数据，post给本机的falcon-agent。falcon-agent提供了一个http接口，使用方法可以参考数据采集中的例子。比如我们有1000台机器都部署了MySQL实例，可以在这1000台机器上分别部署1000个cron，即：与数据库实例一一对应。</p><h3 id="配置安装"><a href="#配置安装" class="headerlink" title="配置安装"></a>配置安装</h3><p>下载地址：<a href="https://github.com/open-falcon/mymon" target="_blank" rel="noopener">https://github.com/open-falcon/mymon</a><br>安装：<br>设置$GOPATH：export $GOPATH =/src/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $GOPATH/src/github.com/open-falcon</span><br><span class="line">cd $GOPATH/src/github.com/open-falcon</span><br><span class="line">git clone https://github.com/open-falcon/mymon.git</span><br><span class="line"></span><br><span class="line">cd mymon</span><br><span class="line">go get ./...</span><br><span class="line">go build -o mymon</span><br><span class="line"></span><br><span class="line">echo &apos;* * * * * cd $GOPATH/src/github.com/open-falcon/mymon &amp;&amp; ./mymon -c etc/mon.cfg&apos; &gt; /etc/cron.d/mymon</span><br></pre></td></tr></table></figure></p><p>执行go get ./…的时候出现如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">package golang.org/x/crypto/ssh/terminal: unrecognized import path &quot;golang.org/x/crypto/ssh/terminal&quot; (https fetch: Get https://golang.org/x/crypto/ssh/terminal?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)</span><br><span class="line">package golang.org/x/sys/unix: unrecognized import path &quot;golang.org/x/sys/unix&quot; (https fetch: Get https://golang.org/x/sys/unix?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)</span><br></pre></td></tr></table></figure></p><p>解决办法：<br>方法一：直接下载文件，然后把解压出来的文件夹放在src里。<br>下载地址：<a href="https://pan.baidu.com/s/1boVAtJp" target="_blank" rel="noopener">https://pan.baidu.com/s/1boVAtJp</a></p><p>方法二：直接从git上下载对应文件放到src下面。<br>mkdir -p $GOPATH/src/golang.org/x<br>cd $GOPATH/src/golang.org/x<br>git clone <a href="https://github.com/golang/crypto.git" target="_blank" rel="noopener">https://github.com/golang/crypto.git</a><br>git clone <a href="https://github.com/golang/sys.git" target="_blank" rel="noopener">https://github.com/golang/sys.git</a></p><p>修改配置文件：<br>/src/github.com/open-falcon/mymon/etc<br><code>vi mon.cfg</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[default]</span><br><span class="line"> log_file=mymon.log # 日志路径和文件名</span><br><span class="line"> # Panic 0</span><br><span class="line"> # Fatal 1</span><br><span class="line"> # Error 2</span><br><span class="line"> # Warn 3</span><br><span class="line"> # Info 4</span><br><span class="line"> # Debug 5</span><br><span class="line"> log_level=4 # 日志级别</span><br><span class="line"></span><br><span class="line"> falcon_client=http://127.0.0.1:1988/v1/push # falcon agent连接地址</span><br><span class="line"></span><br><span class="line"> #自定义endpoint</span><br><span class="line"> endpoint=127.0.0.1 #若不设置则使用OS的hostname</span><br><span class="line"></span><br><span class="line"> [mysql]</span><br><span class="line"> user=root # 数据库用户名</span><br><span class="line"> password= # 数据库密码</span><br><span class="line"> host=127.0.0.1 # 数据库连接地址</span><br><span class="line"> port=3306 # 数据库端口</span><br></pre></td></tr></table></figure></p><p>采集成功!</p><h2 id="Redis监控"><a href="#Redis监控" class="headerlink" title="Redis监控"></a>Redis监控</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍~"></a>介绍~</h3><p>Redis的数据采集可以通过采集脚本<a href="https://github.com/iambocai/falcon-monit-scripts/tree/master/redis" target="_blank" rel="noopener">redis-monitor</a> 或者 <a href="https://github.com/ZhuoRoger/redismon" target="_blank" rel="noopener">redismon</a>来做。</p><p>redis-monitor是一个cron，每分钟跑一次采集脚本redis-monitor.py，其中配置了redis服务的地址，redis-monitor连到redis实例，采集一些监控指标，比如connected_clients、used_memory等等，然后组装为open-falcon规定的格式的数据，post给本机的falcon-agent。falcon-agent提供了一个http接口，使用方法可以参考数据采集中的例子。</p><p>比如，我们有1000台机器都部署了Redis实例，可以在这1000台机器上分别部署1000个cron，即：与Redis实例一一对应。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载地址：<a href="https://github.com/iambocai/falcon-monit-scripts" target="_blank" rel="noopener">https://github.com/iambocai/falcon-monit-scripts</a></p><p>进入目录：/data/program/software/falcon-monit-scripts-master/redis</p><p>修改配置文件：<code>vi redis-monitor.py</code><br>修改对应连接到agent的地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'iambocai'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> commands</span><br><span class="line"><span class="keyword">import</span> urllib2, base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisStats</span>:</span></span><br><span class="line">    <span class="comment"># ĺýÍý?ăŔíťĐů??ÝťßţÓđredisŁŹ??ůťŘüîÜ?ôđ???Óđredis-cliÖŘ?</span></span><br><span class="line">    _redis_cli = <span class="string">'/usr/local/redis/redis-cli'</span></span><br><span class="line">    _stat_regex = re.compile(<span class="string">ur'(\w+):([0-9]+\.?[0-9]*)\r'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,  port=<span class="string">'6379'</span>, passwd=None, host=<span class="string">'127.0.0.1'</span>)</span>:</span></span><br><span class="line">        self._cmd = <span class="string">'%s -h %s -p %s info'</span> % (self._redis_cli, host, port)</span><br><span class="line">        <span class="keyword">if</span> passwd <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">''</span>, <span class="keyword">None</span>]:</span><br><span class="line">            self._cmd = <span class="string">'%s -h %s -p %s -a %s info'</span> % (self._redis_cli, host, port, passwd)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stats</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">' Return a dict containing redis stats '</span></span><br><span class="line">        info = commands.getoutput(self._cmd)</span><br><span class="line">        <span class="keyword">return</span> dict(self._stat_regex.findall(info))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    ip = <span class="string">"dst6-redis"</span></span><br><span class="line">    timestamp = int(time.time())</span><br><span class="line">    step = <span class="number">60</span></span><br><span class="line">    <span class="comment"># inst_listńéÜÁđíÖőredisŰŐöÇŮţËěÖŞřúŁŹďďßí???ŢÁŰŐöÇńé?ö˘portűúpasswordŁŹËď?ŢĹéÄ????îÜŰ°Űö?ÔđŁŹĺýŁş</span></span><br><span class="line">    <span class="comment"># inst_list = [ i for i in commands.getoutput("find  /etc/ -name 'redis*.conf'" ).split('\n') ]</span></span><br><span class="line">    insts_list = [ <span class="string">'/usr/local/redis/redis.conf'</span> ]</span><br><span class="line">    p = []</span><br><span class="line">    </span><br><span class="line">    monit_keys = [</span><br><span class="line">        (<span class="string">'connected_clients'</span>,<span class="string">'GAUGE'</span>), </span><br><span class="line">        (<span class="string">'blocked_clients'</span>,<span class="string">'GAUGE'</span>), </span><br><span class="line">        (<span class="string">'used_memory'</span>,<span class="string">'GAUGE'</span>),</span><br><span class="line">        (<span class="string">'used_memory_rss'</span>,<span class="string">'GAUGE'</span>),</span><br><span class="line">        (<span class="string">'mem_fragmentation_ratio'</span>,<span class="string">'GAUGE'</span>),</span><br><span class="line">        (<span class="string">'total_commands_processed'</span>,<span class="string">'COUNTER'</span>),</span><br><span class="line">        (<span class="string">'rejected_connections'</span>,<span class="string">'COUNTER'</span>),</span><br><span class="line">        (<span class="string">'expired_keys'</span>,<span class="string">'COUNTER'</span>),</span><br><span class="line">        (<span class="string">'evicted_keys'</span>,<span class="string">'COUNTER'</span>),</span><br><span class="line">        (<span class="string">'keyspace_hits'</span>,<span class="string">'COUNTER'</span>),</span><br><span class="line">        (<span class="string">'keyspace_misses'</span>,<span class="string">'COUNTER'</span>),</span><br><span class="line">        (<span class="string">'keyspace_hit_ratio'</span>,<span class="string">'GAUGE'</span>),</span><br><span class="line">    ]</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> inst <span class="keyword">in</span> insts_list:</span><br><span class="line">        port = commands.getoutput(<span class="string">"sed -n 's/^port *\([0-9]\&#123;4,5\&#125;\)/\\1/p' %s"</span> % inst)</span><br><span class="line">        passwd = commands.getoutput(<span class="string">"sed -n 's/^requirepass *\([^ ]*\)/\\1/p' %s"</span> % inst)</span><br><span class="line">        metric = <span class="string">"redis"</span></span><br><span class="line">        endpoint = ip</span><br><span class="line">        tags = <span class="string">'port=%s'</span> % port</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            conn = RedisStats(port, passwd)</span><br><span class="line">            stats = conn.stats()</span><br><span class="line">        <span class="keyword">except</span> Exception,e:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key,vtype <span class="keyword">in</span> monit_keys:</span><br><span class="line">            <span class="comment">#ěéŢÁÖŐ÷úÜâîÜredisńéinfo?őóîÜăáăÓ?á´ŁŹĺýÍýĚŔá´ěéŢÁä˛?âÍéŠóúó˘îÜkeyöŚÔŻ?</span></span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> stats.keys():</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment">#?ßŠŮ¤ńéáă</span></span><br><span class="line">            <span class="keyword">if</span> key == <span class="string">'keyspace_hit_ratio'</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    value = float(stats[<span class="string">'keyspace_hits'</span>])/(int(stats[<span class="string">'keyspace_hits'</span>]) + int(stats[<span class="string">'keyspace_misses'</span>]))</span><br><span class="line">                <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">                    value = <span class="number">0</span></span><br><span class="line">            <span class="comment">#áďř¸áăăŔÝŠďĂ?</span></span><br><span class="line">            <span class="keyword">elif</span> key == <span class="string">'mem_fragmentation_ratio'</span>:</span><br><span class="line">                value = float(stats[key])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">#ĐěöâîÜÔ´óúó˘ŕ÷counterŁŹint</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    value = int(stats[key])</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            i = &#123;</span><br><span class="line">                <span class="string">'Metric'</span>: <span class="string">'%s.%s'</span> % (metric, key),</span><br><span class="line">                <span class="string">'Endpoint'</span>: endpoint,</span><br><span class="line">                <span class="string">'Timestamp'</span>: timestamp,</span><br><span class="line">                <span class="string">'Step'</span>: step,</span><br><span class="line">                <span class="string">'Value'</span>: value,</span><br><span class="line">                <span class="string">'CounterType'</span>: vtype,</span><br><span class="line">                <span class="string">'TAGS'</span>: tags</span><br><span class="line">            &#125;</span><br><span class="line">            p.append(i)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> json.dumps(p, sort_keys=<span class="keyword">True</span>,indent=<span class="number">4</span>)</span><br><span class="line">    method = <span class="string">"POST"</span></span><br><span class="line">    handler = urllib2.HTTPHandler()</span><br><span class="line">    opener = urllib2.build_opener(handler)</span><br><span class="line">    url = <span class="string">'http://127.0.0.1:1988/v1/push'</span></span><br><span class="line">    request = urllib2.Request(url, data=json.dumps(p) )</span><br><span class="line">    request.add_header(<span class="string">"Content-Type"</span>,<span class="string">'application/json'</span>)</span><br><span class="line">    request.get_method = <span class="keyword">lambda</span>: method</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        connection = opener.open(request)</span><br><span class="line">    <span class="keyword">except</span> urllib2.HTTPError,e:</span><br><span class="line">        connection = e</span><br><span class="line"></span><br><span class="line">    <span class="comment"># check. Substitute with appropriate HTTP code.</span></span><br><span class="line">    <span class="keyword">if</span> connection.code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">print</span> connection.read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'&#123;"err":1,"msg":"%s"&#125;'</span> % connection</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    proc = commands.getoutput(<span class="string">' ps -ef|grep %s|grep -v grep|wc -l '</span> % os.path.basename(sys.argv[<span class="number">0</span>]))</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    <span class="keyword">if</span> int(proc) &lt; <span class="number">5</span>:</span><br><span class="line">        main()</span><br></pre></td></tr></table></figure><p>启动测试<code>python redis-monitor.py</code></p><p>将脚本加入crontab执行即可</p><p>查看服务状态：<code>service crond status</code></p><p>编辑：<code>crontab –e</code></p><p>加入命令，一分钟执行一次，然后保存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * python /data/program/software/falcon-monit-scripts-master/redis/redis-monitor.py</span><br></pre></td></tr></table></figure><p>重启服务<code>service crond restart</code></p><h3 id="汇报字段"><a href="#汇报字段" class="headerlink" title="汇报字段"></a>汇报字段</h3><table><thead><tr><th><strong>key</strong></th><th><strong>tag</strong></th><th><strong>type</strong></th><th><strong>note</strong></th></tr></thead><tbody><tr><td>redis.connected_clients</td><td>port</td><td>GAUGE</td><td>已连接客户端的数量</td></tr><tr><td>redis.blocked_clients</td><td>port</td><td>GAUGE</td><td>正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量</td></tr><tr><td>redis.used_memory</td><td>port</td><td>GAUGE</td><td>由   Redis 分配器分配的内存总量，以字节（byte）为单位</td></tr><tr><td>redis.used_memory_rss</td><td>port</td><td>GAUGE</td><td>从操作系统的角度，返回   Redis 已分配的内存总量（俗称常驻集大小）</td></tr><tr><td>redis.mem_fragmentation_ratio</td><td>port</td><td>GAUGE</td><td>used_memory_rss 和 used_memory 之间的比率</td></tr><tr><td>redis.total_commands_processed</td><td>port</td><td>COUNTER</td><td>采集周期内执行命令总数</td></tr><tr><td>redis.rejected_connections</td><td>port</td><td>COUNTER</td><td>采集周期内拒绝连接总数</td></tr><tr><td>redis.expired_keys</td><td>port</td><td>COUNTER</td><td>采集周期内过期key总数</td></tr><tr><td>redis.evicted_keys</td><td>port</td><td>COUNTER</td><td>采集周期内踢出key总数</td></tr><tr><td>redis.keyspace_hits</td><td>port</td><td>COUNTER</td><td>采集周期内key命中总数</td></tr><tr><td>redis.keyspace_misses</td><td>port</td><td>COUNTER</td><td>采集周期内key拒绝总数</td></tr><tr><td>redis.keyspace_hit_ratio</td><td>port</td><td>GAUGE</td><td>访问命中率</td></tr></tbody></table><p>如需增减字段，请修改monit_keys变量</p><h2 id="Rabbitmq监控"><a href="#Rabbitmq监控" class="headerlink" title="Rabbitmq监控"></a>Rabbitmq监控</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>在数据采集一节中我们介绍了常见的监控数据源。open-falcon作为一个监控框架，可以去采集任何系统的监控指标数据，只要将监控数据组织为open-falcon规范的格式就OK了。</p><p>RMQ的数据采集可以通过脚本rabbitmq-monitor来做。</p><p>   rabbitmq-monitor是一个cron，每分钟跑一次脚本rabbitmq-monitor.py，其中配置了RMQ的用户名&amp;密码等，脚本连到该RMQ实例，采集一些监控指标，比如messages_ready、messages_total、deliver_rate、publish_rate等等，然后组装为open-falcon规定的格式的数据，post给本机的falcon-agent。falcon-agent提供了一个http接口，使用方法可以参考<a href="http://book.open-falcon.org/zh_0_2/philosophy/data-collect.html" target="_blank" rel="noopener">数据采集</a>中的例子。</p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>下载地址：<a href="https://github.com/iambocai/falcon-monit-scripts/tree/master/rabbitmq" target="_blank" rel="noopener">https://github.com/iambocai/falcon-monit-scripts/tree/master/rabbitmq</a><br>修改配置：<code>vi rabbitmq-monitor.py</code><br> 1、根据实际部署情况，修改15,16行的rabbitmq-server管理端口和登录用户名密码<br> 2、确认1中配置的rabbitmq用户有你想监控的queue/vhosts的权限<br>3、将脚本加入crontab即可<br>新建脚本 : <code>vi rabbitmq_cron</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* * * * * root (cd /data/program/software/falcon-monit-scripts-master/rabbitmq &amp;&amp; python  rabbitmq-monitor.py  &gt; /dev/null)</span><br><span class="line">cp rabbitmq_cron /etc/cron.d/</span><br></pre></td></tr></table></figure></p><h3 id="汇报字段-1"><a href="#汇报字段-1" class="headerlink" title="汇报字段"></a>汇报字段</h3><table><thead><tr><th><strong>key</strong></th><th><strong>tag</strong></th><th><strong>type</strong></th><th><strong>note</strong></th></tr></thead><tbody><tr><td>rabbitmq.messages_ready</td><td>name(Queue名字)</td><td>GAUGE</td><td>队列中处于等待被消费状态消息数</td></tr><tr><td>rabbitmq.messages_unacknowledged</td><td>name(Queue名字)</td><td>GAUGE</td><td>队列中处于消费中状态的消息数</td></tr><tr><td>rabbitmq.messages_total</td><td>name(Queue名字)</td><td>GAUGE</td><td>队列中所有未完成消费的消息数，等于messages_ready+messages_unacknowledged</td></tr><tr><td>rabbitmq.ack_rate</td><td>name(Queue名字)</td><td>GAUGE</td><td>消费者ack的速率</td></tr><tr><td>rabbitmq.deliver_rate</td><td>name(Queue名字)</td><td>GAUGE</td><td>deliver的速率</td></tr><tr><td>rabbitmq.deliver_get_rate</td><td>name(Queue名字)</td><td>GAUGE</td><td>deliver_get的速率</td></tr><tr><td>rabbitmq.publish_rate</td><td>name(Queue名字)</td><td>GAUGE</td><td>publish的速率</td></tr></tbody></table><h1 id="完"><a href="#完" class="headerlink" title="完"></a>完</h1><p>全片结束，觉得我写的不错？想要了解更多精彩新姿势？赶快打开我的👉个人<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">博客</a> 👈吧！</p><p>谢谢你那么可爱，还一直关注着我~❤😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在寻找有利的监控软件为我的微服务献身，于是乎整理文档，试验，花了很长时间。今天分享一下整理的部分工具，有时间会继续在此post中更新的！🙃&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.tengshe789.tech/&quot; targ
      
    
    </summary>
    
    
      <category term="分享" scheme="https://tengshe789.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="软件教学" scheme="https://tengshe789.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%95%99%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>记录一次Gitlab安装并与Gitbook集成的经历</title>
    <link href="https://tengshe789.github.io/2019/01/25/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Gitlab%E5%AE%89%E8%A3%85%E5%B9%B6%E4%B8%8EGitbook%E9%9B%86%E6%88%90%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
    <id>https://tengshe789.github.io/2019/01/25/记录一次Gitlab安装并与Gitbook集成的经历/</id>
    <published>2019-01-25T08:55:38.000Z</published>
    <updated>2019-11-20T13:39:41.566Z</updated>
    
    <content type="html"><![CDATA[<p>老板今天又来提需求啦d=====(￣▽￣*)b</p><p>需要把公司的一些技术文档放到一个平台上，员工阅读，同时文档要有较好的维护性，成本尽可能低。</p><p>所以，就有今天博客的内容了！</p><p>想要解锁更多新姿势？请访问我的个人博客<a href="https://blog.tengshe789.tech/（😘" target="_blank" rel="noopener">https://blog.tengshe789.tech/（😘</a></p><h2 id="安装gitlab"><a href="#安装gitlab" class="headerlink" title="安装gitlab"></a>安装gitlab</h2><h4 id="1-安装并配置必要的依赖关系"><a href="#1-安装并配置必要的依赖关系" class="headerlink" title="1. 安装并配置必要的依赖关系"></a>1. 安装并配置必要的依赖关系</h4><p>在CentOS 7（和RedHat / Oracle / Scientific Linux 7）上，以下命令还将在系统防火墙中打开HTTP和SSH访问。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure><p>接下来，安装Postfix以发送通知电子邮件。如果您想使用其他解决方案发送电子邮件，请在安装GitLab后跳过此步骤并[配置外部SMTP服务器]（<a href="https://docs.gitlab.com/omnibus/settings/smtp.html）。" target="_blank" rel="noopener">https://docs.gitlab.com/omnibus/settings/smtp.html）。</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install postfix</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> postfix</span><br><span class="line">sudo systemctl start postfix</span><br></pre></td></tr></table></figure><p>在Postfix安装期间，可能会出现配置屏幕。选择“Internet Site”并按Enter键。使用服务器的外部DNS作为“邮件名称”，然后按Enter键。如果出现其他屏幕，请继续按Enter键接受默认值。</p><h4 id="2-添加Gitlab包存储库并安装包"><a href="#2-添加Gitlab包存储库并安装包" class="headerlink" title="2. 添加Gitlab包存储库并安装包"></a>2. 添加Gitlab包存储库并安装包</h4><p>Add the GitLab package repository.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure><p>接下来，安装GitLab包。将<code>http：// gitlab.example.com</code>更改为您要访问GitLab实例的URL。安装将自动配置并启动该URL的GitLab。 HTTPS在安装后需要其他配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo EXTERNAL_URL=<span class="string">"http://192.168.190.132:33333"</span> yum install -y gitlab-ee</span><br></pre></td></tr></table></figure><h4 id="3-登陆并验证"><a href="#3-登陆并验证" class="headerlink" title="3. 登陆并验证"></a>3. 登陆并验证</h4><p>在您第一次访问时，您将被重定向到密码重置屏幕。提供初始管理员帐户的密码，您将被重定向回登录屏幕。使用默认帐户的用户名<code>root</code>登录。</p><p>See our <a href="https://docs.gitlab.com/omnibus/README.html#installation-and-configuration-using-omnibus-package" target="_blank" rel="noopener">documentation for detailed instructions on installing and configuration</a>.</p><h2 id="与gitbook集成"><a href="#与gitbook集成" class="headerlink" title="与gitbook集成"></a>与gitbook集成</h2><h3 id="安装nodeJs"><a href="#安装nodeJs" class="headerlink" title="安装nodeJs"></a>安装nodeJs</h3><p>只能安装第三方仓库中存在的版本，一般落后 node 最新版本</p><ol><li>安装EPEL 仓库<br><code>yum install epel-release</code></li><li>安装 nodejs<br><code>yum install nodejs</code></li><li>安装 <code>npm yum install npm</code></li></ol><h3 id="安装gitbook"><a href="#安装gitbook" class="headerlink" title="安装gitbook"></a>安装gitbook</h3><p>GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书。GitBook支持输出以下几种文档格式</p><ul><li>静态站点：GitBook默认输出该种格式</li><li>PDF：需要安装gitbook-pdf依赖</li><li>eBook：需要安装ebook-convert</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install gitbook -g</span><br><span class="line">npm install -g gitbook-cli</span><br></pre></td></tr></table></figure><h4 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h4><ol><li>出现<code>npm ERR! Error: connect ECONNREFUSED 104.16.24.35:443</code>问题<br>使用如下语句关闭代理解决问题：<br><code>npm config set proxy null</code></li></ol><h3 id="安装GitLab-Ci-Runner"><a href="#安装GitLab-Ci-Runner" class="headerlink" title="安装GitLab Ci Runner"></a>安装GitLab Ci Runner</h3><ol><li><p>添加repository<br><code>curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</code></p></li><li><p>安装包<br><code>yum install gitlab-runner</code></p></li></ol><p>执行上述命令之后，之后的流程如下：</p><p>第一处红线：输入部署完成的gitlab地址比如<a href="http://111.111.111.111:8080/" target="_blank" rel="noopener">http://111.111.111.111:8080/</a></p><p>第二处红线: 登陆<code>gitlab</code>，先点击右上方<code>Admin Settings</code>，再找到左侧列表的中的<code>overview</code>一栏找到<code>runner</code>选项，找到并在shell中输入token.</p><p>剩下的过程随便写即可</p><p>最后看到Runner registered successfully表示注册成功。</p><p>最后可以登录gitlab进行验证，有如图所有列表说明注册成功</p><h4 id="配置持续集成"><a href="#配置持续集成" class="headerlink" title="配置持续集成"></a>配置持续集成</h4><p><a href="https://docs.gitlab.com/ce/ci/quick_start/README.html#creating-a-gitlab-ciyml-file" target="_blank" rel="noopener">https://docs.gitlab.com/ce/ci/quick_start/README.html#creating-a-gitlab-ciyml-file</a></p><p>在仓库下，创建<code>.gitlab-ci.yml</code>,写入以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="attr">GenerateHTML:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">p=`pwd`</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">echo</span> <span class="string">$p</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">gitbook</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">gitbook</span> <span class="string">serve</span></span><br></pre></td></tr></table></figure><p>打开gitlab里面的pineline，查看log。</p><h3 id="QA-1"><a href="#QA-1" class="headerlink" title="QA"></a>QA</h3><ol><li>出现This job is in pending state and is waiting to be picked by a runner错误</li></ol><p>解决：没找到优雅的方式。粗暴点，可以在服务器端重启<code>runner</code>，使用命令<code>gitlab-ci-multi-runner restart</code>。</p><h2 id="本地使用"><a href="#本地使用" class="headerlink" title="本地使用"></a>本地使用</h2><ol><li>将仓库clone下来，<code>gitbook init bookname</code> 創建書名爲bookname的書</li><li>写书，必要时使用<code>gitbook serve</code> 预览书。</li><li>创建<code>.gitlab-ci.yml</code>,写入配置。然后使用git命令上传到书库。</li></ol><h3 id="QA-2"><a href="#QA-2" class="headerlink" title="QA"></a>QA</h3><ol><li>CI/CD的log界面出现无法删除图书错误</li></ol><p>解决： CI/CD图形界面，右侧，点击cancel即可。</p><ol start="2"><li>出现<code>RangeError: Maximum call stack size exceeded</code>错误</li></ol><p>解决： 文章内容过长，导致js堆栈溢出。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>gitbook配置实例<a href="https://gitlab.com/pages/gitbook#building-locally" target="_blank" rel="noopener">https://gitlab.com/pages/gitbook#building-locally</a></p><p>其实类似gitbook的软件还有很多，就譬如<a href="https://docsify.js.org/#/" target="_blank" rel="noopener">docsify</a>，大家可以多查阅相关资料使用。</p><h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2><p>全片结束，觉得我写的不错？想要了解更多精彩新姿势？赶快打开我的👉个人<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">博客</a> 👈吧！</p><p>谢谢你那么可爱，还一直关注着我~❤😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;老板今天又来提需求啦d=====(￣▽￣*)b&lt;/p&gt;
&lt;p&gt;需要把公司的一些技术文档放到一个平台上，员工阅读，同时文档要有较好的维护性，成本尽可能低。&lt;/p&gt;
&lt;p&gt;所以，就有今天博客的内容了！&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问我的个人博客&lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://tengshe789.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="分享" scheme="https://tengshe789.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="软件教学" scheme="https://tengshe789.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%95%99%E5%AD%A6/"/>
    
      <category term="git" scheme="https://tengshe789.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>从0开始部署Rancher2.0到微服务容器部署与持续集成</title>
    <link href="https://tengshe789.github.io/2019/01/22/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2Rancher2-0/"/>
    <id>https://tengshe789.github.io/2019/01/22/从0开始部署Rancher2-0/</id>
    <published>2019-01-22T06:31:17.000Z</published>
    <updated>2019-11-20T13:39:41.170Z</updated>
    
    <content type="html"><![CDATA[<p>Rancher是一个开源的企业级容器管理平台。通过Rancher，企业再也不必自己使用一系列的开源软件去从头搭建容器服务平台。Rancher提供了在生产环境中使用的管理Docker和Kubernetes的全栈化容器部署与管理平台。今天分享一下我从0开始部署Rancher2.0到微服务容器部署与持续集成的历程。</p><p>想要解锁更多新姿势？请访问我的个人博客<a href="https://blog.tengshe789.tech/（😘" target="_blank" rel="noopener">https://blog.tengshe789.tech/（😘</a></p><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>请看我<a href="https://blog.tengshe789.tech/2019/01/18/%E8%AE%B0%E5%BD%95docker-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E4%BC%98/#more" target="_blank" rel="noopener">上篇博文</a>。</p><h2 id="容器下安装rancher"><a href="#容器下安装rancher" class="headerlink" title="容器下安装rancher"></a>容器下安装rancher</h2><h3 id="基础环境配置"><a href="#基础环境配置" class="headerlink" title="基础环境配置"></a>基础环境配置</h3><h4 id="切换到受支持的docker版本"><a href="#切换到受支持的docker版本" class="headerlink" title="切换到受支持的docker版本"></a>切换到受支持的docker版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ros engine switch docker-17.03.2-ce</span><br></pre></td></tr></table></figure><h4 id="关闭防火墙-可选-或者放行相应端口"><a href="#关闭防火墙-可选-或者放行相应端口" class="headerlink" title="关闭防火墙(可选)或者放行相应端口"></a>关闭防火墙(可选)或者放行相应端口</h4><p>对于刚刚接触Rancher的用户，建议在关闭防火墙的测试环境或桌面虚拟机来运行rancher，以避免出现网络通信问题。</p><ul><li><p>关闭防火墙</p><p>1、CentOS</p><p><code>systemctl stop firewalld.service &amp;&amp; systemctl disable firewalld.service</code></p><p>2、Ubuntu</p><p><code>ufw disable</code></p></li><li><p>端口放行</p><p>端口放行请查看<a href="https://www.cnrancher.com/docs/rancher/v2.x/cn/installation/references/" target="_blank" rel="noopener">端口需求</a></p></li></ul><h4 id="CentOS关闭selinux"><a href="#CentOS关闭selinux" class="headerlink" title="CentOS关闭selinux"></a>CentOS关闭selinux</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config</span><br></pre></td></tr></table></figure><h4 id="配置主机时间、时区、系统语言"><a href="#配置主机时间、时区、系统语言" class="headerlink" title="配置主机时间、时区、系统语言"></a>配置主机时间、时区、系统语言</h4><ul><li><p>查看时区</p><p><code>date -R</code>或者<code>timedatectl</code></p></li><li><p>修改时区</p><p><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p></li><li><p>修改系统语言环境</p><p><code>sudo echo &#39;LANG=&quot;en_US.UTF-8&quot;&#39; &gt;&gt; /etc/profile;source /etc/profile</code></p></li><li><p>配置主机NTP时间同步</p></li></ul><h4 id="Kernel性能调优"><a href="#Kernel性能调优" class="headerlink" title="Kernel性能调优"></a>Kernel性能调优</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /etc/sysctl.conf&lt;&lt;EOF</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.ipv4.neigh.default.gc_thresh1=4096</span><br><span class="line">net.ipv4.neigh.default.gc_thresh2=6144</span><br><span class="line">net.ipv4.neigh.default.gc_thresh3=8192</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="Hosts"><a href="#Hosts" class="headerlink" title="Hosts"></a>Hosts</h4><p>配置每台主机的hosts(/etc/hosts),添加<code>host_ip $hostname</code>到<code>/etc/hosts</code>文件中。</p><h3 id="安装运行rancher"><a href="#安装运行rancher" class="headerlink" title="安装运行rancher"></a>安装运行rancher</h3><h4 id="网络组件"><a href="#网络组件" class="headerlink" title="网络组件"></a>网络组件</h4><p>安装rancher以后可能会碰到一些莫名其妙的连接问题，譬如找不到命名虚拟机下能使用curl命名访问其他虚拟机，但是容器却不能访问其他容器，这时候就需要先安装<code>weave</code>网络组件了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull weaveworks/weave-npc:2.5.0</span><br></pre></td></tr></table></figure><h4 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h4><p>可以参考如下命令安装rancher</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher</span><br></pre></td></tr></table></figure><p>当然命令可以扩展，详情规则如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sudo docker run -d -v &lt;主机路径&gt;:/var/lib/rancher/ --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher:stable</span></span><br></pre></td></tr></table></figure><h4 id="登陆rancher"><a href="#登陆rancher" class="headerlink" title="登陆rancher"></a>登陆rancher</h4><p>Rancher Server容器启动很快速，不到一分钟你就可以通过<code>https://&lt;server_ip&gt;</code>访问Rancher UI。</p><p>第一次登录会要求设置管理员密码，默认管理员账号为: admin。一旦Rancher Server成功安装，用户界面将指导你添加第一个集群</p><h4 id="创建K8S集群"><a href="#创建K8S集群" class="headerlink" title="创建K8S集群"></a>创建K8S集群</h4><p>首先，右下角找语言选项，选中文。点击添加集群。</p><p><img src="/2019/01/22/从0开始部署Rancher2-0/1.jpg" alt="添加集群"></p><p>接下来写一下集群的名称，点开如图所示的选项，把命令复制一下，粘贴到宿主机中运行。</p><p>注意，rancher2.0基于k8s，而k8s需要etcd节点和control节点。现在，rancher会自动帮你勾选上worker节点，如果你是单机环境，必须要全部勾选这三个主机角色在复制命令。</p><p><img src="/2019/01/22/从0开始部署Rancher2-0/2.jpg" alt="添加集群"></p><h2 id="Docker私有仓库"><a href="#Docker私有仓库" class="headerlink" title="Docker私有仓库"></a>Docker私有仓库</h2><h3 id="私有仓库搭建与配置"><a href="#私有仓库搭建与配置" class="headerlink" title="私有仓库搭建与配置"></a>私有仓库搭建与配置</h3><p>（1）拉取私有仓库镜像（此步省略）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure></p><p>（2）启动私有仓库容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure></p><p>（3）打开浏览器 输入地址<code>http://192.168.190.137:5000/v2/_catalog</code> 看到<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">repositories: [ ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>表示私有仓库搭建成功并且内容为空</p><p>（4）修改docker的<code>daemon.json</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure></p><p>添加如下内容：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"insecure-registries"</span>:[&lt;server ip&gt;:<span class="number">5000</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（5）重启docker 服务<br>注意，如果上面的<code>daemon.json</code>格式出错，此使docker会报错，启动起不来。请仔细查看。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p><h3 id="镜像上传至私有仓库"><a href="#镜像上传至私有仓库" class="headerlink" title="镜像上传至私有仓库"></a>镜像上传至私有仓库</h3><p>（1）标记此镜像为私有仓库的镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag &lt;imgName&gt; &lt;server ip&gt;:5000/&lt;仓库 name&gt;</span><br></pre></td></tr></table></figure></p><p>（2）再次启动私服容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start registry</span><br></pre></td></tr></table></figure></p><p>（3）上传标记的镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push &lt;server ip&gt;:5000/&lt;仓库 name&gt;</span><br></pre></td></tr></table></figure></p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>私有仓库经历过版本迭代，也有授权认证等功能，想要了解更多资料请看博文，<a href="https://www.cnblogs.com/wade-luffy/p/6590849.html" target="_blank" rel="noopener">https://www.cnblogs.com/wade-luffy/p/6590849.html</a></p><h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个<br>新的镜像。</p><ol><li>对于开发人员：可以为开发团队提供一个完全一致的开发环境；</li><li>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新<br>的镜像开始工作了；</li><li>对于运维人员：在部署时，可以实现应用的无缝移植</li></ol><h4 id="dockerfile内容详解"><a href="#dockerfile内容详解" class="headerlink" title="dockerfile内容详解"></a>dockerfile内容详解</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># FROM : 指定基础镜像，要在哪个镜像建立</span></span><br><span class="line"><span class="keyword">FROM</span> anapsix/alpine-java:<span class="number">8</span>_server-jre_unlimited <span class="comment">## 我要的微服务需要依赖jre环境</span></span><br><span class="line"><span class="comment"># 容器卷，持久化的环境</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="bash"><span class="comment"># MAINTAINER：指定维护者信息</span></span></span><br><span class="line"><span class="bash">MAINTAINER randyvan007@qq.com</span></span><br><span class="line"><span class="bash"><span class="comment"># RUN：在镜像中要执行的命令 这个命名是同步容器内时间，防止部分操作出错的。不需要可以不执行</span></span></span><br><span class="line"><span class="bash">RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN mkdir -p /miaosha-redis</span></span><br><span class="line"><span class="bash"><span class="comment"># WORKDIR：指定当前工作目录，相当于 cd</span></span></span><br><span class="line"><span class="bash">WORKDIR /miaosha-redis</span></span><br><span class="line"><span class="bash"><span class="comment"># EXPOSE：指定容器要打开的端口</span></span></span><br><span class="line"><span class="bash">EXPOSE 8080</span></span><br><span class="line"><span class="bash"><span class="comment"># ADD：相当于 COPY，但是比 COPY 功能更强大 COPY ：复制本地主机的 （为 Dockerfile 所在目录的相对路径）到容器中的</span></span></span><br><span class="line"><span class="bash">ADD ./miaosha-redis/target/miaosha-redis.jar ./</span></span><br><span class="line"><span class="bash"><span class="comment"># 容器启动时执行指令</span></span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>, <span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>, <span class="string">"-jar"</span>, <span class="string">"app.jar"</span>]</span></span><br><span class="line"><span class="bash"><span class="comment"># 容器启动时执行指令</span></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"--spring.profiles.active=test"</span>]</span></span><br></pre></td></tr></table></figure><h4 id="执行命令构建镜像"><a href="#执行命令构建镜像" class="headerlink" title="执行命令构建镜像"></a>执行命令构建镜像</h4><p>在<code>dockerfile</code>的目录下，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [options] PATH | URL</span><br></pre></td></tr></table></figure></p><ul><li><p><code>docker build</code>： 用 Dockerfile 构建镜像的命令关键词。</p></li><li><p><code>[OPTIONS]</code> : 命令选项，常用的指令包括 <code>-t</code> 指定镜像的名字，<br><code>-f</code> 显示指定构建镜像的 Dockerfile 文件（Dockerfile 可不在当前路径下），<br>如果不使用 -f，则默认将上下文路径下的名为 Dockerfile 的文件认为是构建镜像的 “Dockerfile” 。</p></li><li><p><code>上下文路径|URL</code>： 指定构建镜像的上下文的路径，构建镜像的过程中，可以且只可以引用上下文中的任何文件 。</p></li></ul><h4 id="查看镜像是否建立完成"><a href="#查看镜像是否建立完成" class="headerlink" title="查看镜像是否建立完成"></a>查看镜像是否建立完成</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=景象名称 /bin/bash</span><br></pre></td></tr></table></figure><h2 id="微服务部署"><a href="#微服务部署" class="headerlink" title="微服务部署"></a>微服务部署</h2><p>微服务部署有两种方法：</p><ol><li>手动部署：<br> 首先基于源码打包生成jar包（或war包）,将jar包（或war包）上传至虚拟机并拷贝至JDK容器。</li><li>通过Maven插件自动部署。<br>   对于数量众多的微服务，手动部署无疑是非常麻烦的做法，并且容易出错。所以我们这里学习如何自动部署，这也是企业实际开发中经常使用的方法。</li></ol><h3 id="Maven插件自动部署步骤："><a href="#Maven插件自动部署步骤：" class="headerlink" title="Maven插件自动部署步骤："></a>Maven插件自动部署步骤：</h3><p>（1）修改宿主机的docker配置，让其可以远程访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p>其中ExecStart=后添加配置 <code>‐H tcp://0.0.0.0:2375 ‐H unix:///var/run/docker.sock</code></p><p>（2）刷新配置，重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon‐reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">docker start registry</span><br></pre></td></tr></table></figure><p>（3）微服务的maven工程pom.xml 增加配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.build.finalName&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- docker的maven插件，官网：https://github.com/spotify/docker-maven-plugin --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 注意imageName一定要是符合正则[a-z0-9-_.]的，否则构建不会成功 --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 详见：https://github.com/spotify/docker-maven-plugin    Invalid repository name ... only [a-z0-9-_.] are allowed--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;registry.url&#125;/$&#123;project.name&#125;:0.0.1<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>$&#123;docker.url&#125;<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>$&#123;project.basedir&#125;<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>java<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>["java", "-jar", "/$&#123;project.build.finalName&#125;.jar"]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">serverId</span>&gt;</span>docker-hub<span class="tag">&lt;/<span class="name">serverId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">registryUrl</span>&gt;</span>https://index.docker.io/v1/<span class="tag">&lt;/<span class="name">registryUrl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>push<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上下文路径配置，此处设置为项目根路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">contextDirectory</span>&gt;</span>$&#123;project.basedir&#125;<span class="tag">&lt;/<span class="name">contextDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">useMavenSettingsForAuth</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useMavenSettingsForAuth</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span>$&#123;registryUrl&#125;/hush/$&#123;project.build.finalName&#125;<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span>$&#123;imageVersion&#125;<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--作为Dockerfile文件传入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">buildArgs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">JAR_FILE</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">JAR_FILE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">buildArgs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用以上插件可以自动生成dockerfile</p><p>（5）在windows的CMD下，进入微服务工程所在的目录，输入以下命令，进行打包和上传镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package docker:build -DpushImage</span><br></pre></td></tr></table></figure><p>（6）去镜像库查看镜像<br>浏览器访问<code>http://&lt;server ip&gt;:5000/v2/_catalog</code> ，输出了我们上一步命名的镜像名称，则上传成功。</p><p>（7）在虚拟机查看镜像与启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>打完以后显示镜像名称。下面该启动容器了！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=服务名称 -p 容器内服务的端口号:容器发布的端口号 &lt;server ip&gt;:5000/镜像名称</span><br></pre></td></tr></table></figure></p><h2 id="持续集成持续部署"><a href="#持续集成持续部署" class="headerlink" title="持续集成持续部署"></a>持续集成持续部署</h2><h3 id="什么是持续集成"><a href="#什么是持续集成" class="headerlink" title="什么是持续集成"></a>什么是持续集成</h3><p>持续集成 Continuous integration ，简称CI<br>随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile）在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。<br>持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。</p><h3 id="持续集成的特点"><a href="#持续集成的特点" class="headerlink" title="持续集成的特点"></a>持续集成的特点</h3><p>它是一个自动化的周期性的集成测试过程，从检出代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，无需人工干预；需要有专门的集成服务器来执行集成构建；需要有代码托管工具支持，我们下一小节将介绍Git以及可视化界面Gogs的使用</p><h3 id="持续集成作用"><a href="#持续集成作用" class="headerlink" title="持续集成作用"></a>持续集成作用</h3><p>保证团队开发人员提交代码的质量，减轻了软件发布时的压力；持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；</p><h3 id="rancher和持续集成"><a href="#rancher和持续集成" class="headerlink" title="rancher和持续集成"></a>rancher和持续集成</h3><p>rancher支持与GitHub平台与GitLab平台持续集成。接下来我会新开篇文章讲讲git平台私服的搭建以及持续集成。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnrancher.com/docs/rancher/v2.x/cn/overview/quick-start-guide/" target="_blank" rel="noopener">rancher官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Rancher是一个开源的企业级容器管理平台。通过Rancher，企业再也不必自己使用一系列的开源软件去从头搭建容器服务平台。Rancher提供了在生产环境中使用的管理Docker和Kubernetes的全栈化容器部署与管理平台。今天分享一下我从0开始部署Rancher2.
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://tengshe789.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="k8s" scheme="https://tengshe789.github.io/tags/k8s/"/>
    
      <category term="分享" scheme="https://tengshe789.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="软件教学" scheme="https://tengshe789.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%95%99%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>记录docker 安装与调优</title>
    <link href="https://tengshe789.github.io/2019/01/18/%E8%AE%B0%E5%BD%95docker-%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E4%BC%98/"/>
    <id>https://tengshe789.github.io/2019/01/18/记录docker-安装与调优/</id>
    <published>2019-01-18T08:33:42.000Z</published>
    <updated>2019-11-20T13:39:41.563Z</updated>
    
    <content type="html"><![CDATA[<p>k8s是容器编排系统，需要docker的支持，今天分享一波docker的安装与调优过程。</p><p>不了解docker的童鞋可以参考<a href="https://www.cnblogs.com/SzeCheng/p/6822905.html" target="_blank" rel="noopener">博文</a>，本篇文章的主题不在讲解docker原理~</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/🧐🧐🧐🧐🧐🧐🧐🧐🧐" target="_blank" rel="noopener">https://blog.tengshe789.tech/🧐🧐🧐🧐🧐🧐🧐🧐🧐</a></p><h1 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h1><h2 id="centos7下"><a href="#centos7下" class="headerlink" title="centos7下"></a>centos7下</h2><h3 id="更新-yum-源"><a href="#更新-yum-源" class="headerlink" title="更新 yum 源"></a>更新 yum 源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><p><strong>修改系统源</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br><span class="line">cat &gt; /etc/yum.repos.d/CentOS-Base.repo &lt;&lt; EOF</span><br><span class="line"></span><br><span class="line">[base]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Base - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="comment">#released updates</span></span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Updates - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="comment">#additional packages that may be useful</span></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Extras - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="comment">#additional packages that extend functionality of existing packages</span></span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Plus - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/centosplus/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/<span class="variable">$releasever</span>/centosplus/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/<span class="variable">$releasever</span>/centosplus/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="comment">#contrib - packages by Centos Users</span></span><br><span class="line">[contrib]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Contrib - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/contrib/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/<span class="variable">$releasever</span>/contrib/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/<span class="variable">$releasever</span>/contrib/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="安装-netstat（用于查看当前机器端口占用情况）"><a href="#安装-netstat（用于查看当前机器端口占用情况）" class="headerlink" title="安装 netstat（用于查看当前机器端口占用情况）"></a>安装 netstat（用于查看当前机器端口占用情况）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install net-tools</span><br><span class="line"><span class="comment">#使用</span></span><br><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure><h3 id="添加-yum-源"><a href="#添加-yum-源" class="headerlink" title="添加 yum 源"></a>添加 yum 源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/yum.repos.d/docker.repo &lt;&lt;-EOF            </span><br><span class="line">    [dockerrepo]</span><br><span class="line">name=Docker Repository</span><br><span class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/7</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://yum.dockerproject.org/gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-selinux</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-engine</span><br></pre></td></tr></table></figure><h3 id="配置docker"><a href="#配置docker" class="headerlink" title="配置docker"></a>配置docker</h3><ul><li><p>配置所有ip的数据包转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br><span class="line">   </span><br><span class="line"><span class="comment">#找到ExecStart=xxx，在这行下面加入一行，内容如下：(k8s的网络需要)</span></span><br><span class="line">ExecStartPost=/sbin/iptables -I FORWARD -s 0.0.0.0/0 -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置 docker 开机服务启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker.service </span><br><span class="line"> </span><br><span class="line"><span class="comment">#立即启动 docker 服务</span></span><br><span class="line">$ systemctl start docker.service</span><br></pre></td></tr></table></figure></li></ul><h3 id="docker-ce"><a href="#docker-ce" class="headerlink" title="docker ce"></a>docker ce</h3><blockquote><p>因为CentOS的安全限制，通过RKE安装K8S集群时候无法使用<code>root</code>账户。所以，建议<code>CentOS</code>用户使用非<code>root</code>用户来运行docker,不管是<code>RKE</code>还是<code>custom</code>安装k8s,详情查看<a href="https://www.cnrancher.com/docs/rancher/v2.x/cn/faq/troubleshooting-ha/ssh-tunneling/" target="_blank" rel="noopener">无法为主机配置SSH隧道</a>。</p></blockquote>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加用户(可选)</span></span><br><span class="line">sudo adduser `&lt;new_user&gt;`</span><br><span class="line"><span class="comment"># 为新用户设置密码</span></span><br><span class="line">sudo passwd `&lt;new_user&gt;`</span><br><span class="line"><span class="comment"># 为新用户添加sudo权限</span></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">'&lt;new_user&gt; ALL=(ALL) ALL'</span> &gt;&gt; /etc/sudoers</span><br><span class="line"><span class="comment"># 卸载旧版本Docker软件</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">              docker-client \</span><br><span class="line">              docker-client-latest \</span><br><span class="line">              docker-common \</span><br><span class="line">              docker-latest \</span><br><span class="line">              docker-latest-logrotate \</span><br><span class="line">              docker-logrotate \</span><br><span class="line">              docker-selinux \</span><br><span class="line">              docker-engine-selinux \</span><br><span class="line">              docker-engine \</span><br><span class="line">              container*</span><br><span class="line"><span class="comment"># 定义安装版本</span></span><br><span class="line"><span class="built_in">export</span> docker_version=17.03.2</span><br><span class="line"><span class="comment"># step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo yum update -y</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2 bash-completion</span><br><span class="line"><span class="comment"># Step 2: 添加软件源信息</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># Step 3: 更新并安装 Docker-CE</span></span><br><span class="line">sudo yum makecache all</span><br><span class="line">version=$(yum list docker-ce.x86_64 --showduplicates | sort -r|grep <span class="variable">$&#123;docker_version&#125;</span>|awk <span class="string">'&#123;print $2&#125;'</span>)</span><br><span class="line">sudo yum -y install --<span class="built_in">setopt</span>=obsoletes=0 docker-ce-<span class="variable">$&#123;version&#125;</span> docker-ce-selinux-<span class="variable">$&#123;version&#125;</span></span><br><span class="line"><span class="comment"># 如果已经安装高版本Docker,可进行降级安装(可选)</span></span><br><span class="line">yum downgrade --<span class="built_in">setopt</span>=obsoletes=0 -y docker-ce-<span class="variable">$&#123;version&#125;</span> docker-ce-selinux-<span class="variable">$&#123;version&#125;</span></span><br><span class="line"><span class="comment"># 把当前用户加入docker组</span></span><br><span class="line">sudo usermod -aG docker `&lt;new_user&gt;`</span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h2 id="Ubuntu下"><a href="#Ubuntu下" class="headerlink" title="Ubuntu下"></a>Ubuntu下</h2><h3 id="卸载旧版本-如果有的话"><a href="#卸载旧版本-如果有的话" class="headerlink" title="卸载旧版本(如果有的话)"></a>卸载旧版本(如果有的话)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure><h3 id="更新apt-get源"><a href="#更新apt-get源" class="headerlink" title="更新apt-get源"></a>更新apt-get源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ add-apt-repository  <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure><p><strong>修改系统源 </strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">cat &gt; /etc/apt/sources.list &lt;&lt; EOF</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get update</span><br></pre></td></tr></table></figure><h3 id="安装apt的https支持包并添加gpg秘钥"><a href="#安装apt的https支持包并添加gpg秘钥" class="headerlink" title="安装apt的https支持包并添加gpg秘钥"></a>安装apt的https支持包并添加gpg秘钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -</span><br></pre></td></tr></table></figure><h3 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h3><ul><li><p>安装最新的稳定版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install -y docker-ce</span><br></pre></td></tr></table></figure></li><li><p>安装指定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取版本列表</span></span><br><span class="line">$ apt-cache madison docker-ce</span><br><span class="line"> </span><br><span class="line"><span class="comment">#指定版本安装(比如版本是17.09.1~ce-0~ubuntu)</span></span><br><span class="line">$ apt-get install -y docker-ce=17.09.1~ce-0~ubuntu</span><br></pre></td></tr></table></figure></li><li><p>接受所有ip的数据包转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vi /lib/systemd/system/docker.service</span><br><span class="line">   </span><br><span class="line"><span class="comment">#找到ExecStart=xxx，在这行上面加入一行，内容如下：(k8s的网络需要)</span></span><br><span class="line">ExecStartPost=/sbin/iptables -I FORWARD -s 0.0.0.0/0 -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ service docker start</span><br></pre></td></tr></table></figure></li></ul><p>遇到问题可以参考：[官方教程][1]</p><h1 id="部署k8s前系统的设置"><a href="#部署k8s前系统的设置" class="headerlink" title="部署k8s前系统的设置"></a>部署k8s前系统的设置</h1><h4 id="关闭、禁用防火墙-让所有机器之间都可以通过任意端口建立连接"><a href="#关闭、禁用防火墙-让所有机器之间都可以通过任意端口建立连接" class="headerlink" title="关闭、禁用防火墙(让所有机器之间都可以通过任意端口建立连接)"></a>关闭、禁用防火墙(让所有机器之间都可以通过任意端口建立连接)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ufw <span class="built_in">disable</span></span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">$ ufw status</span><br></pre></td></tr></table></figure><h4 id="设置系统参数-允许路由转发，不对bridge的数据进行处理"><a href="#设置系统参数-允许路由转发，不对bridge的数据进行处理" class="headerlink" title="设置系统参数 - 允许路由转发，不对bridge的数据进行处理"></a>设置系统参数 - 允许路由转发，不对bridge的数据进行处理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#写入配置文件</span></span><br><span class="line">$ cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"><span class="comment">#生效配置文件</span></span><br><span class="line">$ sysctl -p /etc/sysctl.d/k8s.conf</span><br></pre></td></tr></table></figure><h3 id="配置host文件"><a href="#配置host文件" class="headerlink" title="配置host文件"></a>配置host文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置host，使每个Node都可以通过名字解析到ip地址</span></span><br><span class="line">$ vim /etc/hosts</span><br><span class="line"><span class="comment">#加入如下片段(ip地址和servername替换成自己的)</span></span><br><span class="line">192.168.190.137 ubuntu01</span><br><span class="line">192.168.190.136 ubuntu03</span><br><span class="line">192.168.190.132 centos7</span><br><span class="line">192.168.190.135 ubuntu02</span><br></pre></td></tr></table></figure><h1 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h1><p>对于通过systemd来管理服务的系统(比如CentOS7.X、Ubuntu16.X), Docker有两处可以配置参数: 一个是<code>docker.service</code>服务配置文件,一个是Docker daemon配置文件daemon.json。</p><ol><li><p><code>docker.service</code></p><p>对于CentOS系统，<code>docker.service</code>默认位于<code>/usr/lib/systemd/system/docker.service</code>；对于Ubuntu系统，<code>docker.service</code>默认位于<code>/lib/systemd/system/docker.service</code></p></li><li><p><code>daemon.json</code></p><p>daemon.json默认位于<code>/etc/docker/daemon.json</code>，如果没有可手动创建，基于systemd管理的系统都是相同的路径。通过修改<code>daemon.json</code>来改过Docker配置，也是Docker官方推荐的方法。</p></li></ol><blockquote><p>以下说明均基于systemd,并通过<code>/etc/docker/daemon.json</code>来修改配置。</p></blockquote><h2 id="调优与配置"><a href="#调优与配置" class="headerlink" title="调优与配置"></a>调优与配置</h2><h3 id="配置镜像下载和上传并发数"><a href="#配置镜像下载和上传并发数" class="headerlink" title="配置镜像下载和上传并发数"></a>配置镜像下载和上传并发数</h3><p>从Docker1.12开始，支持自定义下载和上传镜像的并发数，默认值上传为3个并发，下载为5个并发。通过添加”max-concurrent-downloads”和”max-concurrent-uploads”参数对其修改:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"max-concurrent-downloads"</span>: 3,</span><br><span class="line"><span class="string">"max-concurrent-uploads"</span>: 5</span><br></pre></td></tr></table></figure><h3 id="配置镜像加速地址"><a href="#配置镜像加速地址" class="headerlink" title="配置镜像加速地址"></a>配置镜像加速地址</h3><p>Rancher从v1.6.15开始到v2.x.x,Rancher系统相关的所有镜像(包括1.6.x上的K8S镜像)都托管在Dockerhub仓库。Dockerhub节点在国外，国内直接拉取镜像会有些缓慢。为了加速镜像的下载，可以给Docker配置国内的镜像地址。</p><p>编辑<code>/etc/docker/daemon.json</code>加入以下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"registry-mirrors"</span>: [<span class="string">"https://7bezldxe.mirror.aliyuncs.com/"</span>,<span class="string">"https://IP:PORT/"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以设置多个<code>registry-mirrors</code>地址，以数组形式书写，地址需要添加协议头(https或者http)。</p></blockquote><h3 id="配置insecure-registries私有仓库"><a href="#配置insecure-registries私有仓库" class="headerlink" title="配置insecure-registries私有仓库"></a>配置<code>insecure-registries</code>私有仓库</h3><p>Docker默认只信任TLS加密的仓库地址(https)，所有非https仓库默认无法登陆也无法拉取镜像。<code>insecure-registries</code>字面意思为不安全的仓库，通过添加这个参数对非https仓库进行授信。可以设置多个<code>insecure-registries</code>地址，以数组形式书写，地址不能添加协议头(http)。</p><p>编辑<code>/etc/docker/daemon.json</code>加入以下内容:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"insecure-registries"</span>: [<span class="string">"192.168.1.100"</span>,<span class="string">"IP:PORT"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置Docker存储驱动"><a href="#配置Docker存储驱动" class="headerlink" title="配置Docker存储驱动"></a>配置Docker存储驱动</h3><p>OverlayFS是一个新一代的联合文件系统，类似于AUFS，但速度更快，实现更简单。Docker为OverlayFS提供了两个存储驱动程序:旧版的<code>overlay</code>，新版的<code>overlay2</code>(更稳定)。</p><p>先决条件:</p><ul><li><code>overlay2</code>: Linux内核版本4.0或更高版本，或使用内核版本3.10.0-514+的RHEL或CentOS。</li><li><code>overlay</code>: 主机Linux内核版本3.18+</li><li>支持的磁盘文件系统<ul><li>ext4(仅限RHEL 7.1)</li><li>xfs(RHEL7.2及更高版本)，需要启用d_type=true。 &gt;具体详情参考 <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/" target="_blank" rel="noopener">Docker Use the OverlayFS storage driver</a></li></ul></li></ul><p>编辑<code>/etc/docker/daemon.json</code>加入以下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line"><span class="attr">"storage-opts"</span>: [<span class="string">"overlay2.override_kernel_check=true"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置日志驱动"><a href="#配置日志驱动" class="headerlink" title="配置日志驱动"></a>配置日志驱动</h3><p>容器在运行时会产生大量日志文件，很容易占满磁盘空间。通过配置日志驱动来限制文件大小与文件的数量。 &gt;限制单个日志文件为<code>100M</code>,最多产生<code>3</code>个日志文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line"><span class="attr">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="attr">"max-size"</span>: <span class="string">"100m"</span>,</span><br><span class="line">    <span class="attr">"max-file"</span>: <span class="string">"3"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Ubuntu-Debian系统-，docker-info提示WARNING-No-swap-limit-support"><a href="#Ubuntu-Debian系统-，docker-info提示WARNING-No-swap-limit-support" class="headerlink" title="Ubuntu\Debian系统 ，docker info提示WARNING: No swap limit support"></a>Ubuntu\Debian系统 ，docker info提示WARNING: No swap limit support</h3><p>Ubuntu\Debian系统下，默认cgroups未开启swap account功能，这样会导致设置容器内存或者swap资源限制不生效。可以通过以下命令解决:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">'s/GRUB_CMDLINE_LINUX="/GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1  /g'</span>  /etc/default/grub</span><br><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>通过以上命令可自动配置参数，如果<code>/etc/default/grub</code>非默认配置，需根据实际参数做调整。<strong>提示</strong>以上配置完成后，建议重启一次主机。</p></blockquote><h2 id="调优配置总结"><a href="#调优配置总结" class="headerlink" title="调优配置总结"></a>调优配置总结</h2><p>1、Docker镜像下载最大并发数</p><p>通过配置镜像上传\下载并发数<code>max-concurrent-downloads,max-concurrent-uploads</code>,缩短镜像上传\下载的时间。</p><p>2、配置镜像加速地址</p><p>通过配置镜像加速地址<code>registry-mirrors</code>,可以很大程度提高镜像下载速度。</p><p>3、配置Docker存储驱动</p><p>OverlayFS是一个新一代的联合文件系统，类似于AUFS，但速度更快，实现更简单。Docker为OverlayFS提供了两个存储驱动程序:旧版的overlay，新版的<a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/" target="_blank" rel="noopener">overlay2</a>(更稳定)。</p><p>4、配置日志文件大小</p><p>容器中会产生大量日志文件，很容器占满磁盘空间。通过设置日志文件大小，可以有效控制日志文件对磁盘的占用量。例如：</p><p><img src="/2019/01/18/记录docker-安装与调优/1.png" alt="image-20180910172158993"></p><p>5、开启<code>WARNING: No swap limit support，WARNING: No memory limit support</code>支持</p><p>对于Ubuntu\Debian系统，执行<code>docker info</code>命令时能看到警告<code>WARNING: No swap limit support或者WARNING: No memory limit support</code>。因为Ubuntu\Debian系统默认关闭了<code>swap account或者</code>功能，这样会导致设置容器内存或者swap资源限制不生效，<a href="https://www.cnrancher.com/docs/rancher/v2.x/cn/installation/basic-environment-configuration/#3-ubuntu%E7%B3%BB%E7%BB%9F-docker-info%E6%8F%90%E7%A4%BAwarning-no-swap-limit-support" target="_blank" rel="noopener">解决方法</a>。</p><h3 id="最终命令"><a href="#最终命令" class="headerlink" title="最终命令"></a>最终命令</h3><p>输入如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/docker/daemon.json</span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">    <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span>,</span><br><span class="line">    <span class="string">"max-file"</span>: <span class="string">"3"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"max-concurrent-downloads"</span>: 10,</span><br><span class="line">    <span class="string">"max-concurrent-uploads"</span>: 10,</span><br><span class="line">    <span class="string">"registry-mirrors"</span>: [<span class="string">"https://7bezldxe.mirror.aliyuncs.com"</span>],</span><br><span class="line">    <span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">    <span class="string">"storage-opts"</span>: [</span><br><span class="line">    <span class="string">"overlay2.override_kernel_check=true"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="完"><a href="#完" class="headerlink" title="完"></a>完</h1><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.docker.org.cn/" target="_blank" rel="noopener">http://www.docker.org.cn/</a></p><p><a href="https://www.cnrancher.com/docs/rancher/v2.x/cn/overview/quick-start-guide/" target="_blank" rel="noopener">https://www.cnrancher.com/docs/rancher/v2.x/cn/overview/quick-start-guide/</a></p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>全片结束，觉得我写的不错？想要了解更多精彩新姿势？赶快打开我的👉个人<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">博客</a> 👈吧！</p><p>谢谢你那么可爱，还一直关注着我~❤😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;k8s是容器编排系统，需要docker的支持，今天分享一波docker的安装与调优过程。&lt;/p&gt;
&lt;p&gt;不了解docker的童鞋可以参考&lt;a href=&quot;https://www.cnblogs.com/SzeCheng/p/6822905.html&quot; target=&quot;_bl
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://tengshe789.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="k8s" scheme="https://tengshe789.github.io/tags/k8s/"/>
    
      <category term="软件教学" scheme="https://tengshe789.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%95%99%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>记录一次Ubuntu的连接</title>
    <link href="https://tengshe789.github.io/2019/01/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Ubuntu%E7%9A%84%E8%BF%9E%E6%8E%A5/"/>
    <id>https://tengshe789.github.io/2019/01/18/记录一次Ubuntu的连接/</id>
    <published>2019-01-18T01:29:46.000Z</published>
    <updated>2019-11-20T13:39:41.566Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司的spring cloud 云平台即将构造完成，转而要进入部署与建设平台的过程。故准备研究一下kubernetes，可是最近手头特别紧，我部门又没有独立的云服务器，而且网速很慢没法下载centos镜像，故准备安装虚拟机，使用我从未用过的Ubuntu来解决问题。这就有了这次文章的主题。</p><p>想要解锁更多新姿势？请访问我的个人博客<a href="https://blog.tengshe789.tech/（😘" target="_blank" rel="noopener">https://blog.tengshe789.tech/（😘</a></p><h3 id="Ubuntu开机第一次设置"><a href="#Ubuntu开机第一次设置" class="headerlink" title="Ubuntu开机第一次设置"></a>Ubuntu开机第一次设置</h3><p>我是用的是Ubuntu desktop x64版，不是服务器版，带有图形化界面。装系统，开机，点击左上角设置,使用<code>crtl+f</code>快捷键组合，分别搜索<code>lock</code>,<code>power save</code>,将锁屏和省电全部关闭。结束。</p><h3 id="SSH连接"><a href="#SSH连接" class="headerlink" title="SSH连接"></a>SSH连接</h3><p>默认Ubuntu是不能使用ssh连接的，需要在系统内安装和配置ssh。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>打开终端，输入<code>sudo apt-get update</code>来更新源列表。</p><p>成功后，输入<code>sudo apt-get install openssh-server</code>根据提示来安装ssh服务。</p><p>接下来，输入<code>sudo apt install net-tools</code>根据提示来安装网络工具。</p><p>最后，输入<code>sudo apt-get install vim-gtk</code>来安装vim工具（vim大法好！）</p><p>结束。</p><h4 id="设置ssh"><a href="#设置ssh" class="headerlink" title="设置ssh"></a>设置ssh</h4><h5 id="查看ssh服务是否启动"><a href="#查看ssh服务是否启动" class="headerlink" title="查看ssh服务是否启动"></a>查看ssh服务是否启动</h5><p>输入<code>sudo ps -e |grep ssh</code>，结果如下</p><p><img src="/2019/01/18/记录一次Ubuntu的连接/1.jpg" alt="查看ssh服务是否启动"></p><p>如果有sshd进程，则说明ssh服务已经启动，如果没有启动，输入<code>sudo service ssh start</code>，ssh服务就会启动。</p><h5 id="使用gedit修改配置文件"><a href="#使用gedit修改配置文件" class="headerlink" title="使用gedit修改配置文件"></a>使用gedit修改配置文件</h5><p>输入<code>sudo gedit /etc/ssh/sshd_config</code>，把配置文件中的”PermitRootLogin without-password”加一个”#”号,把它注释掉，再增加一句”PermitRootLogin yes”，修改成功。</p><p><img src="/2019/01/18/记录一次Ubuntu的连接/2.jpg" alt="查看ssh服务是否启动"></p><h5 id="查找IP地址"><a href="#查找IP地址" class="headerlink" title="查找IP地址"></a>查找IP地址</h5><p>输入<code>ifconfig</code>，根据ip配置到ssh连接工具就好。</p><h3 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a>完成！</h3><p>结束 <br>此片完了~ 想要了解更多精彩新姿势？请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近公司的spring cloud 云平台即将构造完成，转而要进入部署与建设平台的过程。故准备研究一下kubernetes，可是最近手头特别紧，我部门又没有独立的云服务器，而且网速很慢没法下载centos镜像，故准备安装虚拟机，使用我从未用过的Ubuntu来解决问题。这就有
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://tengshe789.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="软件教学" scheme="https://tengshe789.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%95%99%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>将我的java程序组件部署到maven中央仓库</title>
    <link href="https://tengshe789.github.io/2019/01/17/%E5%B0%86%E6%88%91%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%BB%84%E4%BB%B6%E6%B3%A8%E5%86%8C%E5%88%B0maven/"/>
    <id>https://tengshe789.github.io/2019/01/17/将我的程序组件注册到maven/</id>
    <published>2019-01-17T01:09:45.000Z</published>
    <updated>2019-11-20T13:39:41.264Z</updated>
    
    <content type="html"><![CDATA[<p>前一阵子工作有点忙，也比较焦虑。没有时间写一些博客文章，今天来补充一下。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a>。😏</p><h2 id="做点什么？"><a href="#做点什么？" class="headerlink" title="做点什么？"></a>做点什么？</h2><p>面临毕业，不想一直咸鱼，可是又什么都不会，做点什么的？思来想去，也是为了给自己少一点麻烦，就决定把自己半年前那个<a href="https://github.com/tengshe789/-miaosha" target="_blank" rel="noopener">秒杀商城项目</a>重构一下，放到云平台上。不过既然都是云平台了，肯定会有各种支撑服务，就譬如说缓存中心，日志中心，监控中心，权限管理中心等等，但是这些功能，在别的项目中也可以用到，这就带来一些不必要的麻烦。</p><p>这时候，就推荐使用maven来统一管理了。</p><p>前些日子，趁着毕业生创业指导开课的时候，我把缓存中心敲完了。然后将他部署到maven中央仓库。下面我就来分享一下部署到中央仓库的那些坑🕳。</p><h2 id="部署到中央仓库"><a href="#部署到中央仓库" class="headerlink" title="部署到中央仓库"></a>部署到中央仓库</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li><p>打开浏览器，<a href="https://issues.sonatype.org/" target="_blank" rel="noopener"> sonatype 官网</a>，这个地址，注册一个账号，并且记住用户名密码</p></li><li><p>下载好<code>git</code>客户端</p></li></ul><h3 id="提交issue"><a href="#提交issue" class="headerlink" title="提交issue"></a>提交issue</h3><p>在 <a href="https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134" target="_blank" rel="noopener">https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134</a> 中新建一个“Project ticket”。</p><p>下面引以下<a href="https://home.cnblogs.com/u/aimqqroad-13/" target="_blank" rel="noopener">Spiderman.L</a>大佬博客上的图片（太懒了不想重新填一遍），照着这个步骤来。</p><p><img src="/2019/01/17/将我的程序组件注册到maven/3.png" alt="怎么填"></p><p>　　点击<code>Create</code>之后，你就会进入一个 <code>jira</code> 页面(sonatype 使用jira 来追踪每一个项目进度)，与此同时你注册时使用的邮箱中也会收到一封邮件提示你，任务创建成功,正在等待处理。</p><h3 id="等待时间"><a href="#等待时间" class="headerlink" title="等待时间"></a>等待时间</h3><p>创建完毕后就等待一段时间，刷新页面。当状态变为<code>“resolved”</code>，然后你就可以使用<code>maven</code>上传项目了。或者就等着接收 <code>sonatype</code>的反馈邮件，确认已经为你创建好了新项目</p><p><img src="/2019/01/17/将我的程序组件注册到maven/4.png" alt="等待时间"></p><h3 id="回复commit"><a href="#回复commit" class="headerlink" title="回复commit"></a>回复commit</h3><p>发布完后，可能几分钟，也可能几小时，会有工作人员问你是否有Group Id对应的那个域名的所有权，如果有的话就回复有，并且按照他说的三个方法来（下图为参考语句），然后就会得到Configuration has been prepared的回复，这个时候就可以准备发布了。</p><p><img src="/2019/01/17/将我的程序组件注册到maven/1.png" alt="1"></p><p>我用的是第一个方法，因为我的域名是从阿里云上买的，我在阿里云平台的域名管理中心处，添加了一个TXT记录到这个<code>ticket</code>上，这样他会自己检测。</p><p>当然了，如果自己没有域名的话可以挂在开源的域名下面，例如com.github.tengshe789，这样一样可以发布。</p><p>最差的方法，就是用个人域名邮箱发送给他邮件。</p><h3 id="获得部署权限"><a href="#获得部署权限" class="headerlink" title="获得部署权限"></a>获得部署权限</h3><p>做完上一步，他会在美国工作日时间里回复部署的相关信息，如图：</p><p><img src="/2019/01/17/将我的程序组件注册到maven/2.png" alt="2"></p><p>当我们的<code>ticket</code>最终状态变为<code>Resolved</code>的时候，表示我们有权限可以上传东西了。</p><h3 id="maven本地设置"><a href="#maven本地设置" class="headerlink" title="maven本地设置"></a>maven本地设置</h3><p>找到你安装maven的目录下面，打开<code>maven目录\conf\settings.xml</code>文件。在<code>servers</code>标签中填写如下信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>tengshe789（我的用户名）<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>（我的sonatype密码）<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-nexus-staging<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>tengshe789（我的用户名）<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>（我的sonatype密码）<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="java程序pom-XML设置"><a href="#java程序pom-XML设置" class="headerlink" title="java程序pom.XML设置"></a>java程序pom.XML设置</h3><p>按照下面代码添加。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:git:https://github.com/tengshe789/miaocache.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span> <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>scm:git:https://github.com/tengshe789/miaocache.git<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/tengshe789/miaocache<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">tag</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些地址填的是你github上的地址。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个id与我上一步在setting.xml中设置的id一致的  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>OSS Snapshots Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里的url就是Issue中回复的snapshots 的repo地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 这个id与我上一步在setting.xml中设置的id一致的  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-nexus-staging<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>OSS Staging Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里的url就是Issue中回复的staging 的repo地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些地址直接复制上就行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.build.finalName&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--阿里云主仓库，代理了maven central和jcenter仓库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--阿里云代理Spring 官方仓库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--阿里云代理Spring 插件仓库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-plugin<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-plugin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring-plugin<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- Source --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- Javadoc --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>OSS Snapshots Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-nexus-staging<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>OSS Staging Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 这里的url就是Issue中回复的staging 的repo地址--&gt;</span> <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面地址是通用的插件和profiles配置，不能少，按照需求来设置。有能力的同学自己研究一下。</p><h3 id="使用gpg生成密钥"><a href="#使用gpg生成密钥" class="headerlink" title="使用gpg生成密钥"></a>使用gpg生成密钥</h3><p>打开git窗口，输入<code>gpg --gen-key</code>。这时候会出现一大片英文，看不懂的同学不要紧，跟着我做就行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --list-keys</span><br></pre></td></tr></table></figure><p>这个命令是查看自己key的编号。找到 pub对应的那个编号，例如<code>pub 2048R/8C473F5C</code><br>上传到key验证库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys 8C473F5C</span><br></pre></td></tr></table></figure><h3 id="maven命令"><a href="#maven命令" class="headerlink" title="maven命令"></a>maven命令</h3><p>打开idea，找到下面的终端，输入maven命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean deploy -P sonatype-oss-release -Darguments="gpg.passphrase=设置gpg设置密钥时候输入的Passphrase"</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/aimqqroad-13/p/9645776.html" target="_blank" rel="noopener">https://www.cnblogs.com/aimqqroad-13/p/9645776.html</a></p><p><a href="https://blog.csdn.net/sun5769675/article/details/78519948" target="_blank" rel="noopener">https://blog.csdn.net/sun5769675/article/details/78519948</a></p><p><a href="https://www.jianshu.com/p/bb930e9ad5f4" target="_blank" rel="noopener">https://www.jianshu.com/p/bb930e9ad5f4</a></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>【版权申明】此片为原创内容，使用 <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/" target="_blank" rel="noopener">CC BY-NC-SA 3.0</a>授权条款，请遵守对应的义务，即被授权人有义务在所有副本中都必须包含版权声明。谢谢合作~</p><p>想要解锁更多新姿势？请访问我的个人博客<a href="https://blog.tengshe789.tech/（😘" target="_blank" rel="noopener">https://blog.tengshe789.tech/（😘</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前一阵子工作有点忙，也比较焦虑。没有时间写一些博客文章，今天来补充一下。&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.tengshe789.tech/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的博客&lt;/a&gt;。
      
    
    </summary>
    
    
      <category term="分享" scheme="https://tengshe789.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>新年快乐</title>
    <link href="https://tengshe789.github.io/2019/01/01/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    <id>https://tengshe789.github.io/2019/01/01/新年快乐/</id>
    <published>2019-01-01T02:19:46.000Z</published>
    <updated>2019-11-20T13:39:41.538Z</updated>
    
    <content type="html"><![CDATA[<p>最是一年春好处,绝胜烟柳满皇都。</p><p>转眼间元旦到了，首先呢，祝福所有看到这篇文章的你，元旦快乐，生活美满，心想事成。</p><p>昨夜刚刚从青岛回到济南的学校宿舍，在学校吃了一顿食堂，躺在宿舍里看平成最后的红白歌会。意外的发现一个超漂亮很有仙气的小姐姐，西野七濑 ! 我觉得我的心瞬间就被好几团大大的棉花填充了，冬天凛冽的寒风也丝毫带不足我心的一丝热量， 如图</p><p><img src="https://ww2.sinaimg.cn/large/005Bj70qgy1fyq9puy4c6j30wm0mau0x.jpg" alt="西野七濑1"></p><p><img src="https://ww4.sinaimg.cn/large/68fea95bgy1fyq86yqxbuj21120kuh8u.jpg" alt="西野七濑2"></p><p><img src="https://ww4.sinaimg.cn/large/68fea95bgy1fyq86ysn5fj21120ku4jm.jpg" alt="西野七濑3"></p><p>有没有？是不是仙气十足。</p><p>可惜七濑酱已经宣布退役了，这是最后一场在乃木坂46的表演。知道这个消息的我也是比较惋惜，在推特和ins上用日文鼓励了小姐姐以后，安然入睡~</p><p>一觉醒来，早上9点。迷糊中拿起手机，抢了几个凌晨群友发的红包，抖擞抖擞精神。接下来的任务有很多，我一一列了个清单：</p><ul><li>抽空看玉洁</li></ul><ul><li>元旦期间就要上交毕业论文的开题报告，可我因为玩彩虹六号到现在还没思考写什么。。老师说随便做就行，那我又纠结起来了。用java的微服务秒杀商城？还是用python做房地产价格走势爬虫中心？第一种花时间多但还算熟练，第二张时间成本多一些。</li><li>明天要去北京出差</li><li>过年回家买火车票。</li><li>因为没有靠谱的工作所有还在准备工作面试。阿里巴巴的内推到现在还没给我发面试结果，😫继续准备</li></ul><p>就这样把~朝着自己心中不断努力！新的一年要加油！–9012</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最是一年春好处,绝胜烟柳满皇都。&lt;/p&gt;
&lt;p&gt;转眼间元旦到了，首先呢，祝福所有看到这篇文章的你，元旦快乐，生活美满，心想事成。&lt;/p&gt;
&lt;p&gt;昨夜刚刚从青岛回到济南的学校宿舍，在学校吃了一顿食堂，躺在宿舍里看平成最后的红白歌会。意外的发现一个超漂亮很有仙气的小姐姐，西野七
      
    
    </summary>
    
    
      <category term="初" scheme="https://tengshe789.github.io/tags/%E5%88%9D/"/>
    
  </entry>
  
  <entry>
    <title>用单例模式来说线程安全</title>
    <link href="https://tengshe789.github.io/2018/12/13/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%8E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    <id>https://tengshe789.github.io/2018/12/13/单例模式与线程安全/</id>
    <published>2018-12-13T06:55:23.000Z</published>
    <updated>2019-11-20T13:39:41.236Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇<a href="https://blog.tengshe789.tech/2018/09/30/java%E4%B8%8E%E5%86%85%E5%AD%98/" target="_blank" rel="noopener">博文</a>讲了有关java和内存那些事情，今天来延申一下,结合设计模式的单例模式，来说说线程安全那些事情。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">https://blog.tengshe789.tech/</a></p><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式大家应该都不陌生，为了保证系统中，应用的类一个类只有一个实例。传统课本上单例模式分两种，一种饿汉式，一种懒汉式。对应的代码如下：</p><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式</span></span><br><span class="line"><span class="comment"> * 单例实例在第一次使用时进行创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample1 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonExample1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉式的实例是在第一次使用时创建的，相应的静态工厂办法会先判断有没有实例，没有实例在进行创建。</p><p>然而这种创建方法时<strong>线程不安全</strong>的，如果有两个线程，同一时刻拿到单例对象，要去静态工厂办法访问，由于工厂办法没有锁，那么很有可能这两个线程最终会拿到两个实例。</p><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式</span></span><br><span class="line"><span class="comment"> * 单例实例在类装载时进行创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample2 instance = <span class="keyword">new</span> SingletonExample2();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相对于上面那种懒汉式，饿汉式是<strong>线程安全</strong>的。直接将单例对象用static修饰，把实例对象放到堆内存中，保证了多个线程在访问时的可见性。但是缺点也是很大的，正是由于把实例对象放到堆内存中，这样应用一加载就会看到对应实例，极大浪费内存。</p><h3 id="尝试用synchronized改造懒汉式"><a href="#尝试用synchronized改造懒汉式" class="headerlink" title="尝试用synchronized改造懒汉式"></a>尝试用synchronized改造懒汉式</h3><p>插一句嘴，<code>synchronized</code>底层原理，主要是两个指令实现的，分别是<code>monitorenter</code>和<code>monitorexit</code>指令，下面是我从网络上找到的对应指令的解释：</p><blockquote><p><code>monitorenter</code>：</p><p>每个对象有一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：</p><p>1、如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者。</p><p>2、如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1.</p><p>3.如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权。</p><p><code>monitorexit</code>：</p><p>执行monitorexit的线程必须是objectref所对应的monitor的所有者。</p><p>指令执行时，monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者。其他被这个monitor阻塞的线程可以尝试去获取这个 monitor 的所有权。 </p><p>　　通过这两段描述，我们应该能很清楚的看出Synchronized的实现原理，Synchronized的语义底层是通过一个monitor的对象来完成，其实wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。</p></blockquote><p>毫无疑问，懒汉式的性能是出色的，我们为什么不在懒汉式的基础上使用<code>synchronized</code>修饰呢？</p><p>下面是相关代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式</span></span><br><span class="line"><span class="comment"> * 单例实例在第一次使用时进行创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample3 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonExample3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonExample3();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加了<code>synchronized</code>修饰后的工厂方法，意味着在同一时间内只允许一个线程访问。这毫无疑问是<strong>线程安全</strong>的。但是这同时是不被推荐的，为什么呢？和上面使用<code>static</code>修饰的懒汉模式不同，这个工厂方法，在同一时间段内只允许一个线程访问，极大的限制cpu资源，性能极其差！</p><h3 id="双重同步锁单例模式"><a href="#双重同步锁单例模式" class="headerlink" title="双重同步锁单例模式"></a>双重同步锁单例模式</h3><p>那么我们吸取上面的教训，可不可以在使用<code>synchronized</code>修饰基础上在加以改进呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式 -》 双重同步锁单例模式</span></span><br><span class="line"><span class="comment"> * 单例实例在第一次使用时进行创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample4 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123; <span class="comment">// 双重检测机制        // B</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonExample4.class) &#123; <span class="comment">// 同步锁</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonExample4(); <span class="comment">// A - 3</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多人会认为这种办法是最佳的解决办法了，其实不是，这也是<strong>线程不安全</strong>的。怎么说呢？</p><p>当线程进入同步锁，走到<code>instance = new SingletonExample4();</code>时，JVM会进行如下操作：</p><ol><li>memory = allocate() 分配对象的内存空间</li><li>ctorInstance() 初始化对象</li><li>instance = memory 设置instance指向刚分配的内存</li></ol><p>单线程情况下肯定没问题，但是在多线程情况下，JVM和CPU的优化中可能会执行指令重排。上面的第二步和第三步中，由于没有前后必然关系，cpu可能随时调换第二步和第三步的执行顺序。也就是会发生132这种顺序。</p><h3 id="单例对象-volatile-双重检测机制"><a href="#单例对象-volatile-双重检测机制" class="headerlink" title="单例对象 volatile + 双重检测机制"></a>单例对象 volatile + 双重检测机制</h3><p>吸取教训继续改进！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式 -》 双重同步锁单例模式</span></span><br><span class="line"><span class="comment"> * 单例实例在第一次使用时进行创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample5</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、memory = allocate() 分配对象的内存空间</span></span><br><span class="line">    <span class="comment">// 2、ctorInstance() 初始化对象</span></span><br><span class="line">    <span class="comment">// 3、instance = memory 设置instance指向刚分配的内存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例对象 volatile + 双重检测机制 -&gt; 禁止指令重排</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonExample5 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123; <span class="comment">// 双重检测机制        // B</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonExample5.class) &#123; <span class="comment">// 同步锁</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonExample5(); <span class="comment">// A - 3</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>volatile</code>的相关功能请看我<a href="https://blog.tengshe789.tech/2018/09/30/java%E4%B8%8E%E5%86%85%E5%AD%98/" target="_blank" rel="noopener">之前的博客</a>。到这里，懒汉模式改进就完成了。</p><h3 id="枚举模式-》最安全"><a href="#枚举模式-》最安全" class="headerlink" title="枚举模式-》最安全"></a>枚举模式-》最安全</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举模式：最安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample6</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> SingletonExample6 singleton;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// JVM保证这个方法绝对只调用一次</span></span><br><span class="line">        Singleton() &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> SingletonExample6();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SingletonExample6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最推荐的是使用枚举类实现单例模式，这是<strong>线程安全</strong>的。JVM会保证枚举类中的构造方法只调用一次，因此使用枚举会保证只实例化一次。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/paddix/p/5367116.html" target="_blank" rel="noopener">Java并发编程：Synchronized及其实现原理</a></p><p>全片结束，觉得我写的不错？想要了解更多精彩新姿势？赶快打开我的👉个人<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">博客</a> 👈吧！</p><p>谢谢你那么可爱，还一直关注着我~❤😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇&lt;a href=&quot;https://blog.tengshe789.tech/2018/09/30/java%E4%B8%8E%E5%86%85%E5%AD%98/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博文&lt;/a&gt;讲了有关java和内存那些事
      
    
    </summary>
    
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
      <category term="并发" scheme="https://tengshe789.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="设计模式" scheme="https://tengshe789.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>分享一下我常用的高并发测试工具</title>
    <link href="https://tengshe789.github.io/2018/12/13/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%8B%E6%88%91%E5%B8%B8%E7%94%A8%E7%9A%84%E9%AB%98%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    <id>https://tengshe789.github.io/2018/12/13/分享一下我常用的高并发测试工具/</id>
    <published>2018-12-13T01:39:59.000Z</published>
    <updated>2019-11-20T13:39:41.198Z</updated>
    
    <content type="html"><![CDATA[<p>我半年前这个学习项目👉 <a href="https://github.com/tengshe789/-miaosha" target="_blank" rel="noopener">https://github.com/tengshe789/-miaosha</a> 👈又有人点赞了23333，看来技术还没死。那么今天分享一下这个秒杀系统使用的测试工具~</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h2 id="Postman请求模拟工具"><a href="#Postman请求模拟工具" class="headerlink" title="Postman请求模拟工具"></a>Postman请求模拟工具</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>日后更新</p><h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><p><img src="/2018/12/13/分享一下我常用的高并发测试工具/1.png" alt="Postman"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>界面右侧有个蓝色的巨大的button，上面写着<code>send</code>，旁边有各种参数。想测试的话，选择请求类型，请求数据等等，点击<code>send</code>就好。</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>最右上角齿轮形状的图标，添加你需要的键和值。</p><p><img src="/2018/12/13/分享一下我常用的高并发测试工具/2.png" alt="Postman"></p><p>访问的时候直接使用<code>/接口</code>就行</p><h4 id="测试记录"><a href="#测试记录" class="headerlink" title="测试记录"></a>测试记录</h4><p>一清二楚</p><p><img src="/2018/12/13/分享一下我常用的高并发测试工具/3.png" alt="Postman"></p><h4 id="新增collection"><a href="#新增collection" class="headerlink" title="新增collection"></a>新增collection</h4><p>history旁边有collection，可以使用并发测试。</p><p>新建如图：</p><p><img src="/2018/12/13/分享一下我常用的高并发测试工具/4.png" alt="Postman"></p><p><code>Iterations</code>选择并发次数，<code>delay</code>选择延迟时间。</p><p><img src="/2018/12/13/分享一下我常用的高并发测试工具/5.png" alt="Postman"></p><p>结果我就不贴图了，大伙自己探索吧。</p><h3 id="apache-bench"><a href="#apache-bench" class="headerlink" title="apache bench"></a>apache bench</h3><p>ApacheBench 是 Apache 服务器自带的一个web压力测试工具，简称ab。ab又是一个命令行工具，对发起负载的本机要求很低，根据ab命令可以创建很多的并发访问线程，模拟多个访问者同时对某一URL地址进行访问，因此可以用来测试目标服务器的负载压力。总的来说ab工具小巧简单，上手学习较快，可以提供需要的基本性能指标，但是没有图形化结果，不能监控。</p><h4 id="下载安装-1"><a href="#下载安装-1" class="headerlink" title="下载安装"></a>下载安装</h4><p><a href="https://www.cnblogs.com/Ryana/p/6279232.html" target="_blank" rel="noopener">https://www.cnblogs.com/Ryana/p/6279232.html</a></p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>说说命令含义</p><p>最开头的命令<code>ab</code>是apache bench的缩写，使用他即意味着使用这个软件</p><p><code>-n</code>就是new了。</p><p>参数<code>1000</code>是测试请求次数</p><p><code>-c</code>就是Concurrency并发，后面的参数50，是同时允许的请求数</p><p><img src="/2018/12/13/分享一下我常用的高并发测试工具/6.png" alt="Postman"></p><p>结果如下图👇</p><p>结果依次的含义为：</p><ul><li><p>并发量50</p></li><li><p>整个测试所用时间0.466</p></li><li><p>完成请求数1000</p></li><li><p>失败请求数目0</p></li><li><p>所有请求响应数据的长度总和（包括所有http头部和正文数据的长度，不包括http请求数据的长度）136000B</p></li><li><p>HTML正文数据总长度4000B</p></li><li><p>吞吐率(TPS)2144.47</p></li><li><p>用户平均请求等待时间23.316ms</p></li><li><p>服务器平均请求等待时间0.466</p></li><li><p>单位时间内的数据长度284.81</p><p><img src="/2018/12/13/分享一下我常用的高并发测试工具/7.png" alt="Postman"></p></li></ul><h2 id="Apache-JMeter"><a href="#Apache-JMeter" class="headerlink" title="Apache JMeter"></a>Apache JMeter</h2><p>Apache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被<br>设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外，JMeter能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言。（复制的百度百科的233🙃）</p><h3 id="下载安装-2"><a href="#下载安装-2" class="headerlink" title="下载安装"></a>下载安装</h3><p><a href="https://jmeter.apache.org/" target="_blank" rel="noopener">https://jmeter.apache.org/</a></p><h3 id="UI-1"><a href="#UI-1" class="headerlink" title="UI"></a>UI</h3><p><img src="/2018/12/13/分享一下我常用的高并发测试工具/8.png" alt="Postman"></p><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><h4 id="新建测试"><a href="#新建测试" class="headerlink" title="新建测试"></a>新建测试</h4><p>如图，在右侧新建线程组，自己取个名。看右侧。</p><p>线程属性的线程数是代表多少用户访问这个系统。这里表示有50个用户访问系统。</p><p>第二行R-U P，是虚拟用户增长时长。一般的话时间设置成最合乎常规的，用户数量增长最快的时间段。</p><p>第三行，默认为一，意思是一个虚拟用户默认运行完一边后就停止了。旁边的框框，意味着测试运行起来就永远不停了</p><p>  <img src="/2018/12/13/分享一下我常用的高并发测试工具/9.png" alt="Postman"></p><h4 id="新建http请求"><a href="#新建http请求" class="headerlink" title="新建http请求"></a>新建http请求</h4><p>回到左边侧栏，右键线程组，新建HTTP请求.如图</p><p>  <img src="/2018/12/13/分享一下我常用的高并发测试工具/10.png" alt="Postman"></p><h4 id="新建监听"><a href="#新建监听" class="headerlink" title="新建监听"></a>新建监听</h4><p>监听就是以图表形式表现出来测试的结果。</p><p><img src="/2018/12/13/分享一下我常用的高并发测试工具/11.png" alt="Postman"></p><h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2><p>全片结束，觉得我写的不错？想要了解更多精彩新姿势？赶快打开我的👉个人<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">博客</a> 👈吧！</p><p>谢谢你那么可爱，还一直关注着我~❤😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我半年前这个学习项目👉 &lt;a href=&quot;https://github.com/tengshe789/-miaosha&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/tengshe789/-miaosha&lt;/a&gt; �
      
    
    </summary>
    
    
      <category term="并发" scheme="https://tengshe789.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="分享" scheme="https://tengshe789.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="软件教学" scheme="https://tengshe789.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%95%99%E5%AD%A6/"/>
    
      <category term="窍门" scheme="https://tengshe789.github.io/tags/%E7%AA%8D%E9%97%A8/"/>
    
      <category term="测试" scheme="https://tengshe789.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>看Pig开源项目的云踩坑记</title>
    <link href="https://tengshe789.github.io/2018/12/12/%E5%86%B7%E5%86%B7Pig%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    <id>https://tengshe789.github.io/2018/12/12/冷冷Pig开源项目学习/</id>
    <published>2018-12-12T02:25:52.000Z</published>
    <updated>2019-11-20T13:39:41.181Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到一个有趣的开源项目pig，主要的技术点在认证授权中心，spring security oauth，zuul网关实现，Elastic-Job定时任务，趁着刚刚入门微服务，赶快写个博客分析一下。此篇文章主要用于个人备忘。如果有不对，请批评。😭</p><p>由于每个模块篇幅较长，且部分内容和<a href="https://blog.tengshe789.tech/2018/12/02/%E6%84%9F%E6%80%A7%E8%AE%A4%E8%AF%86jwt/#more" target="_blank" rel="noopener">前文</a>有重叠，干货和图片较少，阅读时使用旁边的导航功能体验较佳。😉</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">https://blog.tengshe789.tech/</a></p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本篇文章是对基于<code>spring boot</code>1.5的<code>pig 1</code>版本做的分析，不是收费的<code>pigx 2</code>版本。</p><h3 id="开源项目地址"><a href="#开源项目地址" class="headerlink" title="开源项目地址"></a>开源项目地址</h3><p><a href="https://gitee.com/log4j/pig" target="_blank" rel="noopener">https://gitee.com/log4j/pig</a></p><p>配置中心：<a href="https://gitee.com/cqzqxq_lxh/pig-config" target="_blank" rel="noopener">https://gitee.com/cqzqxq_lxh/pig-config</a></p><h4 id="冷冷官方地址"><a href="#冷冷官方地址" class="headerlink" title="冷冷官方地址"></a>冷冷官方地址</h4><p><a href="https://pig4cloud.com/zh-cn/index.html" target="_blank" rel="noopener">https://pig4cloud.com/zh-cn/index.html</a></p><h4 id="体验地址"><a href="#体验地址" class="headerlink" title="体验地址"></a>体验地址</h4><p><a href="http://pigx.pig4cloud.com/#/wel/index" target="_blank" rel="noopener">http://pigx.pig4cloud.com/#/wel/index</a></p><h4 id="项目启动顺序"><a href="#项目启动顺序" class="headerlink" title="项目启动顺序"></a>项目启动顺序</h4><p>请确保启动顺序（<strong>要先启动认证中心，再启动网关</strong>）</p><ol><li>eureka</li><li>config</li><li>auth</li><li>gateway</li><li>upms</li></ol><h1 id="认证中心"><a href="#认证中心" class="headerlink" title="认证中心"></a>认证中心</h1><p>老规矩，自上到下看代码，先从接口层看起</p><h2 id="请求rest接口"><a href="#请求rest接口" class="headerlink" title="请求rest接口"></a>请求rest接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/authentication"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"consumerTokenServices"</span>)</span><br><span class="line">    <span class="keyword">private</span> ConsumerTokenServices consumerTokenServices;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ModelAndView</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/require"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">require</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"ftl/login"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户信息校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication 信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">user</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authentication.getPrincipal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除Redis中 accesstoken refreshtoken</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accesstoken  accesstoken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true/false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/removeToken"</span>)</span><br><span class="line">    <span class="meta">@CacheEvict</span>(value = SecurityConstants.TOKEN_USER_DETAIL, key = <span class="string">"#accesstoken"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R&lt;Boolean&gt; <span class="title">removeToken</span><span class="params">(String accesstoken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;( consumerTokenServices.revokeToken(accesstoken));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口层有三个接口路径，第一个应该没用，剩下两个是校验用户信息的<code>/user</code>和清除Redis中 accesstoken 与refreshtoken的<code>/removeToken</code></p><h2 id="框架配置"><a href="#框架配置" class="headerlink" title="框架配置"></a>框架配置</h2><h3 id="框架配置-1"><a href="#框架配置-1" class="headerlink" title="框架配置"></a>框架配置</h3><p>下面这段代码时配置各种<code>spring security</code>配置，包括登陆界面url是<code>&quot;/authentication/require&quot;</code>啦。如果不使用默认的弹出框而使用自己的页面，表单的action是<code>&quot;/authentication/form&quot;</code>啦。使用自己定义的过滤规则啦。禁用<code>csrf</code>啦（自行搜索csrf，jwt验证不需要防跨域，但是需要使用xss过滤）。使用手机登陆配置啦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order</span>(SecurityProperties.ACCESS_OVERRIDE_ORDER - <span class="number">1</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigSecurityConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FilterIgnorePropertiesConfig filterIgnorePropertiesConfig;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MobileSecurityConfigurer mobileSecurityConfigurer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExpressionUrlAuthorizationConfigurer&lt;HttpSecurity&gt;.ExpressionInterceptUrlRegistry registry =</span><br><span class="line">                http.formLogin().loginPage(<span class="string">"/authentication/require"</span>)</span><br><span class="line">                        .loginProcessingUrl(<span class="string">"/authentication/form"</span>)</span><br><span class="line">                        .and()</span><br><span class="line">                        .authorizeRequests();</span><br><span class="line">        filterIgnorePropertiesConfig.getUrls().forEach(url -&gt; registry.antMatchers(url).permitAll());</span><br><span class="line">        registry.anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">        http.apply(mobileSecurityConfigurer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="校验用户信息"><a href="#校验用户信息" class="headerlink" title="校验用户信息"></a>校验用户信息</h2><p>读配置类和接口层，我们知道了，总的逻辑大概就是用户登陆了以后，使用spring security框架的认证来获取权限。</p><p>我们一步一步看，边猜想边来。接口处有<code>&quot;ftl/login&quot;</code>，这大概就是使用freemarker模板，login信息携带的<code>token</code>会传到用户信息校验url<code>&quot;/user&quot;</code>上，可作者直接使用<code>Authentication</code>返回一个<code>getPrincipal()</code>，就没了，根本没看见自定义的代码，这是怎么回事呢？</p><p>原来，作者使用<code>spring security</code>框架，使用框架来实现校验信息。</p><p>打卡<code>config</code>包下的<code>PigAuthorizationConfig</code>，我们来一探究竟。</p><h3 id="使用spring-security-实现-授权服务器"><a href="#使用spring-security-实现-授权服务器" class="headerlink" title="使用spring security 实现 授权服务器"></a>使用spring security 实现 授权服务器</h3><p>注明，阅读此处模块需要OAUTH基础，<a href="https://blog.tengshe789.tech/2018/12/02/%E6%84%9F%E6%80%A7%E8%AE%A4%E8%AF%86jwt/#more" target="_blank" rel="noopener">https://blog.tengshe789.tech/2018/12/02/%E6%84%9F%E6%80%A7%E8%AE%A4%E8%AF%86jwt/#more</a></p><p>这里简单提一下，<code>spring security oauth</code>里有两个概念，授权服务器和资源服务器。</p><p>授权服务器是根据授权许可给访问的客户端发放<code>access token</code>令牌的，提供认证、授权服务；</p><p>资源服务器需要验证这个<code>access token</code>,客户端才能访问对应服务。</p><h4 id="客户详细信息服务配置"><a href="#客户详细信息服务配置" class="headerlink" title="客户详细信息服务配置"></a>客户详细信息服务配置</h4><p><code>ClientDetailsServiceConfigurer</code>(<code>AuthorizationServerConfigurer</code> 的一个回调配置项) 能够使用内存或者JDBC来实现客户端详情服务（ClientDetailsService），<code>Spring Security OAuth2</code>的配置方法是编写<code>@Configuration</code>类继承<code>AuthorizationServerConfigurerAdapter</code>，然后重写<code>void configure(ClientDetailsServiceConfigurer clients)</code>方法</p><p>下面代码主要逻辑是，使用<code>spring security</code>框架封装的简单sql连接器，查询客户端的详细信息👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(` clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       JdbcClientDetailsService clientDetailsService = <span class="keyword">new</span> JdbcClientDetailsService(dataSource);</span><br><span class="line">       clientDetailsService.setSelectClientDetailsSql(SecurityConstants.DEFAULT_SELECT_STATEMENT);</span><br><span class="line">       clientDetailsService.setFindClientDetailsSql(SecurityConstants.DEFAULT_FIND_STATEMENT);</span><br><span class="line">       clients.withClientDetails(clientDetailsService);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>相关的sql语句如下，由于耦合度较大，我将sql声明语句改了一改，方面阅读：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 默认的查询语句</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   String DEFAULT_FIND_STATEMENT = <span class="string">"select "</span> + <span class="string">"client_id, client_secret, resource_ids, scope, "</span></span><br><span class="line">           + <span class="string">"authorized_grant_types, web_server_redirect_uri, authorities, access_token_validity, "</span></span><br><span class="line">           + <span class="string">"refresh_token_validity, additional_information, autoapprove"</span></span><br><span class="line">           + <span class="string">" from sys_oauth_client_details"</span> + <span class="string">" order by client_id"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 按条件client_id 查询</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   String DEFAULT_SELECT_STATEMENT = <span class="string">"select "</span> +<span class="string">"client_id, client_secret, resource_ids, scope, "</span></span><br><span class="line">           + <span class="string">"authorized_grant_types, web_server_redirect_uri, authorities, access_token_validity, "</span></span><br><span class="line">           + <span class="string">"refresh_token_validity, additional_information, autoapprove"</span></span><br><span class="line">           + <span class="string">" from sys_oauth_client_details"</span> + <span class="string">" where client_id = ?"</span>;</span><br></pre></td></tr></table></figure><p>相关数据库信息如下：</p><p><img src="/2018/12/12/冷冷Pig开源项目学习/2.png" alt="服务网关"></p><h4 id="授权服务器端点配置器"><a href="#授权服务器端点配置器" class="headerlink" title="授权服务器端点配置器"></a>授权服务器端点配置器</h4><p><code>endpoints</code>参数是什么？所有获取令牌的请求都将会在Spring MVC controller <code>endpoints</code>中进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//token增强配置</span></span><br><span class="line">        TokenEnhancerChain tokenEnhancerChain = <span class="keyword">new</span> TokenEnhancerChain();</span><br><span class="line">        tokenEnhancerChain.setTokenEnhancers(</span><br><span class="line">                Arrays.asList(tokenEnhancer(), jwtAccessTokenConverter()));</span><br><span class="line"></span><br><span class="line">        endpoints</span><br><span class="line">                .tokenStore(redisTokenStore())</span><br><span class="line">                .tokenEnhancer(tokenEnhancerChain)</span><br><span class="line">                .authenticationManager(authenticationManager)</span><br><span class="line">                .reuseRefreshTokens(<span class="keyword">false</span>)</span><br><span class="line">                .userDetailsService(userDetailsService);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="token增强器（自定义token信息中携带的信息）"><a href="#token增强器（自定义token信息中携带的信息）" class="headerlink" title="token增强器（自定义token信息中携带的信息）"></a>token增强器（自定义token信息中携带的信息）</h5><p>有时候需要额外的信息加到token返回中，这部分也可以自定义，此时我们可以自定义一个<code>TokenEnhancer</code>，来自定义生成token携带的信息。<code>TokenEnhancer</code>接口提供一个 <code>enhance(OAuth2AccessToken var1, OAuth2Authentication var2)</code> 方法，用于对token信息的添加，信息来源于<code>OAuth2Authentication</code>。</p><p>作者将生成的<code>accessToken</code>中，加上了自己的名字，加上了<code>userId</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenEnhancer <span class="title">tokenEnhancer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (accessToken, authentication) -&gt; &#123;</span><br><span class="line">            <span class="keyword">final</span> Map&lt;String, Object&gt; additionalInfo = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">            additionalInfo.put(<span class="string">"license"</span>, SecurityConstants.PIG_LICENSE);</span><br><span class="line">            UserDetailsImpl user = (UserDetailsImpl) authentication.getUserAuthentication().getPrincipal();</span><br><span class="line">            <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">                additionalInfo.put(<span class="string">"userId"</span>, user.getUserId());</span><br><span class="line">            &#125;</span><br><span class="line">            ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(additionalInfo);</span><br><span class="line">            <span class="keyword">return</span> accessToken;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="JWT转换器（自定义token信息中添加的信息）"><a href="#JWT转换器（自定义token信息中添加的信息）" class="headerlink" title="JWT转换器（自定义token信息中添加的信息）"></a>JWT转换器（自定义token信息中添加的信息）</h5><p>JWT中，需要在token中携带额外的信息，这样可以在服务之间共享部分用户信息，spring security默认在JWT的token中加入了user_name，如果我们需要额外的信息，需要自定义这部分内容。</p><p><code>JwtAccessTokenConverter</code>是使用<code>JWT</code>替换默认的Token的转换器，而token令牌默认是有签名的，且资源服务器需要验证这个签名。此处的加密及验签包括两种方式：</p><ul><li><p>对称加密</p></li><li><p>非对称加密（公钥密钥）</p></li></ul><p>对称加密需要授权服务器和资源服务器存储同一key值，而非对称加密可使用密钥加密，暴露公钥给资源服务器验签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigJwtAccessTokenConverter</span> <span class="keyword">extends</span> <span class="title">JwtAccessTokenConverter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, ?&gt; convertAccessToken(OAuth2AccessToken token, OAuth2Authentication authentication) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; representation = (Map&lt;String, Object&gt;) <span class="keyword">super</span>.convertAccessToken(token, authentication);</span><br><span class="line">        representation.put(<span class="string">"license"</span>, SecurityConstants.PIG_LICENSE);</span><br><span class="line">        <span class="keyword">return</span> representation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">extractAccessToken</span><span class="params">(String value, Map&lt;String, ?&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.extractAccessToken(value, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2Authentication <span class="title">extractAuthentication</span><span class="params">(Map&lt;String, ?&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.extractAuthentication(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="redis与token"><a href="#redis与token" class="headerlink" title="redis与token"></a>redis与token</h5><p>使用鉴权的<code>endpoint</code>将加上自己名字的<code>token</code>放入<code>redis</code>，redis连接器用的<code>srping data redis</code>框架</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * tokenstore 定制化处理</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> TokenStore</span></span><br><span class="line"><span class="comment">    * 1. 如果使用的 redis-cluster 模式请使用 PigRedisTokenStore</span></span><br><span class="line"><span class="comment">    * PigRedisTokenStore tokenStore = new PigRedisTokenStore();</span></span><br><span class="line"><span class="comment">    * tokenStore.setRedisTemplate(redisTemplate);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> TokenStore <span class="title">redisTokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       RedisTokenStore tokenStore = <span class="keyword">new</span> RedisTokenStore(redisConnectionFactory);</span><br><span class="line">       tokenStore.setPrefix(SecurityConstants.PIG_PREFIX);</span><br><span class="line">       <span class="keyword">return</span> tokenStore;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="授权服务器安全配置器"><a href="#授权服务器安全配置器" class="headerlink" title="授权服务器安全配置器"></a>授权服务器安全配置器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        security</span><br><span class="line">                .allowFormAuthenticationForClients()</span><br><span class="line">                .tokenKeyAccess(<span class="string">"isAuthenticated()"</span>)</span><br><span class="line">                .checkTokenAccess(<span class="string">"permitAll()"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="自定义实现的手机号-认证服务"><a href="#自定义实现的手机号-认证服务" class="headerlink" title="自定义实现的手机号 认证服务"></a>自定义实现的手机号 认证服务</h3><h4 id="接口层"><a href="#接口层" class="headerlink" title="接口层"></a>接口层</h4><p>先看接口层，这里和<code>pig-upms-service</code>联动，给了三个路径，用户使用手机号码登陆可通过三个路径发送请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"pig-upms-service"</span>, fallback = UserServiceFallbackImpl.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过用户名查询用户、角色信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> UserVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/findUserByUsername/&#123;username&#125;"</span>)</span><br><span class="line">    <span class="function">UserVO <span class="title">findUserByUsername</span><span class="params">(@PathVariable(<span class="string">"username"</span>)</span> String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过手机号查询用户、角色信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> UserVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/findUserByMobile/&#123;mobile&#125;"</span>)</span><br><span class="line">    <span class="function">UserVO <span class="title">findUserByMobile</span><span class="params">(@PathVariable(<span class="string">"mobile"</span>)</span> String mobile)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据OpenId查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> openId openId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> UserVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/findUserByOpenId/&#123;openId&#125;"</span>)</span><br><span class="line">    <span class="function">UserVO <span class="title">findUserByOpenId</span><span class="params">(@PathVariable(<span class="string">"openId"</span>)</span> String openId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><p>重写<code>SecurityConfigurerAdapter</code>的方法，通过http请求，找出有关手机号的token，用token找出相关用户的信息，已<code>Authentication</code>方式保存。拿到信息后，使用过滤器验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MobileSecurityConfigurer</span> <span class="keyword">extends</span> <span class="title">SecurityConfigurerAdapter</span>&lt;<span class="title">DefaultSecurityFilterChain</span>, <span class="title">HttpSecurity</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandler mobileLoginSuccessHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MobileAuthenticationFilter mobileAuthenticationFilter = <span class="keyword">new</span> MobileAuthenticationFilter();</span><br><span class="line">        mobileAuthenticationFilter.setAuthenticationManager(http.getSharedObject(AuthenticationManager.class));</span><br><span class="line">        mobileAuthenticationFilter.setAuthenticationSuccessHandler(mobileLoginSuccessHandler);</span><br><span class="line"></span><br><span class="line">        MobileAuthenticationProvider mobileAuthenticationProvider = <span class="keyword">new</span> MobileAuthenticationProvider();</span><br><span class="line">        mobileAuthenticationProvider.setUserService(userService);</span><br><span class="line">        http.authenticationProvider(mobileAuthenticationProvider)</span><br><span class="line">                .addFilterAfter(mobileAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="手机号登录校验逻辑MobileAuthenticationProvider"><a href="#手机号登录校验逻辑MobileAuthenticationProvider" class="headerlink" title="手机号登录校验逻辑MobileAuthenticationProvider"></a>手机号登录校验逻辑MobileAuthenticationProvider</h4><p>在<code>spring security</code> 中，<code>AuthenticationManage</code>管理一系列的<code>AuthenticationProvider</code>，<br>而每一个<code>Provider</code>都会通<code>UserDetailsService</code>和<code>UserDetail</code>来返回一个<br>以<code>MobileAuthenticationToken</code>实现的带用户以及权限的<code>Authentication</code></p><p>此处逻辑是，通过<code>UserService</code>查找已有用户的手机号码，生成对应的<code>UserDetails</code>,使用UserDetails生成手机验证<code>Authentication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        MobileAuthenticationToken mobileAuthenticationToken = (MobileAuthenticationToken) authentication;</span><br><span class="line">        UserVO userVo = userService.findUserByMobile((String) mobileAuthenticationToken.getPrincipal());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userVo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"手机号不存在:"</span> + mobileAuthenticationToken.getPrincipal());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UserDetailsImpl userDetails = buildUserDeatils(userVo);</span><br><span class="line"></span><br><span class="line">        MobileAuthenticationToken authenticationToken = <span class="keyword">new</span> MobileAuthenticationToken(userDetails, userDetails.getAuthorities());</span><br><span class="line">        authenticationToken.setDetails(mobileAuthenticationToken.getDetails());</span><br><span class="line">        <span class="keyword">return</span> authenticationToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> UserDetailsImpl <span class="title">buildUserDeatils</span><span class="params">(UserVO userVo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDetailsImpl(userVo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MobileAuthenticationToken.class.isAssignableFrom(authentication);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="手机号登录令牌类MobileAuthenticationToken"><a href="#手机号登录令牌类MobileAuthenticationToken" class="headerlink" title="手机号登录令牌类MobileAuthenticationToken"></a>手机号登录令牌类MobileAuthenticationToken</h5><p><code>MobileAuthenticationToken</code>继承<code>AbstractAuthenticationToken</code>实现<code>Authentication</code><br>所以当在页面中输入手机之后首先会进入到<code>MobileAuthenticationToken</code>验证(Authentication)，<br>然后生成的<code>Authentication</code>会被交由我上面说的<code>AuthenticationManager</code>来进行管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MobileAuthenticationToken</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationToken</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object principal;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MobileAuthenticationToken</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.principal = mobile;</span><br><span class="line">        setAuthenticated(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MobileAuthenticationToken</span><span class="params">(Object principal,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(authorities);</span><br><span class="line">        <span class="keyword">this</span>.principal = principal;</span><br><span class="line">        <span class="keyword">super</span>.setAuthenticated(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.principal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticated</span><span class="params">(<span class="keyword">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isAuthenticated) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.setAuthenticated(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eraseCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.eraseCredentials();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="手机号登录验证filter"><a href="#手机号登录验证filter" class="headerlink" title="手机号登录验证filter"></a>手机号登录验证filter</h4><p>判断http请求是否是post，不是则返回错误。</p><p>根据request请求拿到moblie信息，使用moblie信息返回手机号码登陆成功的oauth token。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (postOnly &amp;&amp; !request.getMethod().equals(HttpMethod.POST.name())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(</span><br><span class="line">                    <span class="string">"Authentication method not supported: "</span> + request.getMethod());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String mobile = obtainMobile(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mobile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mobile = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mobile = mobile.trim();</span><br><span class="line"></span><br><span class="line">        MobileAuthenticationToken mobileAuthenticationToken = <span class="keyword">new</span> MobileAuthenticationToken(mobile);</span><br><span class="line"></span><br><span class="line">        setDetails(request, mobileAuthenticationToken);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(mobileAuthenticationToken);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="手机登陆成功的处理器MobileLoginSuccessHandler"><a href="#手机登陆成功的处理器MobileLoginSuccessHandler" class="headerlink" title="手机登陆成功的处理器MobileLoginSuccessHandler"></a>手机登陆成功的处理器MobileLoginSuccessHandler</h4><p>这个处理器可以返回手机号登录成功的<code>oauth token</code>，但是要将<code>oauth token</code>传输出去必须配合上面的手机号登录验证filter</p><p>逻辑都在注释中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> </span>&#123;</span><br><span class="line">        String header = request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (header == <span class="keyword">null</span> || !header.startsWith(BASIC_)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnapprovedClientAuthenticationException(<span class="string">"请求头中client信息为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] tokens = AuthUtils.extractAndDecodeHeader(header);</span><br><span class="line">            <span class="keyword">assert</span> tokens.length == <span class="number">2</span>;</span><br><span class="line">            String clientId = tokens[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            ClientDetails clientDetails = clientDetailsService.loadClientByClientId(clientId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//校验secret</span></span><br><span class="line">            <span class="keyword">if</span> (!clientDetails.getClientSecret().equals(tokens[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidClientException(<span class="string">"Given client ID does not match authenticated client"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            TokenRequest tokenRequest = <span class="keyword">new</span> TokenRequest(MapUtil.newHashMap(), clientId, clientDetails.getScope(), <span class="string">"mobile"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//校验scope</span></span><br><span class="line">            <span class="keyword">new</span> DefaultOAuth2RequestValidator().validateScope(tokenRequest, clientDetails);</span><br><span class="line">            OAuth2Request oAuth2Request = tokenRequest.createOAuth2Request(clientDetails);</span><br><span class="line">            OAuth2Authentication oAuth2Authentication = <span class="keyword">new</span> OAuth2Authentication(oAuth2Request, authentication);</span><br><span class="line">            OAuth2AccessToken oAuth2AccessToken = authorizationServerTokenServices.createAccessToken(oAuth2Authentication);</span><br><span class="line">            log.info(<span class="string">"获取token 成功：&#123;&#125;"</span>, oAuth2AccessToken.getValue());</span><br><span class="line"></span><br><span class="line">            response.setCharacterEncoding(CommonConstant.UTF8);</span><br><span class="line">            response.setContentType(CommonConstant.CONTENT_TYPE);</span><br><span class="line">            PrintWriter printWriter = response.getWriter();</span><br><span class="line">            printWriter.append(objectMapper.writeValueAsString(oAuth2AccessToken));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(</span><br><span class="line">                    <span class="string">"Failed to decode basic authentication token"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从header 请求中的clientId/clientsecect</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> header header中的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CheckedException if the Basic header is not present or is not valid</span></span><br><span class="line"><span class="comment">     *                          Base64</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] extractAndDecodeHeader(String header)</span><br><span class="line">            <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] base64Token = header.substring(<span class="number">6</span>).getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] decoded;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            decoded = Base64.decode(base64Token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CheckedException(</span><br><span class="line">                    <span class="string">"Failed to decode basic authentication token"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String token = <span class="keyword">new</span> String(decoded, CommonConstant.UTF8);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> delim = token.indexOf(<span class="string">":"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (delim == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CheckedException(<span class="string">"Invalid basic authentication token"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;token.substring(<span class="number">0</span>, delim), token.substring(delim + <span class="number">1</span>)&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><h4 id="redis集群"><a href="#redis集群" class="headerlink" title="redis集群"></a>redis集群</h4><p>挺好的模板，收藏一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigRedisTokenStore</span> <span class="keyword">implements</span> <span class="title">TokenStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCESS = <span class="string">"access:"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTH_TO_ACCESS = <span class="string">"auth_to_access:"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTH = <span class="string">"auth:"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REFRESH_AUTH = <span class="string">"refresh_auth:"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCESS_TO_REFRESH = <span class="string">"access_to_refresh:"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REFRESH = <span class="string">"refresh:"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REFRESH_TO_ACCESS = <span class="string">"refresh_to_access:"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLIENT_ID_TO_ACCESS = <span class="string">"client_id_to_access:"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String UNAME_TO_ACCESS = <span class="string">"uname_to_access:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">getRedisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTemplate</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthenticationKeyGenerator authenticationKeyGenerator = <span class="keyword">new</span> DefaultAuthenticationKeyGenerator();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticationKeyGenerator</span><span class="params">(AuthenticationKeyGenerator authenticationKeyGenerator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authenticationKeyGenerator = authenticationKeyGenerator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">getAccessToken</span><span class="params">(OAuth2Authentication authentication)</span> </span>&#123;</span><br><span class="line">        String key = authenticationKeyGenerator.extractKey(authentication);</span><br><span class="line">        OAuth2AccessToken accessToken = (OAuth2AccessToken) redisTemplate.opsForValue().get(AUTH_TO_ACCESS + key);</span><br><span class="line">        <span class="keyword">if</span> (accessToken != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; !key.equals(authenticationKeyGenerator.extractKey(readAuthentication(accessToken.getValue())))) &#123;</span><br><span class="line">            storeAccessToken(accessToken, authentication);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2Authentication <span class="title">readAuthentication</span><span class="params">(OAuth2AccessToken token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readAuthentication(token.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2Authentication <span class="title">readAuthentication</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (OAuth2Authentication) <span class="keyword">this</span>.redisTemplate.opsForValue().get(AUTH + token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2Authentication <span class="title">readAuthenticationForRefreshToken</span><span class="params">(OAuth2RefreshToken token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readAuthenticationForRefreshToken(token.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2Authentication <span class="title">readAuthenticationForRefreshToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (OAuth2Authentication) <span class="keyword">this</span>.redisTemplate.opsForValue().get(REFRESH_AUTH + token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">storeAccessToken</span><span class="params">(OAuth2AccessToken token, OAuth2Authentication authentication)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(ACCESS + token.getValue(), token);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(AUTH + token.getValue(), authentication);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(AUTH_TO_ACCESS + authenticationKeyGenerator.extractKey(authentication), token);</span><br><span class="line">        <span class="keyword">if</span> (!authentication.isClientOnly()) &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(UNAME_TO_ACCESS + getApprovalKey(authentication), token);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForList().rightPush(CLIENT_ID_TO_ACCESS + authentication.getOAuth2Request().getClientId(), token);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (token.getExpiration() != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> seconds = token.getExpiresIn();</span><br><span class="line">            redisTemplate.expire(ACCESS + token.getValue(), seconds, TimeUnit.SECONDS);</span><br><span class="line">            redisTemplate.expire(AUTH + token.getValue(), seconds, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">            redisTemplate.expire(AUTH_TO_ACCESS + authenticationKeyGenerator.extractKey(authentication), seconds, TimeUnit.SECONDS);</span><br><span class="line">            redisTemplate.expire(CLIENT_ID_TO_ACCESS + authentication.getOAuth2Request().getClientId(), seconds, TimeUnit.SECONDS);</span><br><span class="line">            redisTemplate.expire(UNAME_TO_ACCESS + getApprovalKey(authentication), seconds, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (token.getRefreshToken() != <span class="keyword">null</span> &amp;&amp; token.getRefreshToken().getValue() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.redisTemplate.opsForValue().set(REFRESH_TO_ACCESS + token.getRefreshToken().getValue(), token.getValue());</span><br><span class="line">            <span class="keyword">this</span>.redisTemplate.opsForValue().set(ACCESS_TO_REFRESH + token.getValue(), token.getRefreshToken().getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getApprovalKey</span><span class="params">(OAuth2Authentication authentication)</span> </span>&#123;</span><br><span class="line">        String userName = authentication.getUserAuthentication() == <span class="keyword">null</span> ? <span class="string">""</span> : authentication.getUserAuthentication()</span><br><span class="line">                .getName();</span><br><span class="line">        <span class="keyword">return</span> getApprovalKey(authentication.getOAuth2Request().getClientId(), userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getApprovalKey</span><span class="params">(String clientId, String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientId + (userName == <span class="keyword">null</span> ? <span class="string">""</span> : <span class="string">":"</span> + userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAccessToken</span><span class="params">(OAuth2AccessToken accessToken)</span> </span>&#123;</span><br><span class="line">        removeAccessToken(accessToken.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">readAccessToken</span><span class="params">(String tokenValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (OAuth2AccessToken) <span class="keyword">this</span>.redisTemplate.opsForValue().get(ACCESS + tokenValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAccessToken</span><span class="params">(String tokenValue)</span> </span>&#123;</span><br><span class="line">        OAuth2AccessToken removed = (OAuth2AccessToken) redisTemplate.opsForValue().get(ACCESS + tokenValue);</span><br><span class="line">        <span class="comment">// caller to do that</span></span><br><span class="line">        OAuth2Authentication authentication = (OAuth2Authentication) <span class="keyword">this</span>.redisTemplate.opsForValue().get(AUTH + tokenValue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.delete(AUTH + tokenValue);</span><br><span class="line">        redisTemplate.delete(ACCESS + tokenValue);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.delete(ACCESS_TO_REFRESH + tokenValue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (authentication != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.redisTemplate.delete(AUTH_TO_ACCESS + authenticationKeyGenerator.extractKey(authentication));</span><br><span class="line"></span><br><span class="line">            String clientId = authentication.getOAuth2Request().getClientId();</span><br><span class="line">            redisTemplate.opsForList().leftPop(UNAME_TO_ACCESS + getApprovalKey(clientId, authentication.getName()));</span><br><span class="line"></span><br><span class="line">            redisTemplate.opsForList().leftPop(CLIENT_ID_TO_ACCESS + clientId);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.redisTemplate.delete(AUTH_TO_ACCESS + authenticationKeyGenerator.extractKey(authentication));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">storeRefreshToken</span><span class="params">(OAuth2RefreshToken refreshToken, OAuth2Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(REFRESH + refreshToken.getValue(), refreshToken);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(REFRESH_AUTH + refreshToken.getValue(), authentication);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2RefreshToken <span class="title">readRefreshToken</span><span class="params">(String tokenValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (OAuth2RefreshToken) <span class="keyword">this</span>.redisTemplate.opsForValue().get(REFRESH + tokenValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeRefreshToken</span><span class="params">(OAuth2RefreshToken refreshToken)</span> </span>&#123;</span><br><span class="line">        removeRefreshToken(refreshToken.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeRefreshToken</span><span class="params">(String tokenValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.delete(REFRESH + tokenValue);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.delete(REFRESH_AUTH + tokenValue);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.delete(REFRESH_TO_ACCESS + tokenValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAccessTokenUsingRefreshToken</span><span class="params">(OAuth2RefreshToken refreshToken)</span> </span>&#123;</span><br><span class="line">        removeAccessTokenUsingRefreshToken(refreshToken.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeAccessTokenUsingRefreshToken</span><span class="params">(String refreshToken)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String token = (String) <span class="keyword">this</span>.redisTemplate.opsForValue().get(REFRESH_TO_ACCESS + refreshToken);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (token != <span class="keyword">null</span>) &#123;</span><br><span class="line">            redisTemplate.delete(ACCESS + token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;OAuth2AccessToken&gt; <span class="title">findTokensByClientIdAndUserName</span><span class="params">(String clientId, String userName)</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; result = redisTemplate.opsForList().range(UNAME_TO_ACCESS + getApprovalKey(clientId, userName), <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> || result.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;OAuth2AccessToken&gt; accessTokens = <span class="keyword">new</span> ArrayList&lt;&gt;(result.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;Object&gt; it = result.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">            OAuth2AccessToken accessToken = (OAuth2AccessToken) it.next();</span><br><span class="line">            accessTokens.add(accessToken);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableCollection(accessTokens);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;OAuth2AccessToken&gt; <span class="title">findTokensByClientId</span><span class="params">(String clientId)</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; result = redisTemplate.opsForList().range((CLIENT_ID_TO_ACCESS + clientId), <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> || result.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;OAuth2AccessToken&gt; accessTokens = <span class="keyword">new</span> ArrayList&lt;&gt;(result.size());</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;Object&gt; it = result.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">            OAuth2AccessToken accessToken = (OAuth2AccessToken) it.next();</span><br><span class="line">            accessTokens.add(accessToken);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableCollection(accessTokens);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="服务网关模块"><a href="#服务网关模块" class="headerlink" title="服务网关模块"></a>服务网关模块</h1><p>网关主体在包<code>pig\pig-gateway\src\main\java\com\github\pig\gateway</code>下</p><p><img src="/2018/12/12/冷冷Pig开源项目学习/1.png" alt="服务网关"></p><p>作者使用了Zuul做为网关，它Netflix开源的微服务网关，可以和Eureka,Ribbon,Hystrix等组件配合使用。</p><p>Zuul组件的核心是一系列的过滤器，这些过滤器可以完成以下功能：</p><ul><li><p>身份认证和安全: 识别每一个资源的验证要求，并拒绝那些不符的请求</p></li><li><p>审查与监控：</p></li><li><p>动态路由：动态将请求路由到不同后端集群</p></li><li><p>压力测试：逐渐增加指向集群的流量，以了解性能</p></li><li><p>负载分配：为每一种负载类型分配对应容量，并弃用超出限定值的请求</p></li><li><p>静态响应处理：边缘位置进行响应，避免转发到内部集群</p></li><li><p>多区域弹性：跨域AWS Region进行请求路由，旨在实现ELB(ElasticLoad Balancing)使用多样化</p></li></ul><h2 id="多种功能的过滤器过滤器"><a href="#多种功能的过滤器过滤器" class="headerlink" title="多种功能的过滤器过滤器"></a>多种功能的过滤器过滤器</h2><p>Zuul组件的核心是一系列的过滤器，我们先从过滤器下手。</p><h3 id="网关统一异常过滤器"><a href="#网关统一异常过滤器" class="headerlink" title="网关统一异常过滤器"></a>网关统一异常过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorHandlerFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogSendService logSendService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SEND_RESPONSE_FILTER_ORDER + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="keyword">return</span> requestContext.getThrowable() != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        logSendService.send(requestContext);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作者以原生zuul过滤器为基础加了日志配置,优先级为+1，数字越大优先级越低。</p><h3 id="XSS过滤器"><a href="#XSS过滤器" class="headerlink" title="XSS过滤器"></a>XSS过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssSecurityFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        XssHttpServletRequestWrapper xssRequest = <span class="keyword">new</span> XssHttpServletRequestWrapper(request);</span><br><span class="line">        filterChain.doFilter(xssRequest, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>重写springMVC里面的的确保在一次请求只通过一次filter的类<code>OncePerRequestFilter</code>，添加一条<a href="https://gitee.com/renrenio/renren-fast的工具类`XssHttpServletRequestWrapper`为过滤链条。" target="_blank" rel="noopener">https://gitee.com/renrenio/renren-fast的工具类`XssHttpServletRequestWrapper`为过滤链条。</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">····略</span><br><span class="line">        <span class="comment">//xss过滤</span></span><br><span class="line">        json = xssEncode(json);</span><br><span class="line">        <span class="keyword">final</span> ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(json.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line">···略</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="密码过滤器DecodePasswordFilter"><a href="#密码过滤器DecodePasswordFilter" class="headerlink" title="密码过滤器DecodePasswordFilter"></a>密码过滤器DecodePasswordFilter</h3><p>此过滤器优先级为+2.每当一个请求不是请求<code>/oauth/token</code>或者<code>/mobile/token</code>这个地址时，都会解析使用aes解码器<code>password</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; params = ctx.getRequestQueryParams();</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; passList = params.get(PASSWORD);</span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isEmpty(passList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String password = passList.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(password)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                password = decryptAES(password, key);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">"密码解密失败:&#123;&#125;"</span>, password);</span><br><span class="line">            &#125;</span><br><span class="line">            params.put(PASSWORD, CollUtil.newArrayList(password.trim()));</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.setRequestQueryParams(params);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="校验码过滤器ValidateCodeFilter"><a href="#校验码过滤器ValidateCodeFilter" class="headerlink" title="校验码过滤器ValidateCodeFilter"></a>校验码过滤器ValidateCodeFilter</h3><p>逻辑作者都写在注释中了，此处使用了redis做为服务端验证码的缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line">     * 是否校验验证码</span><br><span class="line">     * <span class="number">1</span>. 判断验证码开关是否开启</span><br><span class="line">     * <span class="number">2</span>. 判断请求是否登录请求</span><br><span class="line">     * <span class="number">2.1</span> 判断是不是刷新请求(不用单独在建立刷新客户端)</span><br><span class="line">     * <span class="number">3</span>. 判断终端是否支持</span><br><span class="line">     *</span><br><span class="line">     * <span class="meta">@return</span> <span class="keyword">true</span>/<span class="keyword">false</span></span><br><span class="line">     */</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HttpServletRequest request = RequestContext.getCurrentContext().getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StrUtil.containsAnyIgnoreCase(request.getRequestURI(),</span><br><span class="line">                SecurityConstants.OAUTH_TOKEN_URL, SecurityConstants.MOBILE_TOKEN_URL)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (SecurityConstants.REFRESH_TOKEN.equals(request.getParameter(GRANT_TYPE))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] clientInfos = AuthUtils.extractAndDecodeHeader(request);</span><br><span class="line">            <span class="keyword">if</span> (CollUtil.containsAny(filterIgnorePropertiesConfig.getClients(), Arrays.asList(clientInfos))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"解析终端信息失败"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkCode(RequestContext.getCurrentContext().getRequest());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ValidateCodeException e) &#123;</span><br><span class="line">            RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">            R&lt;String&gt; result = <span class="keyword">new</span> R&lt;&gt;(e);</span><br><span class="line">            result.setCode(<span class="number">478</span>);</span><br><span class="line"></span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">478</span>);</span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            ctx.getResponse().setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">            ctx.setResponseBody(JSONObject.toJSONString(result));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查code</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ValidateCodeException 验证码校验异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkCode</span><span class="params">(HttpServletRequest httpServletRequest)</span> <span class="keyword">throws</span> ValidateCodeException </span>&#123;</span><br><span class="line">        String code = httpServletRequest.getParameter(<span class="string">"code"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(code)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"请输入验证码"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String randomStr = httpServletRequest.getParameter(<span class="string">"randomStr"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(randomStr)) &#123;</span><br><span class="line">            randomStr = httpServletRequest.getParameter(<span class="string">"mobile"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String key = SecurityConstants.DEFAULT_CODE_KEY + randomStr;</span><br><span class="line">        <span class="keyword">if</span> (!redisTemplate.hasKey(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(EXPIRED_CAPTCHA_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object codeObj = redisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (codeObj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(EXPIRED_CAPTCHA_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String saveCode = codeObj.toString();</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(saveCode)) &#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(EXPIRED_CAPTCHA_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StrUtil.equals(saveCode, code)) &#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码错误，请重新输入"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h2><p>灰度发布，已经不是一个很新的概念了．一个产品，如果需要快速迭代开发上线，又要保证质量，保证刚上线的系统，一旦出现问题那么可以很快的控制影响面，就需要设计一套灰度发布系统．</p><p>灰度发布系统的作用在于，可以根据自己的配置，来将用户的流量导到新上线的系统上，来快速验证新的功能修改，而一旦出问题，也可以马上的恢复，简单的说，就是一套A/BTest系统．</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>下面是灰度路由初始化类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(DiscoveryEnabledNIWSServerList.class)</span><br><span class="line"><span class="meta">@AutoConfigureBefore</span>(RibbonClientConfiguration.class)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"zuul.ribbon.metadata.enabled"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonMetaFilterAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZoneAvoidanceRule <span class="title">metadataAwareRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MetadataCanaryRuleHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="灰度发布有关过滤器AccessFilter"><a href="#灰度发布有关过滤器AccessFilter" class="headerlink" title="灰度发布有关过滤器AccessFilter"></a>灰度发布有关过滤器AccessFilter</h3><p>首先重写<code>filterOrder()</code>方法，使这个过滤器在<code>在RateLimitPreFilter</code>之前运行，不会出现空指针问题。此处优先级<code>FORM_BODY_WRAPPER_FILTER_ORDER-1</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;zuul.ribbon.metadata.enabled:false&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> canary;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FORM_BODY_WRAPPER_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        String version = requestContext.getRequest().getHeader(SecurityConstants.VERSION);</span><br><span class="line">        <span class="keyword">if</span> (canary &amp;&amp; StrUtil.isNotBlank(version)) &#123;</span><br><span class="line">            RibbonVersionHolder.setContext(version);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        requestContext.set(<span class="string">"startTime"</span>, System.currentTimeMillis());</span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="keyword">if</span> (authentication != <span class="keyword">null</span>) &#123;</span><br><span class="line">            requestContext.addZuulRequestHeader(SecurityConstants.USER_HEADER, authentication.getName());</span><br><span class="line">            requestContext.addZuulRequestHeader(SecurityConstants.ROLE_HEADER, CollectionUtil.join(authentication.getAuthorities(), <span class="string">","</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心方法在run()上，首先受到request请求，拿到他的版本约束信息，然后根据选择添加token</p><h3 id="路由微服务断言处理器MetadataCanaryRuleHandler"><a href="#路由微服务断言处理器MetadataCanaryRuleHandler" class="headerlink" title="路由微服务断言处理器MetadataCanaryRuleHandler"></a>路由微服务断言处理器MetadataCanaryRuleHandler</h3><p>自定义<code>ribbon</code>路由规则匹配多版本请求，实现<strong>灰度发布</strong>。复合判断server所在区域的性能和server的可用性选择server，即，使用ZoneAvoidancePredicate和AvailabilityPredicate来判断是否选择某个server，前一个判断判定一个zone的运行性能是否可用，剔除不可用的zone（的所有server），AvailabilityPredicate用于过滤掉连接数过多的Server。</p><p>此处逻辑是</p><ol><li>eureka metadata （主机名，IP地址，端口号，状态页健康检查等信息，或者通过配置文件自定义元数据）存在版本定义时候进行判断 </li><li>不存在 metadata 直接返回true</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractServerPredicate <span class="title">getPredicate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AbstractServerPredicate() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(PredicateKey predicateKey)</span> </span>&#123;</span><br><span class="line">                String targetVersion = RibbonVersionHolder.getContext();</span><br><span class="line">                RibbonVersionHolder.clearContext();</span><br><span class="line">                <span class="keyword">if</span> (StrUtil.isBlank(targetVersion)) &#123;</span><br><span class="line">                    log.debug(<span class="string">"客户端未配置目标版本直接路由"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                DiscoveryEnabledServer server = (DiscoveryEnabledServer) predicateKey.getServer();</span><br><span class="line">                <span class="keyword">final</span> Map&lt;String, String&gt; metadata = server.getInstanceInfo().getMetadata();</span><br><span class="line">                <span class="keyword">if</span> (StrUtil.isBlank(metadata.get(SecurityConstants.VERSION))) &#123;</span><br><span class="line">                    log.debug(<span class="string">"当前微服务&#123;&#125; 未配置版本直接路由"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (metadata.get(SecurityConstants.VERSION).equals(targetVersion)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">"当前微服务&#123;&#125; 版本为&#123;&#125;，目标版本&#123;&#125; 匹配失败"</span>, server.getInstanceInfo().getAppName()</span><br><span class="line">                            , metadata.get(SecurityConstants.VERSION), targetVersion);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicRouteLocator</span> <span class="keyword">extends</span> <span class="title">DiscoveryClientRouteLocator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ZuulProperties properties;</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicRouteLocator</span><span class="params">(String servletPath, DiscoveryClient discovery, ZuulProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                               ServiceInstance localServiceInstance, RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(servletPath, discovery, properties, localServiceInstance);</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写路由配置</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 1. properties 配置。</span></span><br><span class="line"><span class="comment">     * 2. eureka 默认配置。</span></span><br><span class="line"><span class="comment">     * 3. DB数据库配置。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 路由表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> LinkedHashMap&lt;String, ZuulProperties.ZuulRoute&gt; locateRoutes() &#123;</span><br><span class="line">        LinkedHashMap&lt;String, ZuulProperties.ZuulRoute&gt; routesMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//读取properties配置、eureka默认配置</span></span><br><span class="line">        routesMap.putAll(<span class="keyword">super</span>.locateRoutes());</span><br><span class="line">        log.debug(<span class="string">"初始默认的路由配置完成"</span>);</span><br><span class="line">        routesMap.putAll(locateRoutesFromDb());</span><br><span class="line">        LinkedHashMap&lt;String, ZuulProperties.ZuulRoute&gt; values = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, ZuulProperties.ZuulRoute&gt; entry : routesMap.entrySet()) &#123;</span><br><span class="line">            String path = entry.getKey();</span><br><span class="line">            <span class="keyword">if</span> (!path.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">                path = <span class="string">"/"</span> + path;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isNotBlank(<span class="keyword">this</span>.properties.getPrefix())) &#123;</span><br><span class="line">                path = <span class="keyword">this</span>.properties.getPrefix() + path;</span><br><span class="line">                <span class="keyword">if</span> (!path.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">                    path = <span class="string">"/"</span> + path;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            values.put(path, entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redis中保存的，没有从upms拉去，避免启动链路依赖问题（取舍），网关依赖业务模块的问题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, ZuulProperties.ZuulRoute&gt; locateRoutesFromDb() &#123;</span><br><span class="line">        Map&lt;String, ZuulProperties.ZuulRoute&gt; routes = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Object obj = redisTemplate.opsForValue().get(CommonConstant.ROUTE_KEY);</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> routes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;SysZuulRoute&gt; results = (List&lt;SysZuulRoute&gt;) obj;</span><br><span class="line">        <span class="keyword">for</span> (SysZuulRoute result : results) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isBlank(result.getPath()) &amp;&amp; StrUtil.isBlank(result.getUrl())) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ZuulProperties.ZuulRoute zuulRoute = <span class="keyword">new</span> ZuulProperties.ZuulRoute();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                zuulRoute.setId(result.getServiceId());</span><br><span class="line">                zuulRoute.setPath(result.getPath());</span><br><span class="line">                zuulRoute.setServiceId(result.getServiceId());</span><br><span class="line">                zuulRoute.setRetryable(StrUtil.equals(result.getRetryable(), <span class="string">"0"</span>) ? Boolean.FALSE : Boolean.TRUE);</span><br><span class="line">                zuulRoute.setStripPrefix(StrUtil.equals(result.getStripPrefix(), <span class="string">"0"</span>) ? Boolean.FALSE : Boolean.TRUE);</span><br><span class="line">                zuulRoute.setUrl(result.getUrl());</span><br><span class="line">                List&lt;String&gt; sensitiveHeadersList = StrUtil.splitTrim(result.getSensitiveheadersList(), <span class="string">","</span>);</span><br><span class="line">                <span class="keyword">if</span> (sensitiveHeadersList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Set&lt;String&gt; sensitiveHeaderSet = CollUtil.newHashSet();</span><br><span class="line">                    sensitiveHeadersList.forEach(sensitiveHeader -&gt; sensitiveHeaderSet.add(sensitiveHeader));</span><br><span class="line">                    zuulRoute.setSensitiveHeaders(sensitiveHeaderSet);</span><br><span class="line">                    zuulRoute.setCustomSensitiveHeaders(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">"从数据库加载路由配置异常"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">"添加数据库自定义的路由配置,path：&#123;&#125;，serviceId:&#123;&#125;"</span>, zuulRoute.getPath(), zuulRoute.getServiceId());</span><br><span class="line">            routes.put(zuulRoute.getPath(), zuulRoute);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> routes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网关日志处理"><a href="#网关日志处理" class="headerlink" title="网关日志处理"></a>网关日志处理</h2><p>代码注释已经将逻辑写的很清楚了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogSendServiceImpl</span> <span class="keyword">implements</span> <span class="title">LogSendService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_ID = <span class="string">"serviceId"</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 获取 requestContext 中的请求信息</span></span><br><span class="line"><span class="comment">     * 2. 如果返回状态不是OK，则获取返回信息中的错误信息</span></span><br><span class="line"><span class="comment">     * 3. 发送到MQ</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestContext 上下文对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(RequestContext requestContext)</span> </span>&#123;</span><br><span class="line">        HttpServletRequest request = requestContext.getRequest();</span><br><span class="line">        String requestUri = request.getRequestURI();</span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        SysLog sysLog = <span class="keyword">new</span> SysLog();</span><br><span class="line">        sysLog.setType(CommonConstant.STATUS_NORMAL);</span><br><span class="line">        sysLog.setRemoteAddr(HttpUtil.getClientIP(request));</span><br><span class="line">        sysLog.setRequestUri(URLUtil.getPath(requestUri));</span><br><span class="line">        sysLog.setMethod(method);</span><br><span class="line">        sysLog.setUserAgent(request.getHeader(<span class="string">"user-agent"</span>));</span><br><span class="line">        sysLog.setParams(HttpUtil.toParams(request.getParameterMap()));</span><br><span class="line">        Long startTime = (Long) requestContext.get(<span class="string">"startTime"</span>);</span><br><span class="line">        sysLog.setTime(System.currentTimeMillis() - startTime);</span><br><span class="line">        <span class="keyword">if</span> (requestContext.get(SERVICE_ID) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sysLog.setServiceId(requestContext.get(SERVICE_ID).toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正常发送服务异常解析</span></span><br><span class="line">        <span class="keyword">if</span> (requestContext.getResponseStatusCode() == HttpStatus.SC_INTERNAL_SERVER_ERROR</span><br><span class="line">                &amp;&amp; requestContext.getResponseDataStream() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            InputStream inputStream = requestContext.getResponseDataStream();</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            InputStream stream1 = <span class="keyword">null</span>;</span><br><span class="line">            InputStream stream2;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = IoUtil.readBytes(inputStream);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                baos.write(buffer);</span><br><span class="line">                baos.flush();</span><br><span class="line">                stream1 = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">                stream2 = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">                String resp = IoUtil.read(stream1, CommonConstant.UTF8);</span><br><span class="line">                sysLog.setType(CommonConstant.STATUS_LOCK);</span><br><span class="line">                sysLog.setException(resp);</span><br><span class="line">                requestContext.setResponseDataStream(stream2);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                log.error(<span class="string">"响应流解析异常："</span>, e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                IoUtil.close(stream1);</span><br><span class="line">                IoUtil.close(baos);</span><br><span class="line">                IoUtil.close(inputStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//网关内部异常</span></span><br><span class="line">        Throwable throwable = requestContext.getThrowable();</span><br><span class="line">        <span class="keyword">if</span> (throwable != <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.error(<span class="string">"网关异常"</span>, throwable);</span><br><span class="line">            sysLog.setException(throwable.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保存发往MQ（只保存授权）</span></span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="keyword">if</span> (authentication != <span class="keyword">null</span> &amp;&amp; StrUtil.isNotBlank(authentication.getName())) &#123;</span><br><span class="line">            LogVO logVo = <span class="keyword">new</span> LogVO();</span><br><span class="line">            sysLog.setCreateBy(authentication.getName());</span><br><span class="line">            logVo.setSysLog(sysLog);</span><br><span class="line">            logVo.setUsername(authentication.getName());</span><br><span class="line">            rabbitTemplate.convertAndSend(MqQueueConstant.LOG_QUEUE, logVo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多维度限流"><a href="#多维度限流" class="headerlink" title="多维度限流"></a>多维度限流</h2><h3 id="限流降级处理器ZuulRateLimiterErrorHandler"><a href="#限流降级处理器ZuulRateLimiterErrorHandler" class="headerlink" title="限流降级处理器ZuulRateLimiterErrorHandler"></a>限流降级处理器ZuulRateLimiterErrorHandler</h3><p>重写zuul中默认的限流处理器<code>DefaultRateLimiterErrorHandler</code>，使之记录日志内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RateLimiterErrorHandler <span class="title">rateLimitErrorHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultRateLimiterErrorHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleSaveError</span><span class="params">(String key, Exception e)</span> </span>&#123;</span><br><span class="line">                log.error(<span class="string">"保存key:[&#123;&#125;]异常"</span>, key, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleFetchError</span><span class="params">(String key, Exception e)</span> </span>&#123;</span><br><span class="line">                log.error(<span class="string">"路由失败:[&#123;&#125;]异常"</span>, key);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleError</span><span class="params">(String msg, Exception e)</span> </span>&#123;</span><br><span class="line">                log.error(<span class="string">"限流异常:[&#123;&#125;]"</span>, msg, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="与spring-security-oAuth方法整合单点登陆"><a href="#与spring-security-oAuth方法整合单点登陆" class="headerlink" title="与spring security oAuth方法整合单点登陆"></a>与spring security oAuth方法整合单点登陆</h2><h3 id="授权拒绝处理器-PigAccessDeniedHandler"><a href="#授权拒绝处理器-PigAccessDeniedHandler" class="headerlink" title="授权拒绝处理器 PigAccessDeniedHandler"></a>授权拒绝处理器 PigAccessDeniedHandler</h3><p>重写<code>Srping security oAuth</code> 提供单点登录验证拒绝<code>OAuth2AccessDeniedHandler</code>接口，使用R包装失败信息到<code>PigDeniedException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException authException)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"授权失败，禁止访问 &#123;&#125;"</span>, request.getRequestURI());</span><br><span class="line">        response.setCharacterEncoding(CommonConstant.UTF8);</span><br><span class="line">        response.setContentType(CommonConstant.CONTENT_TYPE);</span><br><span class="line">        R&lt;String&gt; result = <span class="keyword">new</span> R&lt;&gt;(<span class="keyword">new</span> PigDeniedException(<span class="string">"授权失败，禁止访问"</span>));</span><br><span class="line">        response.setStatus(HttpStatus.SC_FORBIDDEN);</span><br><span class="line">        PrintWriter printWriter = response.getWriter();</span><br><span class="line">        printWriter.append(objectMapper.writeValueAsString(result));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="菜单管理"><a href="#菜单管理" class="headerlink" title="菜单管理"></a>菜单管理</h2><h3 id="MenuService"><a href="#MenuService" class="headerlink" title="MenuService"></a>MenuService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"pig-upms-service"</span>, fallback = MenuServiceFallbackImpl.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MenuService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过角色名查询菜单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> role 角色名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 菜单列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/menu/findMenuByRole/&#123;role&#125;"</span>)</span><br><span class="line">    <span class="function">Set&lt;MenuVO&gt; <span class="title">findMenuByRole</span><span class="params">(@PathVariable(<span class="string">"role"</span>)</span> String role)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用feign连接pig系统的菜单微服务</p><h4 id="菜单权限"><a href="#菜单权限" class="headerlink" title="菜单权限"></a>菜单权限</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"permissionService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionServiceImpl</span> <span class="keyword">implements</span> <span class="title">PermissionService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MenuService menuService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AntPathMatcher antPathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPermission</span><span class="params">(HttpServletRequest request, Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//ele-admin options 跨域配置，现在处理是通过前端配置代理，不使用这种方式，存在风险</span></span><br><span class="line"><span class="comment">//        if (HttpMethod.OPTIONS.name().equalsIgnoreCase(request.getMethod())) &#123;</span></span><br><span class="line"><span class="comment">//            return true;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        Object principal = authentication.getPrincipal();</span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; authorityList = (List&lt;SimpleGrantedAuthority&gt;) authentication.getAuthorities();</span><br><span class="line">        AtomicBoolean hasPermission = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (principal != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (CollUtil.isEmpty(authorityList)) &#123;</span><br><span class="line">                log.warn(<span class="string">"角色列表为空：&#123;&#125;"</span>, authentication.getPrincipal());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Set&lt;MenuVO&gt; urls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            authorityList.stream().filter(authority -&gt;</span><br><span class="line">                    !StrUtil.equals(authority.getAuthority(), <span class="string">"ROLE_USER"</span>))</span><br><span class="line">                    .forEach(authority -&gt; &#123;</span><br><span class="line">                        Set&lt;MenuVO&gt; menuVOSet = menuService.findMenuByRole(authority.getAuthority());</span><br><span class="line">                        CollUtil.addAll(urls, menuVOSet);</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            urls.stream().filter(menu -&gt; StrUtil.isNotEmpty(menu.getUrl())</span><br><span class="line">                    &amp;&amp; antPathMatcher.match(menu.getUrl(), request.getRequestURI())</span><br><span class="line">                    &amp;&amp; request.getMethod().equalsIgnoreCase(menu.getMethod()))</span><br><span class="line">                    .findFirst().ifPresent(menuVO -&gt; hasPermission.set(<span class="keyword">true</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hasPermission.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="网关总结"><a href="#网关总结" class="headerlink" title="网关总结"></a>网关总结</h3><p>pig这个系统是个很好的框架，本次体验的是pig的zuul网关模块，此模块与feign，ribbon，spring security，Eurasia进行整合，完成或部分完成了<strong>动态路由</strong>，<strong>灰度发布</strong>,<strong>菜单权限管理</strong>，<strong>服务限流</strong>，<strong>网关日志处理</strong>，非常值得学习！</p><h1 id="UPMs权限管理系统模块"><a href="#UPMs权限管理系统模块" class="headerlink" title="UPMs权限管理系统模块"></a>UPMs权限管理系统模块</h1><p>百度了一下，<em>UPMS</em>是User Permissions Management System，通用用户权限管理系统</p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="部门表"><a href="#部门表" class="headerlink" title="部门表"></a>部门表</h3><p><img src="/2018/12/12/冷冷Pig开源项目学习/4.png" alt="服务网关"></p><h4 id="部门关系表"><a href="#部门关系表" class="headerlink" title="部门关系表"></a>部门关系表</h4><p><img src="/2018/12/12/冷冷Pig开源项目学习/5.png" alt="服务网关"></p><h3 id="字典表"><a href="#字典表" class="headerlink" title="字典表"></a>字典表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@TableId</span>(value=<span class="string">"id"</span>, type= IdType.AUTO)</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> String value;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> String label;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序（升序）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> BigDecimal sort;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@TableField</span>(<span class="string">"create_time"</span>)</span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@TableField</span>(<span class="string">"update_time"</span>)</span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备注信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> String remarks;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除标记</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@TableField</span>(<span class="string">"del_flag"</span>)</span><br><span class="line"><span class="keyword">private</span> String delFlag;</span><br></pre></td></tr></table></figure><h3 id="日志表"><a href="#日志表" class="headerlink" title="日志表"></a>日志表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysLog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.ID_WORKER)</span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = ToStringSerializer.class)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String createBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作IP地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String remoteAddr;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户代理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String userAgent;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求URI</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String requestUri;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String method;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作提交的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String params;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long time;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除标记</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String delFlag;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String exception;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String serviceId; &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="菜单权限表"><a href="#菜单权限表" class="headerlink" title="菜单权限表"></a>菜单权限表</h3><p><img src="/2018/12/12/冷冷Pig开源项目学习/6.png" alt="服务网关"></p><h3 id="角色表"><a href="#角色表" class="headerlink" title="角色表"></a>角色表</h3><p><img src="/2018/12/12/冷冷Pig开源项目学习/7.png" alt="服务网关"></p><h4 id="角色与部门对应关系"><a href="#角色与部门对应关系" class="headerlink" title="角色与部门对应关系"></a>角色与部门对应关系</h4><p>略</p><h4 id="角色与菜单权限对应关系"><a href="#角色与菜单权限对应关系" class="headerlink" title="角色与菜单权限对应关系"></a>角色与菜单权限对应关系</h4><p>略</p><h3 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主键ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableId</span>(value = <span class="string">"user_id"</span>, type = IdType.AUTO)</span><br><span class="line"><span class="keyword">private</span> Integer userId;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机盐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> String salt;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField</span>(<span class="string">"create_time"</span>)</span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField</span>(<span class="string">"update_time"</span>)</span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 0-正常，1-删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField</span>(<span class="string">"del_flag"</span>)</span><br><span class="line"><span class="keyword">private</span> String delFlag;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简介</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String phone;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 头像</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 部门ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField</span>(<span class="string">"dept_id"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer deptId;</span><br></pre></td></tr></table></figure><h3 id="动态路由配置表"><a href="#动态路由配置表" class="headerlink" title="动态路由配置表"></a>动态路由配置表</h3><p><img src="/2018/12/12/冷冷Pig开源项目学习/8.png" alt="服务网关"></p><h2 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h2><p><img src="/2018/12/12/冷冷Pig开源项目学习/3.png" alt="服务网关"></p><p>全是基于<a href="https://mp.baomidou.com/" target="_blank" rel="noopener">mybatis plus</a>的CRUD，有点多。大部分干这行的都懂，我就不详细展开了。</p><h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p><code>ValidateCodeController</code>可以找到创建验证码相关代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(SecurityConstants.DEFAULT_VALIDATE_CODE_URL_PREFIX + <span class="string">"/&#123;randomStr&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCode</span><span class="params">(@PathVariable String randomStr, HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.isBlank(randomStr, <span class="string">"机器码不能为空"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-store, no-cache"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line">        <span class="comment">//生成文字验证码</span></span><br><span class="line">        String text = producer.createText();</span><br><span class="line">        <span class="comment">//生成图片验证码</span></span><br><span class="line">        BufferedImage image = producer.createImage(text);</span><br><span class="line">        userService.saveImageCode(randomStr, text);</span><br><span class="line">        ServletOutputStream out = response.getOutputStream();</span><br><span class="line">        ImageIO.write(image, <span class="string">"JPEG"</span>, out);</span><br><span class="line">        IOUtils.closeQuietly(out);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其中的 <code>producer</code>是使用<code>Kaptcha</code>，下面是配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KaptchaConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KAPTCHA_BORDER = <span class="string">"kaptcha.border"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KAPTCHA_TEXTPRODUCER_FONT_COLOR = <span class="string">"kaptcha.textproducer.font.color"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KAPTCHA_TEXTPRODUCER_CHAR_SPACE = <span class="string">"kaptcha.textproducer.char.space"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KAPTCHA_IMAGE_WIDTH = <span class="string">"kaptcha.image.width"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KAPTCHA_IMAGE_HEIGHT = <span class="string">"kaptcha.image.height"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KAPTCHA_TEXTPRODUCER_CHAR_LENGTH = <span class="string">"kaptcha.textproducer.char.length"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object KAPTCHA_IMAGE_FONT_SIZE = <span class="string">"kaptcha.textproducer.font.size"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultKaptcha <span class="title">producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(KAPTCHA_BORDER, SecurityConstants.DEFAULT_IMAGE_BORDER);</span><br><span class="line">        properties.put(KAPTCHA_TEXTPRODUCER_FONT_COLOR, SecurityConstants.DEFAULT_COLOR_FONT);</span><br><span class="line">        properties.put(KAPTCHA_TEXTPRODUCER_CHAR_SPACE, SecurityConstants.DEFAULT_CHAR_SPACE);</span><br><span class="line">        properties.put(KAPTCHA_IMAGE_WIDTH, SecurityConstants.DEFAULT_IMAGE_WIDTH);</span><br><span class="line">        properties.put(KAPTCHA_IMAGE_HEIGHT, SecurityConstants.DEFAULT_IMAGE_HEIGHT);</span><br><span class="line">        properties.put(KAPTCHA_IMAGE_FONT_SIZE, SecurityConstants.DEFAULT_IMAGE_FONT_SIZE);</span><br><span class="line">        properties.put(KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, SecurityConstants.DEFAULT_IMAGE_LENGTH);</span><br><span class="line">        Config config = <span class="keyword">new</span> Config(properties);</span><br><span class="line">        DefaultKaptcha defaultKaptcha = <span class="keyword">new</span> DefaultKaptcha();</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送手机验证码"><a href="#发送手机验证码" class="headerlink" title="发送手机验证码"></a>发送手机验证码</h4><p>大体逻辑为，先查询验证码redis缓存，没有缓存则说明验证码缓存没有失效，返回错误。</p><p>查到没有验证码，则根据手机号码从数据库获得用户信息，生成一个4位的验证码，使用<code>rabbbitmq</code>队列把短信验证码保存到队列，同时加上手机验证码的redis缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送验证码</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 1. 先去redis 查询是否 60S内已经发送</span></span><br><span class="line"><span class="comment">     * 2. 未发送： 判断手机号是否存 ? false :产生4位数字  手机号-验证码</span></span><br><span class="line"><span class="comment">     * 3. 发往消息中心-》发送信息</span></span><br><span class="line"><span class="comment">     * 4. 保存redis</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true、false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R&lt;Boolean&gt; <span class="title">sendSmsCode</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">        Object tempCode = redisTemplate.opsForValue().get(SecurityConstants.DEFAULT_CODE_KEY + mobile);</span><br><span class="line">        <span class="keyword">if</span> (tempCode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.error(<span class="string">"用户:&#123;&#125;验证码未失效&#123;&#125;"</span>, mobile, tempCode);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;(<span class="keyword">false</span>, <span class="string">"验证码未失效，请失效后再次申请"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SysUser params = <span class="keyword">new</span> SysUser();</span><br><span class="line">        params.setPhone(mobile);</span><br><span class="line">        List&lt;SysUser&gt; userList = <span class="keyword">this</span>.selectList(<span class="keyword">new</span> EntityWrapper&lt;&gt;(params));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (CollectionUtil.isEmpty(userList)) &#123;</span><br><span class="line">            log.error(<span class="string">"根据用户手机号&#123;&#125;查询用户为空"</span>, mobile);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;(<span class="keyword">false</span>, <span class="string">"手机号不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String code = RandomUtil.randomNumbers(<span class="number">4</span>);</span><br><span class="line">        JSONObject contextJson = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        contextJson.put(<span class="string">"code"</span>, code);</span><br><span class="line">        contextJson.put(<span class="string">"product"</span>, <span class="string">"Pig4Cloud"</span>);</span><br><span class="line">        log.info(<span class="string">"短信发送请求消息中心 -&gt; 手机号:&#123;&#125; -&gt; 验证码：&#123;&#125;"</span>, mobile, code);</span><br><span class="line">        rabbitTemplate.convertAndSend(MqQueueConstant.MOBILE_CODE_QUEUE,</span><br><span class="line">                <span class="keyword">new</span> MobileMsgTemplate(</span><br><span class="line">                        mobile,</span><br><span class="line">                        contextJson.toJSONString(),</span><br><span class="line">                        CommonConstant.ALIYUN_SMS,</span><br><span class="line">                        EnumSmsChannelTemplate.LOGIN_NAME_LOGIN.getSignName(),</span><br><span class="line">                        EnumSmsChannelTemplate.LOGIN_NAME_LOGIN.getTemplate()</span><br><span class="line">                ));</span><br><span class="line">        redisTemplate.opsForValue().set(SecurityConstants.DEFAULT_CODE_KEY + mobile, code, SecurityConstants.DEFAULT_IMAGE_EXPIRE, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="树形节点工具栏"><a href="#树形节点工具栏" class="headerlink" title="树形节点工具栏"></a>树形节点工具栏</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 两层循环实现建树</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> treeNodes 传入的树节点列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends TreeNode&gt; <span class="function">List&lt;T&gt; <span class="title">bulid</span><span class="params">(List&lt;T&gt; treeNodes, Object root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;T&gt; trees = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (T treeNode : treeNodes) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (root.equals(treeNode.getParentId())) &#123;</span><br><span class="line">                trees.add(treeNode);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (T it : treeNodes) &#123;</span><br><span class="line">                <span class="keyword">if</span> (it.getParentId() == treeNode.getId()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (treeNode.getChildren() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        treeNode.setChildren(<span class="keyword">new</span> ArrayList&lt;TreeNode&gt;());</span><br><span class="line">                    &#125;</span><br><span class="line">                    treeNode.add(it);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> trees;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用递归方法建树</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> treeNodes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends TreeNode&gt; <span class="function">List&lt;T&gt; <span class="title">buildByRecursive</span><span class="params">(List&lt;T&gt; treeNodes, Object root)</span> </span>&#123;</span><br><span class="line">        List&lt;T&gt; trees = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">        <span class="keyword">for</span> (T treeNode : treeNodes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.equals(treeNode.getParentId())) &#123;</span><br><span class="line">                trees.add(findChildren(treeNode, treeNodes));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> trees;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归查找子节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> treeNodes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends TreeNode&gt; <span class="function">T <span class="title">findChildren</span><span class="params">(T treeNode, List&lt;T&gt; treeNodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (T it : treeNodes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (treeNode.getId() == it.getParentId()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (treeNode.getChildren() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    treeNode.setChildren(<span class="keyword">new</span> ArrayList&lt;TreeNode&gt;());</span><br><span class="line">                &#125;</span><br><span class="line">                treeNode.add(findChildren(it, treeNodes));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> treeNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过sysMenu创建树形节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menus</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;MenuTree&gt; <span class="title">bulidTree</span><span class="params">(List&lt;SysMenu&gt; menus, <span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">        List&lt;MenuTree&gt; trees = <span class="keyword">new</span> ArrayList&lt;MenuTree&gt;();</span><br><span class="line">        MenuTree node;</span><br><span class="line">        <span class="keyword">for</span> (SysMenu menu : menus) &#123;</span><br><span class="line">            node = <span class="keyword">new</span> MenuTree();</span><br><span class="line">            node.setId(menu.getMenuId());</span><br><span class="line">            node.setParentId(menu.getParentId());</span><br><span class="line">            node.setName(menu.getName());</span><br><span class="line">            node.setUrl(menu.getUrl());</span><br><span class="line">            node.setPath(menu.getPath());</span><br><span class="line">            node.setCode(menu.getPermission());</span><br><span class="line">            node.setLabel(menu.getName());</span><br><span class="line">            node.setComponent(menu.getComponent());</span><br><span class="line">            node.setIcon(menu.getIcon());</span><br><span class="line">            trees.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> TreeUtil.bulid(trees, root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成avue模板类"><a href="#生成avue模板类" class="headerlink" title="生成avue模板类"></a>生成avue模板类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigResourcesGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String outputDir = <span class="string">"/Users/lengleng/work/temp"</span>;</span><br><span class="line">        <span class="keyword">final</span> String viewOutputDir = outputDir + <span class="string">"/view/"</span>;</span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        gc.setOutputDir(outputDir);</span><br><span class="line">        gc.setFileOverride(<span class="keyword">true</span>);</span><br><span class="line">        gc.setActiveRecord(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// XML 二级缓存</span></span><br><span class="line">        gc.setEnableCache(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// XML ResultMap</span></span><br><span class="line">        gc.setBaseResultMap(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// XML columList</span></span><br><span class="line">        gc.setBaseColumnList(<span class="keyword">true</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">"lengleng"</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"lengleng"</span>);</span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://139.224.200.249:3309/pig?characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false"</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        <span class="comment">// strategy.setCapitalMode(true);// 全局大写命名 ORACLE 注意</span></span><br><span class="line">        strategy.setSuperControllerClass(<span class="string">"com.github.pig.common.web.BaseController"</span>);</span><br><span class="line">        <span class="comment">// 表名生成策略</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setParent(<span class="string">"com.github.pig.admin"</span>);</span><br><span class="line">        pc.setController(<span class="string">"controller"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注入自定义配置，可以在 VM 中使用 cfg.abc 设置的值</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 生成的模版路径，不存在时需要先新建</span></span><br><span class="line">        File viewDir = <span class="keyword">new</span> File(viewOutputDir);</span><br><span class="line">        <span class="keyword">if</span> (!viewDir.exists()) &#123;</span><br><span class="line">            viewDir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;FileOutConfig&gt;();</span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(<span class="string">"/templates/listvue.vue.vm"</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> getGeneratorViewPath(viewOutputDir, tableInfo, <span class="string">".vue"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成controller相关</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取配置文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 配置Props</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 读取配置文件</span></span><br><span class="line">        Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"/config/application.properties"</span>);</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            props = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面生成的文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getGeneratorViewPath</span><span class="params">(String viewOutputDir, TableInfo tableInfo, String suffixPath)</span> </span>&#123;</span><br><span class="line">        String name = StringUtils.firstToLowerCase(tableInfo.getEntityName());</span><br><span class="line">        String path = viewOutputDir + <span class="string">"/"</span> + name + <span class="string">"/index"</span>  + suffixPath;</span><br><span class="line">        File viewDir = <span class="keyword">new</span> File(path).getParentFile();</span><br><span class="line">        <span class="keyword">if</span> (!viewDir.exists()) &#123;</span><br><span class="line">            viewDir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>velocity模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $!&#123;<span class="keyword">package</span>.Controller&#125;;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> com.github.pig.common.constant.CommonConstant;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.mapper.EntityWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.plugins.Page;</span><br><span class="line"><span class="keyword">import</span> com.github.pig.common.util.Query;</span><br><span class="line"><span class="keyword">import</span> com.github.pig.common.util.R;</span><br><span class="line"><span class="keyword">import</span> $!&#123;<span class="keyword">package</span>.Entity&#125;.$!&#123;entity&#125;;</span><br><span class="line"><span class="keyword">import</span> $!&#123;<span class="keyword">package</span>.Service&#125;.$!&#123;entity&#125;Service;</span><br><span class="line">#if($!&#123;superControllerClassPackage&#125;)</span><br><span class="line"><span class="keyword">import</span> $!&#123;superControllerClassPackage&#125;;</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * $!&#123;table.comment&#125; 前端控制器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $!&#123;author&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $!&#123;date&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/$!&#123;table.entityPath&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $!</span>&#123;table.controllerName&#125; extends $!&#123;superControllerClass&#125; &#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> $!&#123;entity&#125;Service $!&#123;table.entityPath&#125;Service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通过ID查询</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id ID</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> $!&#123;entity&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> R&lt;$!&#123;entity&#125;&gt; get(<span class="meta">@PathVariable</span> Integer id) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;($!&#123;table.entityPath&#125;Service.selectById(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 分页查询信息</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> params 分页对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 分页对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/page"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page <span class="title">page</span><span class="params">(@RequestParam Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">        params.put(CommonConstant.DEL_FLAG, CommonConstant.STATUS_NORMAL);</span><br><span class="line">        <span class="keyword">return</span> $!&#123;table.entityPath&#125;Service.selectPage(<span class="keyword">new</span> Query&lt;&gt;(params), <span class="keyword">new</span> EntityWrapper&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  $!&#123;table.entityPath&#125;  实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> success/false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R&lt;Boolean&gt; <span class="title">add</span><span class="params">(@RequestBody $!&#123;entity&#125; $!&#123;table.entityPath&#125;)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;($!&#123;table.entityPath&#125;Service.insert($!&#123;table.entityPath&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> success/false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R&lt;Boolean&gt; <span class="title">delete</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">        $!&#123;entity&#125; $!&#123;table.entityPath&#125; = <span class="keyword">new</span> $!&#123;entity&#125;();</span><br><span class="line">        $!&#123;table.entityPath&#125;.setId(id);</span><br><span class="line">        $!&#123;table.entityPath&#125;.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        $!&#123;table.entityPath&#125;.setDelFlag(CommonConstant.STATUS_DEL);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;($!&#123;table.entityPath&#125;Service.updateById($!&#123;table.entityPath&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  $!&#123;table.entityPath&#125;  实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> success/false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R&lt;Boolean&gt; <span class="title">edit</span><span class="params">(@RequestBody $!&#123;entity&#125; $!&#123;table.entityPath&#125;)</span> </span>&#123;</span><br><span class="line">        $!&#123;table.entityPath&#125;.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;($!&#123;table.entityPath&#125;Service.updateById($!&#123;table.entityPath&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>在部分实现类中，我们看到了作者使用了<code>spring cache</code>相关的注解。现在我们回忆一下相关缓存注解的含义：</p><p><img src="/2018/12/12/冷冷Pig开源项目学习/9.png" alt="服务网关"></p><p><code>@Cacheable</code>:用来定义缓存的。常用到是value,key;分别用来指明缓存的名称和方法中参数，对于value你也可以使用cacheName，在查看源代码是我们可以看到：两者是指的同一个东西。</p><p><code>@CacheEvict</code>:用来清理缓存。常用有cacheNames，allEntries（默认值false）；分别代表了要清除的缓存名称和是否全部清除(true代表全部清除)。</p><p><code>@CachePut</code>:用来更新缓存，用它来注解的方法都会被执行，执行完后结果被添加到缓存中。该方法不能和@Cacheable同时在同一个方法上使用。</p><h1 id="后台跑批定时任务模块"><a href="#后台跑批定时任务模块" class="headerlink" title="后台跑批定时任务模块"></a>后台跑批定时任务模块</h1><p><code>Elastic-Job</code>是ddframe中dd-job的作业模块中分离出来的分布式弹性作业框架。去掉了和dd-job中的监控和ddframe接入规范部分。该项目基于成熟的开源产品Quartz和Zookeeper及其客户端Curator进行二次开发。主要功能如下：</p><ul><li><strong>定时任务：</strong> 基于成熟的定时任务作业框架Quartz cron表达式执行定时任务。</li><li><strong>作业注册中心：</strong> 基于Zookeeper和其客户端Curator实现的全局作业注册控制中心。用于注册，控制和协调分布式作业执行。</li><li><strong>作业分片：</strong> 将一个任务分片成为多个小任务项在多服务器上同时执行。</li><li><strong>弹性扩容缩容：</strong> 运行中的作业服务器崩溃，或新增加n台作业服务器，作业框架将在下次作业执行前重新分片，不影响当前作业执行。</li><li><strong>支持多种作业执行模式：</strong> 支持OneOff，Perpetual和SequencePerpetual三种作业模式。</li><li><strong>失效转移：</strong> 运行中的作业服务器崩溃不会导致重新分片，只会在下次作业启动时分片。启用失效转移功能可以在本次作业执行过程中，监测其他作业服务器空闲，抓取未完成的孤儿分片项执行。</li><li><strong>运行时状态收集：</strong> 监控作业运行时状态，统计最近一段时间处理的数据成功和失败数量，记录作业上次运行开始时间，结束时间和下次运行时间。</li><li><strong>作业停止，恢复和禁用：</strong>用于操作作业启停，并可以禁止某作业运行（上线时常用）。</li><li><strong>被错过执行的作业重触发：</strong>自动记录错过执行的作业，并在上次作业完成后自动触发。可参考Quartz的misfire。</li><li><strong>多线程快速处理数据：</strong>使用多线程处理抓取到的数据，提升吞吐量。</li><li><strong>幂等性：</strong>重复作业任务项判定，不重复执行已运行的作业任务项。由于开启幂等性需要监听作业运行状态，对瞬时反复运行的作业对性能有较大影响。</li><li><strong>容错处理：</strong>作业服务器与Zookeeper服务器通信失败则立即停止作业运行，防止作业注册中心将失效的分片分项配给其他作业服务器，而当前作业服务器仍在执行任务，导致重复执行。</li><li><strong>Spring支持：</strong>支持spring容器，自定义命名空间，支持占位符。</li><li><strong>运维平台：</strong>提供运维界面，可以管理作业和注册中心。</li></ul><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>作者直接使用了开源项目的配置，我顺着他的pom文件找到了这家的github，地址如下</p><p><a href="https://github.com/xjzrc/elastic-job-lite-spring-boot-starter" target="_blank" rel="noopener">https://github.com/xjzrc/elastic-job-lite-spring-boot-starter</a></p><h3 id="工作流作业配置"><a href="#工作流作业配置" class="headerlink" title="工作流作业配置"></a>工作流作业配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ElasticJobConfig</span>(cron = <span class="string">"0 0 0/1 * * ? "</span>, shardingTotalCount = <span class="number">3</span>, shardingItemParameters = <span class="string">"0=Beijing,1=Shanghai,2=Guangzhou"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigDataflowJob</span> <span class="keyword">implements</span> <span class="title">DataflowJob</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">fetchData</span><span class="params">(ShardingContext shardingContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processData</span><span class="params">(ShardingContext shardingContext, List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ElasticJobConfig</span>(cron = <span class="string">"0 0 0/1 * * ?"</span>, shardingTotalCount = <span class="number">3</span>,</span><br><span class="line">        shardingItemParameters = <span class="string">"0=pig1,1=pig2,2=pig3"</span>,</span><br><span class="line">        startedTimeoutMilliseconds = <span class="number">5000L</span>,</span><br><span class="line">        completedTimeoutMilliseconds = <span class="number">10000L</span>,</span><br><span class="line">        eventTraceRdbDataSource = <span class="string">"dataSource"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigSimpleJob</span> <span class="keyword">implements</span> <span class="title">SimpleJob</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务执行逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shardingContext 分片信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ShardingContext shardingContext)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"shardingContext:&#123;&#125;"</span>, shardingContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开源版对这个支持有限，等到拿到收费版我在做分析。</p><h1 id="消息中心"><a href="#消息中心" class="headerlink" title="消息中心"></a>消息中心</h1><p>这里的消息中心主要是集成了钉钉服务和阿里大鱼短息服务</p><h2 id="钉钉"><a href="#钉钉" class="headerlink" title="钉钉"></a>钉钉</h2><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><p>钉钉是相当简单了，只需要一个<code>webhook</code>信息就够了。</p><p><code>webhook</code>是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"sms.dingtalk"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DingTalkPropertiesConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * webhook</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String webhook;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息模板"><a href="#消息模板" class="headerlink" title="消息模板"></a>消息模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lengleng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/1/15</span></span><br><span class="line"><span class="comment"> * 钉钉消息模板</span></span><br><span class="line"><span class="comment"> * msgtype : text</span></span><br><span class="line"><span class="comment"> * text : &#123;"content":"服务: pig-upms-service 状态：UP"&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DingTalkMsgTemplate</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msgtype;</span><br><span class="line">    <span class="keyword">private</span> TextBean text;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsgtype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msgtype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsgtype</span><span class="params">(String msgtype)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msgtype = msgtype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TextBean <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextBean text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TextBean</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * content : 服务: pig-upms-service 状态：UP</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> content;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.content = content;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h3><p>使用队列时时监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = MqQueueConstant.DINGTALK_SERVICE_STATUS_CHANGE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DingTalkServiceChangeReceiveListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DingTalkMessageHandler dingTalkMessageHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"消息中心接收到钉钉发送请求-&gt; 内容：&#123;&#125; "</span>, text);</span><br><span class="line">        dingTalkMessageHandler.process(text);</span><br><span class="line">        <span class="keyword">long</span> useTime = System.currentTimeMillis() - startTime;</span><br><span class="line">        log.info(<span class="string">"调用 钉钉网关处理完毕，耗时 &#123;&#125;毫秒"</span>, useTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><p>使用队列发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DingTalkMessageHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DingTalkPropertiesConfig dingTalkPropertiesConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        String webhook = dingTalkPropertiesConfig.getWebhook();</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(webhook)) &#123;</span><br><span class="line">            log.error(<span class="string">"钉钉配置错误，webhook为空"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DingTalkMsgTemplate dingTalkMsgTemplate = <span class="keyword">new</span> DingTalkMsgTemplate();</span><br><span class="line">        dingTalkMsgTemplate.setMsgtype(<span class="string">"text"</span>);</span><br><span class="line">        DingTalkMsgTemplate.TextBean textBean = <span class="keyword">new</span> DingTalkMsgTemplate.TextBean();</span><br><span class="line">        textBean.setContent(text);</span><br><span class="line">        dingTalkMsgTemplate.setText(textBean);</span><br><span class="line">        String result = HttpUtil.post(webhook, JSONObject.toJSONString(dingTalkMsgTemplate));</span><br><span class="line">        log.info(<span class="string">"钉钉提醒成功,报文响应:&#123;&#125;"</span>, result);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="阿里大鱼短息服务"><a href="#阿里大鱼短息服务" class="headerlink" title="阿里大鱼短息服务"></a>阿里大鱼短息服务</h2><h3 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnExpression</span>(<span class="string">"!'$&#123;sms.aliyun&#125;'.isEmpty()"</span>)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"sms.aliyun"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsAliyunPropertiesConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用秘钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信模板配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; channels;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听-1"><a href="#监听-1" class="headerlink" title="监听"></a>监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = MqQueueConstant.MOBILE_SERVICE_STATUS_CHANGE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MobileServiceChangeReceiveListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, SmsMessageHandler&gt; messageHandlerMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(MobileMsgTemplate mobileMsgTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"消息中心接收到短信发送请求-&gt; 手机号：&#123;&#125; -&gt; 信息体：&#123;&#125; "</span>, mobileMsgTemplate.getMobile(), mobileMsgTemplate.getContext());</span><br><span class="line">        String channel = mobileMsgTemplate.getChannel();</span><br><span class="line">        SmsMessageHandler messageHandler = messageHandlerMap.get(channel);</span><br><span class="line">        <span class="keyword">if</span> (messageHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.error(<span class="string">"没有找到指定的路由通道，不进行发送处理完毕！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        messageHandler.execute(mobileMsgTemplate);</span><br><span class="line">        <span class="keyword">long</span> useTime = System.currentTimeMillis() - startTime;</span><br><span class="line">        log.info(<span class="string">"调用 &#123;&#125; 短信网关处理完毕，耗时 &#123;&#125;毫秒"</span>, mobileMsgTemplate.getType(), useTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送-1"><a href="#发送-1" class="headerlink" title="发送"></a>发送</h3><p>不错的模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span>(CommonConstant.ALIYUN_SMS)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsAliyunMessageHandler</span> <span class="keyword">extends</span> <span class="title">AbstractMessageHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsAliyunPropertiesConfig smsAliyunPropertiesConfig;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRODUCT = <span class="string">"Dysmsapi"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOMAIN = <span class="string">"dysmsapi.aliyuncs.com"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据校验</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobileMsgTemplate 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(MobileMsgTemplate mobileMsgTemplate)</span> </span>&#123;</span><br><span class="line">        Assert.isBlank(mobileMsgTemplate.getMobile(), <span class="string">"手机号不能为空"</span>);</span><br><span class="line">        Assert.isBlank(mobileMsgTemplate.getContext(), <span class="string">"短信内容不能为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobileMsgTemplate 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(MobileMsgTemplate mobileMsgTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可自助调整超时时间</span></span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化acsClient,暂不支持region化</span></span><br><span class="line">        IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, smsAliyunPropertiesConfig.getAccessKey(), smsAliyunPropertiesConfig.getSecretKey());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DefaultProfile.addEndpoint(<span class="string">"cn-hou"</span>, <span class="string">"cn-hangzhou"</span>, PRODUCT, DOMAIN);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">            log.error(<span class="string">"初始化SDK 异常"</span>, e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        IAcsClient acsClient = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装请求对象-具体描述见控制台-文档部分内容</span></span><br><span class="line">        SendSmsRequest request = <span class="keyword">new</span> SendSmsRequest();</span><br><span class="line">        <span class="comment">//必填:待发送手机号</span></span><br><span class="line">        request.setPhoneNumbers(mobileMsgTemplate.getMobile());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//必填:短信签名-可在短信控制台中找到</span></span><br><span class="line">        request.setSignName(mobileMsgTemplate.getSignName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//必填:短信模板-可在短信控制台中找到</span></span><br><span class="line">        request.setTemplateCode(smsAliyunPropertiesConfig.getChannels().get(mobileMsgTemplate.getTemplate()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可选:模板中的变量替换JSON串,如模板内容为"亲爱的$&#123;name&#125;,您的验证码为$&#123;code&#125;"</span></span><br><span class="line">        request.setTemplateParam(mobileMsgTemplate.getContext());</span><br><span class="line">        request.setOutId(mobileMsgTemplate.getMobile());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hint 此处可能会抛出异常，注意catch</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);</span><br><span class="line">            log.info(<span class="string">"短信发送完毕，手机号：&#123;&#125;，返回状态：&#123;&#125;"</span>, mobileMsgTemplate.getMobile(), sendSmsResponse.getCode());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">            log.error(<span class="string">"发送异常"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobileMsgTemplate 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fail</span><span class="params">(MobileMsgTemplate mobileMsgTemplate)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">"短信发送失败 -&gt; 网关：&#123;&#125; -&gt; 手机号：&#123;&#125;"</span>, mobileMsgTemplate.getType(), mobileMsgTemplate.getMobile());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="资源认证服务器-（单点登陆功能）"><a href="#资源认证服务器-（单点登陆功能）" class="headerlink" title="资源认证服务器 （单点登陆功能）"></a>资源认证服务器 （单点登陆功能）</h1><p>由于作者在认证中心使用了spring security oauth框架，所以需要在微服务的客户端实现一个资源认证服务器，来完成SSO需求。</p><h2 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h2><p>暴露监控信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfiguration</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableOAuth</span>2Sso</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigSsoClientDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PigSsoClientDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="监控模块"><a href="#监控模块" class="headerlink" title="监控模块"></a>监控模块</h1><h2 id="springboot-admin配置"><a href="#springboot-admin配置" class="headerlink" title="springboot admin配置"></a>springboot admin配置</h2><p><code>RemindingNotifier</code>会在应用上线或宕掉的时候发送提醒，也就是把<code>notifications</code>发送给其他的<code>notifier</code>，notifier的实现很有意思，不深究了，从类关系可以知道，我们可以以这么几种方式发送notifications：Pagerduty、Hipchat 、Slack 、Mail、 Reminder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifierConfig</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@Primary</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RemindingNotifier <span class="title">remindingNotifier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            RemindingNotifier notifier = <span class="keyword">new</span> RemindingNotifier(filteringNotifier(loggerNotifier()));</span><br><span class="line">            notifier.setReminderPeriod(TimeUnit.SECONDS.toMillis(<span class="number">10</span>));</span><br><span class="line">            <span class="keyword">return</span> notifier;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1_000L</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            remindingNotifier().sendReminders();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FilteringNotifier <span class="title">filteringNotifier</span><span class="params">(Notifier delegate)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FilteringNotifier(delegate);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LoggingNotifier <span class="title">loggerNotifier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LoggingNotifier();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="短信服务下线通知"><a href="#短信服务下线通知" class="headerlink" title="短信服务下线通知"></a>短信服务下线通知</h3><p>继承<code>AbstractStatusChangeNotifier</code>，将短信服务注册到<code>spring boot admin</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatusChangeNotifier</span> <span class="keyword">extends</span> <span class="title">AbstractStatusChangeNotifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="keyword">private</span> MonitorPropertiesConfig monitorMobilePropertiesConfig;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StatusChangeNotifier</span><span class="params">(MonitorPropertiesConfig monitorMobilePropertiesConfig, RabbitTemplate rabbitTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">        <span class="keyword">this</span>.monitorMobilePropertiesConfig = monitorMobilePropertiesConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event 事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doNotify</span><span class="params">(ClientApplicationEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ClientApplicationStatusChangedEvent) &#123;</span><br><span class="line">            log.info(<span class="string">"Application &#123;&#125; (&#123;&#125;) is &#123;&#125;"</span>, event.getApplication().getName(),</span><br><span class="line">                    event.getApplication().getId(), ((ClientApplicationStatusChangedEvent) event).getTo().getStatus());</span><br><span class="line">            String text = String.format(<span class="string">"应用:%s 服务ID:%s 状态改变为：%s，时间：%s"</span></span><br><span class="line">                    , event.getApplication().getName()</span><br><span class="line">                    , event.getApplication().getId()</span><br><span class="line">                    , ((ClientApplicationStatusChangedEvent) event).getTo().getStatus()</span><br><span class="line">                    , DateUtil.date(event.getTimestamp()).toString());</span><br><span class="line"></span><br><span class="line">            JSONObject contextJson = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            contextJson.put(<span class="string">"name"</span>, event.getApplication().getName());</span><br><span class="line">            contextJson.put(<span class="string">"seid"</span>, event.getApplication().getId());</span><br><span class="line">            contextJson.put(<span class="string">"time"</span>, DateUtil.date(event.getTimestamp()).toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开启短信通知</span></span><br><span class="line">            <span class="keyword">if</span> (monitorMobilePropertiesConfig.getMobile().getEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">"开始短信通知，内容：&#123;&#125;"</span>, text);</span><br><span class="line">                rabbitTemplate.convertAndSend(MqQueueConstant.MOBILE_SERVICE_STATUS_CHANGE,</span><br><span class="line">                        <span class="keyword">new</span> MobileMsgTemplate(</span><br><span class="line">                                CollUtil.join(monitorMobilePropertiesConfig.getMobile().getMobiles(), <span class="string">","</span>),</span><br><span class="line">                                contextJson.toJSONString(),</span><br><span class="line">                                CommonConstant.ALIYUN_SMS,</span><br><span class="line">                                EnumSmsChannelTemplate.SERVICE_STATUS_CHANGE.getSignName(),</span><br><span class="line">                                EnumSmsChannelTemplate.SERVICE_STATUS_CHANGE.getTemplate()</span><br><span class="line">                        ));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (monitorMobilePropertiesConfig.getDingTalk().getEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">"开始钉钉通知，内容：&#123;&#125;"</span>, text);</span><br><span class="line">                rabbitTemplate.convertAndSend(MqQueueConstant.DINGTALK_SERVICE_STATUS_CHANGE, text);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">"Application &#123;&#125; (&#123;&#125;) &#123;&#125;"</span>, event.getApplication().getName(),</span><br><span class="line">                    event.getApplication().getId(), event.getType());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="zipkin-链路追踪"><a href="#zipkin-链路追踪" class="headerlink" title="zipkin 链路追踪"></a>zipkin 链路追踪</h1><p>由于zipkin是侵入式，因此这部分组件没有代码，只有相关依赖。下面分享一下作者的yaml</p><h2 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">5003</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># datasoure默认使用JDBC</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">ENC(gc16brBHPNq27HsjaULgKGq00Rz6ZUji)</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3309/pig?characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zipkin:</span></span><br><span class="line"><span class="attr">  collector:</span></span><br><span class="line"><span class="attr">    rabbitmq:</span></span><br><span class="line"><span class="attr">      addresses:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5682</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">lengleng</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">pig</span></span><br><span class="line"><span class="attr">      queue:</span> <span class="string">zipkin</span></span><br><span class="line"><span class="attr">  storage:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><h2 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  port:</span> <span class="number">5002</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">zipkin:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  collector:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    rabbitmq:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      addresses:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5682</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      password:</span> <span class="string">lengleng</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      username:</span> <span class="string">pig</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      queue:</span> <span class="string">zipkin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  storage:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    type:</span> <span class="string">elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    elasticsearch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      hosts:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9200</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      cluster:</span> <span class="string">elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      index:</span> <span class="string">zipkin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      max-requests:</span> <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      index-shards:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      index-replicas:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="续1s时间"><a href="#续1s时间" class="headerlink" title="续1s时间"></a>续1s时间</h1><p>全片结束，觉得我写的不错？想要了解更多精彩新姿势？赶快打开我的👉个人<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">博客</a> 👈吧！</p><p>谢谢你那么可爱，还一直关注着我~❤😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看到一个有趣的开源项目pig，主要的技术点在认证授权中心，spring security oauth，zuul网关实现，Elastic-Job定时任务，趁着刚刚入门微服务，赶快写个博客分析一下。此篇文章主要用于个人备忘。如果有不对，请批评。😭&lt;/p&gt;
&lt;p&gt;由于每个模
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="源码" scheme="https://tengshe789.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
      <category term="学好分布式架构" scheme="https://tengshe789.github.io/tags/%E5%AD%A6%E5%A5%BD%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>开源项目Cloud-Admin分析与学习</title>
    <link href="https://tengshe789.github.io/2018/12/10/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AECloud-Admin%E5%88%86%E6%9E%90%E4%B8%8E%E5%AD%A6%E4%B9%A0/"/>
    <id>https://tengshe789.github.io/2018/12/10/开源项目Cloud-Admin分析与学习/</id>
    <published>2018-12-10T02:39:36.000Z</published>
    <updated>2019-11-20T13:39:41.269Z</updated>
    
    <content type="html"><![CDATA[<p>前一段时间在<a href="https://blog.tengshe789.tech/2018/12/02/%E6%84%9F%E6%80%A7%E8%AE%A4%E8%AF%86jwt/#more" target="_blank" rel="noopener">“感性认识JWT”</a>一博文中分享了，很火的开源项目<code>Cloud-Admin</code>中鉴权中心和网关的实现。今天再来看看其他各个部分源码</p><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>老规矩，放开源项目地址：<a href="https://gitee.com/minull/ace-security" target="_blank" rel="noopener">https://gitee.com/minull/ace-security</a></p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="/2018/12/10/开源项目Cloud-Admin分析与学习/5.png" alt="1543763543823"></p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>下面是官方提供的架构模型。</p><p><img src="/2018/12/10/开源项目Cloud-Admin分析与学习/6.png" alt="image.png"></p><h3 id="项目的运行步骤"><a href="#项目的运行步骤" class="headerlink" title="项目的运行步骤"></a>项目的运行步骤</h3><ul><li>先启动rabbitmq、redis、mysql以及consul注册中心</li><li>运行数据库脚本：依次运行数据库：ace-admin/db/init.sql、ace-auth-server/db/init.sql、ace-trace</li><li>修改配置数据库配置：ace-admin/src/main/resources/application.yml、ace-gate/src/main/resources/application.yml</li><li>按<code>顺序</code>运行main类：CenterBootstrap（ace-center）、AuthBootstrap（ace-auth-server）、AdminBootstrap（ace-admin）、GatewayServerBootstrap（ace-gateway-v2）</li></ul><h2 id="Admin模块"><a href="#Admin模块" class="headerlink" title="Admin模块"></a>Admin模块</h2><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>先看看数据库设计，admin模块负责所有权限的管理。第一张表<code>base_element</code>，定义了各个资源的code，类型，uri，每一个特定资源对应一种请求路径，如图👇</p><p><img src="/2018/12/10/开源项目Cloud-Admin分析与学习/1.png" alt="base_element"></p><p>第二张，<code>base_group</code>定义了角色和请求路径的关系。👇</p><p><img src="/2018/12/10/开源项目Cloud-Admin分析与学习/2.png" alt="base_element"></p><p>第三张，<code>base_group_type</code>定义了类型👇</p><p><img src="/2018/12/10/开源项目Cloud-Admin分析与学习/3.png" alt="base_element"></p><p>第四张，<code>base_menu</code>定义了菜单👇</p><p><img src="/2018/12/10/开源项目Cloud-Admin分析与学习/4.png" alt="base_element"></p><p>第五张，记录了网关日志相关信息</p><p><img src="/2018/12/10/开源项目Cloud-Admin分析与学习/5.png" alt="base_element"></p><p>第六张，用户表</p><p><img src="/2018/12/10/开源项目Cloud-Admin分析与学习/6.png" alt="base_element"></p><h3 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h3><p>接口这部分作者写的有些乱，将很多业务逻辑的有关代码放到接口层了（吐槽）。这部分代码没什么好说的，就是根据上面的数据库<code>CRUD</code>。接口的路径分为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/api/user/validate</span><br><span class="line">/element/**"</span><br><span class="line">/gateLog/**"</span><br><span class="line">/group/**"</span><br><span class="line">/groupType/**"</span><br><span class="line">/menu/**"</span><br><span class="line">/user/**"</span><br><span class="line">/api/permissions"</span><br><span class="line">/api/user/un/**"</span><br></pre></td></tr></table></figure><p>这几类，并且走每一层都会走鉴权中心来鉴别，具体逻辑是使用springboot的<code>addInterceptors()</code>方法添加两层拦截器组成一个拦截器链，如下👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(getServiceAuthRestInterceptor()).</span><br><span class="line">                addPathPatterns(getIncludePathPatterns()).addPathPatterns(<span class="string">"/api/user/validate"</span>);</span><br><span class="line">        registry.addInterceptor(getUserAuthRestInterceptor()).</span><br><span class="line">                addPathPatterns(getIncludePathPatterns());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第一层拦截器是鉴权中心的<code>ServiceAuthRestInterceptor</code>拦截器，判断访问的客户端是否有权限访问；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一层拦截器 </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        <span class="comment">// 配置该注解，说明不进行服务拦截</span></span><br><span class="line">        IgnoreClientToken annotation = handlerMethod.getBeanType().getAnnotation(IgnoreClientToken.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">            annotation = handlerMethod.getMethodAnnotation(IgnoreClientToken.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(annotation!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String token = request.getHeader(serviceAuthConfig.getTokenHeader());</span><br><span class="line">        IJWTInfo infoFromToken = serviceAuthUtil.getInfoFromToken(token);</span><br><span class="line">        String uniqueName = infoFromToken.getUniqueName();</span><br><span class="line">        <span class="keyword">for</span>(String client:serviceAuthUtil.getAllowedClient())&#123;</span><br><span class="line">            <span class="keyword">if</span>(client.equals(uniqueName))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClientForbiddenException(<span class="string">"Client is Forbidden!"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第二层拦截器是鉴权中心的<code>UserAuthRestInterceptor</code>拦截器，拦截非法用户。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        <span class="comment">// 配置该注解，说明不进行用户拦截</span></span><br><span class="line">        IgnoreUserToken annotation = handlerMethod.getBeanType().getAnnotation(IgnoreUserToken.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">            annotation = handlerMethod.getMethodAnnotation(IgnoreUserToken.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler);</span><br><span class="line">        &#125;</span><br><span class="line">        String token = request.getHeader(userAuthConfig.getTokenHeader());</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(token)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.getCookies() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Cookie cookie : request.getCookies()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cookie.getName().equals(userAuthConfig.getTokenHeader())) &#123;</span><br><span class="line">                        token = cookie.getValue();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        IJWTInfo infoFromToken = userAuthUtil.getInfoFromToken(token);</span><br><span class="line">        BaseContextHandler.setUsername(infoFromToken.getUniqueName());</span><br><span class="line">        BaseContextHandler.setName(infoFromToken.getName());</span><br><span class="line">        BaseContextHandler.setUserID(infoFromToken.getId());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="缓存中心"><a href="#缓存中心" class="headerlink" title="缓存中心"></a>缓存中心</h2><p>在上面的admin模块中，作者在user接口上，使用了自定义的缓存注解<code>@Cache</code>，用来保存用户的权限信息，减小数据库的访问压力👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cache</span>(key=<span class="string">"permission"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/permissions"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function">List&lt;PermissionInfo&gt; <span class="title">getAllPermission</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> permissionService.getAllPermission();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cache</span>(key=<span class="string">"permission:u&#123;1&#125;"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/un/&#123;username&#125;/permissions"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">List&lt;PermissionInfo&gt; <span class="title">getPermissionByUsername</span><span class="params">(@PathVariable(<span class="string">"username"</span>)</span> String username)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> permissionService.getPermissionByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/validate"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">UserInfo <span class="title">validate</span><span class="params">(@RequestBody Map&lt;String,String&gt; body)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> permissionService.validate(body.get(<span class="string">"username"</span>),body.get(<span class="string">"password"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们就分析一下缓存中心的设计。</p><h3 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="/2018/12/10/开源项目Cloud-Admin分析与学习/7.png" alt="base_element"></p><p>缓存中心是作者通过maven方式添加的，并没有通过直接项目代码展现。因此我使用<code>idea</code>的反编码工具进行分析</p><h4 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h4><p>入口为<code>EnableAceCache</code>，开启这个就可以自动配置缓存相关事项</p><h3 id="缓存实体"><a href="#缓存实体" class="headerlink" title="缓存实体"></a>缓存实体</h3><p>先看缓存实体，作者定义了key，描述信息desc，以及过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String key = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> String desc = <span class="string">""</span>;</span><br><span class="line">    <span class="meta">@JsonFormat</span>(</span><br><span class="line">        timezone = <span class="string">"GMT+8"</span>,</span><br><span class="line">        pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> Date expireTime;</span><br><span class="line">    ..................&#125;</span><br></pre></td></tr></table></figure><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><p>一共有两个配置</p><p><img src="/2018/12/10/开源项目Cloud-Admin分析与学习/8.png" alt="base_element"></p><h4 id="RedisConfig"><a href="#RedisConfig" class="headerlink" title="RedisConfig"></a>RedisConfig</h4><p>先看<code>RedisConfig</code>，使用<code>@PostConstruct</code>注解，意思是会在服务器加载<code>Servlet</code>的时候，将服务端<code>yml</code>中有关<code>redis</code>的配置加载到<code>JedisPool</code>中，这个方法只会被服务器调用一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line">    <span class="keyword">private</span> JedisPool pool;</span><br><span class="line">    <span class="keyword">private</span> String maxActive;</span><br><span class="line">    <span class="keyword">private</span> String maxIdle;</span><br><span class="line">    <span class="keyword">private</span> String maxWait;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String timeout;</span><br><span class="line">    <span class="keyword">private</span> String database;</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line">    <span class="keyword">private</span> String enable;</span><br><span class="line">    <span class="keyword">private</span> String sysName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PropertiesLoaderUtils prop = <span class="keyword">new</span> PropertiesLoaderUtils(<span class="keyword">new</span> String[]&#123;<span class="string">"application.properties"</span>&#125;);</span><br><span class="line">        <span class="keyword">this</span>.host = prop.getProperty(<span class="string">"redis.host"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(<span class="keyword">this</span>.host)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.host = <span class="keyword">this</span>.env.getProperty(<span class="string">"redis.host"</span>);</span><br><span class="line">            <span class="keyword">this</span>.maxActive = <span class="keyword">this</span>.env.getProperty(<span class="string">"redis.pool.maxActive"</span>);</span><br><span class="line">            <span class="keyword">this</span>.maxIdle = <span class="keyword">this</span>.env.getProperty(<span class="string">"redis.pool.maxIdle"</span>);</span><br><span class="line">            <span class="keyword">this</span>.maxWait = <span class="keyword">this</span>.env.getProperty(<span class="string">"redis.pool.maxWait"</span>);</span><br><span class="line">            <span class="keyword">this</span>.password = <span class="keyword">this</span>.env.getProperty(<span class="string">"redis.password"</span>);</span><br><span class="line">            <span class="keyword">this</span>.timeout = <span class="keyword">this</span>.env.getProperty(<span class="string">"redis.timeout"</span>);</span><br><span class="line">            <span class="keyword">this</span>.database = <span class="keyword">this</span>.env.getProperty(<span class="string">"redis.database"</span>);</span><br><span class="line">            <span class="keyword">this</span>.port = <span class="keyword">this</span>.env.getProperty(<span class="string">"redis.port"</span>);</span><br><span class="line">            <span class="keyword">this</span>.sysName = <span class="keyword">this</span>.env.getProperty(<span class="string">"redis.sysName"</span>);</span><br><span class="line">            <span class="keyword">this</span>.enable = <span class="keyword">this</span>.env.getProperty(<span class="string">"redis.enable"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.maxActive = prop.getProperty(<span class="string">"redis.pool.maxActive"</span>);</span><br><span class="line">            <span class="keyword">this</span>.maxIdle = prop.getProperty(<span class="string">"redis.pool.maxIdle"</span>);</span><br><span class="line">            <span class="keyword">this</span>.maxWait = prop.getProperty(<span class="string">"redis.pool.maxWait"</span>);</span><br><span class="line">            <span class="keyword">this</span>.password = prop.getProperty(<span class="string">"redis.password"</span>);</span><br><span class="line">            <span class="keyword">this</span>.timeout = prop.getProperty(<span class="string">"redis.timeout"</span>);</span><br><span class="line">            <span class="keyword">this</span>.database = prop.getProperty(<span class="string">"redis.database"</span>);</span><br><span class="line">            <span class="keyword">this</span>.port = prop.getProperty(<span class="string">"redis.port"</span>);</span><br><span class="line">            <span class="keyword">this</span>.sysName = prop.getProperty(<span class="string">"redis.sysName"</span>);</span><br><span class="line">            <span class="keyword">this</span>.enable = prop.getProperty(<span class="string">"redis.enable"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisPoolConfig <span class="title">constructJedisPoolConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(Integer.parseInt(<span class="keyword">this</span>.maxActive));</span><br><span class="line">        config.setMaxIdle(Integer.parseInt(<span class="keyword">this</span>.maxIdle));</span><br><span class="line">        config.setMaxWaitMillis((<span class="keyword">long</span>)Integer.parseInt(<span class="keyword">this</span>.maxWait));</span><br><span class="line">        config.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(</span><br><span class="line">        name = &#123;<span class="string">"pool"</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisPool <span class="title">constructJedisPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String ip = <span class="keyword">this</span>.host;</span><br><span class="line">        <span class="keyword">int</span> port = Integer.parseInt(<span class="keyword">this</span>.port);</span><br><span class="line">        String password = <span class="keyword">this</span>.password;</span><br><span class="line">        <span class="keyword">int</span> timeout = Integer.parseInt(<span class="keyword">this</span>.timeout);</span><br><span class="line">        <span class="keyword">int</span> database = Integer.parseInt(<span class="keyword">this</span>.database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == <span class="keyword">this</span>.pool) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(password)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.pool = <span class="keyword">new</span> JedisPool(<span class="keyword">this</span>.constructJedisPoolConfig(), ip, port, timeout);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.pool = <span class="keyword">new</span> JedisPool(<span class="keyword">this</span>.constructJedisPoolConfig(), ip, port, timeout, password, database);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.pool;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="CacheWebConfig"><a href="#CacheWebConfig" class="headerlink" title="CacheWebConfig"></a>CacheWebConfig</h4><p>第二个配置，就是使用<code>springboot</code>拦截器，将作者自己写的缓存管理中心视图界面展示出来（这个操作太神奇了，第一次看到）👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/static/cache/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/static/"</span>&#125;);</span><br><span class="line">        <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/12/10/开源项目Cloud-Admin分析与学习/9.png" alt="base_element"></p><h3 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h3><h4 id="RedisServiceImpl和CacheRedis"><a href="#RedisServiceImpl和CacheRedis" class="headerlink" title="RedisServiceImpl和CacheRedis"></a>RedisServiceImpl和CacheRedis</h4><p><code>RedisServiceImpl</code>使用了<code>JedisPool</code>那几个方法实现了增删改查操作，代码省略。</p><p><code>CacheRedis</code>则<code>RedisServiceImpl</code>是加入一些增删改查逻辑，譬如什么是什么设置缓存。</p><h4 id="切面加入缓存"><a href="#切面加入缓存" class="headerlink" title="切面加入缓存"></a>切面加入缓存</h4><h5 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h5><p>核心方法<code>interceptor</code>如下，使用<code>ProceedingJoinPoint</code>拿到被<code>@Cache</code>标记的的方法中的参数，用<code>getKey（）</code>方法拿到具体缓存的key，使用<code>CacheRedis的get()</code>方法查找对应的key，如果key找不到则用<code>CacheRedis的set()</code>方法添加新的缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"aspect()&amp;&amp;@annotation(anno)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">interceptor</span><span class="params">(ProceedingJoinPoint invocation, Cache anno)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature)invocation.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">        Object[] arguments = invocation.getArgs();</span><br><span class="line">        String key = <span class="string">""</span>;</span><br><span class="line">        String value = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            key = <span class="keyword">this</span>.getKey(anno, parameterTypes, arguments);</span><br><span class="line">            value = <span class="keyword">this</span>.cacheAPI.get(key);</span><br><span class="line">            Type returnType = method.getGenericReturnType();</span><br><span class="line">            result = <span class="keyword">this</span>.getResult(anno, result, value, returnType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var14) &#123;</span><br><span class="line">            <span class="keyword">this</span>.log.error(<span class="string">"获取缓存失败："</span> + key, var14);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">                result = invocation.proceed();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(key)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.cacheAPI.set(key, result, anno.expire());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="取得key"><a href="#取得key" class="headerlink" title="取得key"></a>取得key</h5><p><code>getKey（）</code>方法的逻辑为，判断key生成器是否是默认生成器（可以使用多种生成器），然后根据默认生成器的规则生成一个key。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getKey</span><span class="params">(Cache anno, Class&lt;?&gt;[] parameterTypes, Object[] arguments)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        String generatorClsName = anno.generator().getName();</span><br><span class="line">        IKeyGenerator keyGenerator = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (anno.generator().equals(DefaultKeyGenerator.class)) &#123;</span><br><span class="line">            keyGenerator = <span class="keyword">this</span>.keyParser;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.generatorMap.contains(generatorClsName)) &#123;</span><br><span class="line">            keyGenerator = (IKeyGenerator)<span class="keyword">this</span>.generatorMap.get(generatorClsName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            keyGenerator = (IKeyGenerator)anno.generator().newInstance();</span><br><span class="line">            <span class="keyword">this</span>.generatorMap.put(generatorClsName, keyGenerator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String key = keyGenerator.getKey(anno.key(), anno.scope(), parameterTypes, arguments);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="key生成器"><a href="#key生成器" class="headerlink" title="key生成器"></a>key生成器</h5><p>默认key生成器的代码如下（生成规则我看不懂😭），</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buildKey</span><span class="params">(String key, CacheScope scope, Class&lt;?&gt;[] parameterTypes, Object[] arguments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isFirst = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (key.indexOf(<span class="string">"&#123;"</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            key = key.replace(<span class="string">"&#123;"</span>, <span class="string">":&#123;"</span>);</span><br><span class="line">            Pattern pattern = Pattern.compile(<span class="string">"\\d+\\.?[\\w]*"</span>);</span><br><span class="line">            Matcher matcher = pattern.matcher(key);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">                String tmp = matcher.group();</span><br><span class="line">                String[] express = matcher.group().split(<span class="string">"\\."</span>);</span><br><span class="line">                String i = express[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> index = Integer.parseInt(i) - <span class="number">1</span>;</span><br><span class="line">                Object value = arguments[index];</span><br><span class="line">                <span class="keyword">if</span> (parameterTypes[index].isAssignableFrom(List.class)) &#123;</span><br><span class="line">                    List result = (List)arguments[index];</span><br><span class="line">                    value = result.get(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (value == <span class="keyword">null</span> || value.equals(<span class="string">"null"</span>)) &#123;</span><br><span class="line">                    value = <span class="string">""</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (express.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    String field = express[<span class="number">1</span>];</span><br><span class="line">                    value = ReflectionUtils.getFieldValue(value, field);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isFirst) &#123;</span><br><span class="line">                    key = key.replace(<span class="string">"&#123;"</span> + tmp + <span class="string">"&#125;"</span>, value.toString());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    key = key.replace(<span class="string">"&#123;"</span> + tmp + <span class="string">"&#125;"</span>, <span class="string">"_"</span> + value.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="key解析"><a href="#key解析" class="headerlink" title="key解析"></a>key解析</h5><p>因为作者的key生成器抖了很多机灵，因此，拿到key以后，要将生成key和value之前的数值找到才能进行比对，下面时解析key的代码👇大概逻辑是根据不同的value类型返回json</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">parse</span><span class="params">(String value, Type type, Class... origins)</span> </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">            ParameterizedType parameterizedType = (ParameterizedType)type;</span><br><span class="line">            Type rawType = parameterizedType.getRawType();</span><br><span class="line">            <span class="keyword">if</span> (((Class)rawType).isAssignableFrom(List.class)) &#123;</span><br><span class="line">                result = JSON.parseArray(value, (Class)parameterizedType.getActualTypeArguments()[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (origins == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result = JSON.parseObject(value, (Class)type);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = JSON.parseObject(value, origins[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="切面清除缓存"><a href="#切面清除缓存" class="headerlink" title="切面清除缓存"></a>切面清除缓存</h4><p>大概意思和上面差不多，只要服务端上加入<code>@CacheClear</code>注解就可以清除对应缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"aspect()&amp;&amp;@annotation(anno)"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">interceptor</span><span class="params">(ProceedingJoinPoint invocation, CacheClear anno)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">       MethodSignature signature = (MethodSignature)invocation.getSignature();</span><br><span class="line">       Method method = signature.getMethod();</span><br><span class="line">       Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">       Object[] arguments = invocation.getArgs();</span><br><span class="line">       String key = <span class="string">""</span>;</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isNotBlank(anno.key())) &#123;</span><br><span class="line">           key = <span class="keyword">this</span>.getKey(anno, anno.key(), CacheScope.application, parameterTypes, arguments);</span><br><span class="line">           <span class="keyword">this</span>.cacheAPI.remove(key);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.isNotBlank(anno.pre())) &#123;</span><br><span class="line">           key = <span class="keyword">this</span>.getKey(anno, anno.pre(), CacheScope.application, parameterTypes, arguments);</span><br><span class="line">           <span class="keyword">this</span>.cacheAPI.removeByPre(key);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (anno.keys().length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">           String[] arr$ = anno.keys();</span><br><span class="line">           <span class="keyword">int</span> len$ = arr$.length;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i$ = <span class="number">0</span>; i$ &lt; len$; ++i$) &#123;</span><br><span class="line">               String tmp = arr$[i$];</span><br><span class="line">               tmp = <span class="keyword">this</span>.getKey(anno, tmp, CacheScope.application, parameterTypes, arguments);</span><br><span class="line">               <span class="keyword">this</span>.cacheAPI.removeByPre(tmp);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前一段时间在&lt;a href=&quot;https://blog.tengshe789.tech/2018/12/02/%E6%84%9F%E6%80%A7%E8%AE%A4%E8%AF%86jwt/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“感性认
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="源码" scheme="https://tengshe789.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="学好分布式架构" scheme="https://tengshe789.github.io/tags/%E5%AD%A6%E5%A5%BD%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>微服务核心架构梳理</title>
    <link href="https://tengshe789.github.io/2018/12/08/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E6%A2%B3%E7%90%86/"/>
    <id>https://tengshe789.github.io/2018/12/08/微服务核心架构梳理/</id>
    <published>2018-12-08T01:35:23.000Z</published>
    <updated>2019-11-20T13:39:41.280Z</updated>
    
    <content type="html"><![CDATA[<p>在公司学习了接近一个月。 </p><p>一个月内，从0开始开始接触分布式微服务架构，给了我不小的收获。今天，我来从头到尾梳理一下，有关微服务架构的核心内容（全是干货）。</p><p>下文，你将看到业界主流微服务框架的核心原理，包括服务发现，网关，配置中心，监控等组件，功能和架构原理的简单介绍。感谢阅读！😋</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a>。😏</p><h2 id="Hello，Microservices"><a href="#Hello，Microservices" class="headerlink" title="Hello，Microservices"></a>Hello，Microservices</h2><h3 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h3><p>微服务Microservices之父，马丁.福勒，对微服务大概的概述如下：</p><blockquote><p>就目前而言，对于微服务业界并没有一个统一的、标准的定义（While there is no precise definition of this architectural style ) 。<br>但通在其常而言，微服务架构是一种架构模式或者说是一种架构风格，它提倡将单一应用程序划分成一组小的服务，每个服务运行独立的自己的进程中，服务之间互相协调、互相配合，为用户提供最终价值。服务之间采用轻量级的通信机制互相沟通（通常是基于 HTTP 的 RESTful API ) 。每个服务都围绕着具体业务进行构建，并且能够被独立地部署到生产环境、类生产环境等。<br>另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务。可以使用不同的语言来编写服务，也可以使用不同的数据存储。</p></blockquote><p>根据马丁.福勒的描述，我总结了一下几点：</p><p><img src="/2018/12/08/微服务核心架构梳理/2.jpg" alt="康威定律"></p><p>（字差，勿嫌）</p><h4 id="小服务"><a href="#小服务" class="headerlink" title="小服务"></a>小服务</h4><p>小服务，没有特定的标准或者规范，但他在总体规范上一定是小的。</p><h4 id="进程独立"><a href="#进程独立" class="headerlink" title="进程独立"></a>进程独立</h4><p>每一组服务都是独立运行的，可能我这个服务运行在<code>tomcat</code>容器，而另一个服务运行在<code>jetty</code>上。可以通过进程方式，不断的横向扩展整个服务。</p><h4 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h4><p>过去的协议都是很重的，就像ESB，就像SOAP，轻通信，着意味着相比过去更智能更轻量的服务相互调用，就所谓smart endpoints and dumb pipes，这些endpoint都是解耦的，完成一个业务通信调用串起这些micro service就像是linux系统中通过管道串起一系列命令业务。</p><p>过去的业务，我们通常会考虑各种各样的依赖关系，考虑系统耦合带来的问题。微服务，可以让开发者更专注于业务的逻辑开发。</p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>不止业务要独立，部署也要独立。不过这也意味着，传统的开发流程会出现一定程度的改变，开发的适合也要有一定的运维指责</p><h4 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h4><p>传统的企业级SOA服务往往很大，不易于管理，耦合性高，团队开发成本比较大。微服务，可以让团队各思其政的选择技术实现，不同的service可以根据各自的需要选择不同的技术栈来实现其业务逻辑。</p><h3 id="微服务的利与弊"><a href="#微服务的利与弊" class="headerlink" title="微服务的利与弊"></a>微服务的利与弊</h3><p>为什么用微服务呢？因为好玩？</p><p>不是的。下面是我从网络上找到说的比较全的优点：</p><blockquote><ul><li><p>优点每个服务足够内聚，足够小，代码容易理解这样能聚焦一个指定的业务功能或业务需求</p></li><li><p>开发简单、开发效率提高，一个服务可能就是专一的只干一件事。</p></li><li>微服务能够被小团队单独开发，这个小团队是 2 到 5 人的开发人员组成。</li><li>微服务是松藕合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的。</li><li>微服务能使用不同的语言开发。</li><li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如Jenkins,Hudson,bamboo。</li><li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果。无需- - 通过合作才能体现价值。微服务允许你利用融合最新技术。</li><li>微服务只是业务逻辑的代码，不会和 HTML,CSS或其他界面组件混合。</li><li>每个微服务都有自己的存储能力，可以有自己的数据库。也可以有统一数据库。</li></ul></blockquote><p>总的来说，微服务的优势，就是在于，面对大的系统，可以有效的减少复杂程度，使服务架构的逻辑更清晰明了。</p><p>但是这样也会带来很多问题，就譬如分布式环境下的数据一致性，测试的复杂性，运维的复杂性。</p><h3 id="什么组织适合使用微服务？"><a href="#什么组织适合使用微服务？" class="headerlink" title="什么组织适合使用微服务？"></a>什么组织适合使用微服务？</h3><p>微服务带了种种优点，种种弊端，那么什么组织适合使用微服务？</p><h4 id="墨菲定律（设计系统）和康威定律（系统划分）"><a href="#墨菲定律（设计系统）和康威定律（系统划分）" class="headerlink" title="墨菲定律（设计系统）和康威定律（系统划分）"></a>墨菲定律（设计系统）和康威定律（系统划分）</h4><p>康威定律，是一个五十多年前就被提出来的微服务概念。在康威的这篇文章中，最有名的一句话就是：</p><blockquote><p>Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations. - Melvin Conway(1967)</p></blockquote><p>中文直译大概的意思就是：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。看看下面的图片（来源于互联网，侵删），再想想Apple的产品、微软的产品设计，就能形象生动的理解这句话。</p><p><img src="/2018/12/08/微服务核心架构梳理/康威定律.png" alt="康威定律"></p><p>感兴趣的各位可以研究一下</p><h4 id="架构演化"><a href="#架构演化" class="headerlink" title="架构演化"></a>架构演化</h4><p>架构是不断演化出来的，微服务也是这样，当从各大科技公司，规模大到一定程度，完全需要演化成更进一步管理的技术架构体系。</p><p><img src="/2018/12/08/微服务核心架构梳理/3.jpg" alt="康威定律"></p><p>（字差，勿嫌）</p><p>传统的团队，都是面向过程化的，产品想完了去找策划，策划完了找开发，接着顺着一步一步找。我们做技术都是为了产品的，一旦过程出来了什么问题，回溯寻找问题会非常耗时。</p><p><img src="/2018/12/08/微服务核心架构梳理/4.jpg" alt="康威定律"></p><p>（字差，勿嫌）</p><p>使用了微服务架构体系，团队组织方式需要转变成跨职能团队，即每个团队都有产品专家，策划专家，开发专家，运维专家，他们使用API方式发布他们的功能，而平台使用他们的功能发布产品</p><p><img src="/2018/12/08/微服务核心架构梳理/6.png" alt="DevOps"></p><p><img src="/2018/12/08/微服务核心架构梳理/18.jpg" alt="devops"></p><h2 id="微服务技术架构体系"><a href="#微服务技术架构体系" class="headerlink" title="微服务技术架构体系"></a>微服务技术架构体系</h2><p>下面我分享一下大部分公司都使用的微服务技术架构体系。</p><p><img src="/2018/12/08/微服务核心架构梳理/7.jpg" alt="康威定律"></p><p>（图差，勿嫌）</p><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>主流的服务发现，分为三种</p><p><img src="/2018/12/08/微服务核心架构梳理/8.jpg" alt="康威定律"></p><p>第一种，开发人员开发了程序以后，会找运维配一个域名，服务的话通过dns就能找到我们对应的服务</p><p>缺点是，由于服务没有负载均衡功能，对负载均衡服务，可能会有相当大的性能问题。</p><p><img src="/2018/12/08/微服务核心架构梳理/9.jpg" alt="康威定律"></p><p>第二种，是目前普遍的做法。可以参考我上篇博客分析的zuul网关，每一个服务都通过服务端内置的功能注册到注册中心，服务消费者不断轮询注册中心发现对应的服务，使用内置负载均衡调用服务。</p><p>缺点是，对多语言环境不是很好，你需要单独给消费者的客户端开发服务发现和负载均衡功能。当然了，这个方法通常都是用在<code>spring cloud</code>上的。</p><p><img src="/2018/12/08/微服务核心架构梳理/10.jpg" alt="康威定律"></p><p>第三种，是将客户端和负载均衡放在同一个主机，而不是同一个进程内。</p><p>这种方法相对第一种第二种方法来说，改善了他们的缺点，但是会极大增加运维成本。</p><h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><h4 id="微服务的网关是什么？"><a href="#微服务的网关是什么？" class="headerlink" title="微服务的网关是什么？"></a>微服务的网关是什么？</h4><p>我们可以联系生活实际想一下。每一个大的公司，都会有一偏属于自己的建筑区，而这建筑区内，都有不少的门卫。如果有外来人员进入公司，会先和门卫打好招呼，才能进去。</p><p>将生活实际联系到微服务上，就不难理解网关的意思了。</p><h4 id="网关有什么用"><a href="#网关有什么用" class="headerlink" title="网关有什么用"></a>网关有什么用</h4><p><img src="/2018/12/08/微服务核心架构梳理/11.jpg" alt="康威定律"></p><ul><li>反向路由：很多时候，公司不想让外部人员看到我们公司的内部，就需要网关来进行反向路由。即将外部请求转换成内部具体服务条用</li><li>安全认证：网络中会有很多恶意访问，譬如爬虫，譬如黑客攻击，网关维护安全功能。</li><li>限流熔断：参考我学好分布式zookepper的博客，当请求很多服务不堪重负，会让我们的服务自动关闭，导致不能用服务。限流熔断可以有效的避免这类问题</li><li>日志监控：所有的外面的请求都会经过网关，这样我们就可以使用网关来记录日志信息</li><li>灰度发布，蓝绿部署。是指能够平滑过渡的一种发布方式。在其上可以进行A/B testing，即让一部分用户继续用产品特性A，一部分用户开始用产品特性B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。</li></ul><h4 id="开源网关Zuul架构"><a href="#开源网关Zuul架构" class="headerlink" title="开源网关Zuul架构"></a>开源网关Zuul架构</h4><p><img src="/2018/12/08/微服务核心架构梳理/zuul架构.png" alt="zuul架构"></p><p><code>zuul</code>网关核心其实是一个<code>servlet</code>，所有请求都会经过<code>zuul servlet</code>传到<code>zuulFilter Runner</code>，然后分发到三种过滤器。</p><p>先说说架构图左半部分，分别是使用<code>Groovy</code>实现的前置路由过滤器，路由过滤器，后置路由过滤器。</p><p>一般请求都会先经过<strong>前置路由过滤器</strong>处理，一般的自定义java封装逻辑也会在这里实现。</p><p><strong>路由过滤器</strong>，实现的是找到对应的微服务进行调用。</p><p>调用完了，响应回来，会经过<strong>后置路由过滤器</strong>，通过后置路由过滤器我们可以封装日志审计的处理。</p><p>可以说<code>zuul</code>网关最大的特色就是它三层过滤器。</p><p>架构图右半部分，是<code>zuul</code>网关设计的自定义过滤器加载机制。网关内部会有生产者消费者模型，自动的将过滤器脚本发布到<code>zuul</code>网关读取加载运行。</p><h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><p>以前，开发人员把配置文件放在开发文件里面，这样会有很多隐患。譬如，配置规范不同，无法追溯配置人员。一旦需要大规模改动配置，改动时间会很长，无法追溯配置人员，从而影响整个产品，后果是我们承担不起的。</p><p>因此就有配置中心这个喽~</p><p>现在的开源中心有<em>百度配置中心</em> Disconf，spring cloud config，Apollo，今天重点说说现在应用质量不错的配置中心阿波罗。</p><h4 id="携程开源的Apollo"><a href="#携程开源的Apollo" class="headerlink" title="携程开源的Apollo"></a>携程开源的Apollo</h4><p>开源地址👉：<a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo</a></p><p><img src="/2018/12/08/微服务核心架构梳理/12.jpg" alt="康威定律"></p><p>apollo的配置中心规模比较大，本地应用会有响应的配置中心客户端，可以定时同步配置中心里的配置。如果配置中心怠机，会使用缓存来进行配置。</p><h3 id="通讯方式"><a href="#通讯方式" class="headerlink" title="通讯方式"></a>通讯方式</h3><p>关于通讯方式，一般市面也就是两种远程调用方式，我整理了一个表格：</p><table><thead><tr><th></th><th>RPC</th><th>REST</th></tr></thead><tbody><tr><td>耦合性</td><td>强耦合</td><td>松散耦合</td></tr><tr><td>消息协议</td><td>TCP</td><td>HTTP</td></tr><tr><td>通讯协议</td><td>二进制</td><td>文本XML，Json</td></tr><tr><td>性能</td><td>高</td><td>低于RPC</td></tr><tr><td>接口契约IDL</td><td>thrift,protobuf,IdL</td><td>Swagger</td></tr><tr><td>客户端</td><td>强类型客户端，一般自动生成</td><td>一般HTTP可访问，生成强类型客户端，多语言支持好</td></tr><tr><td>案例</td><td>Dubbo，Dubbox,motan,tars,grpc,thrift</td><td>spring boot,tax-rs,dropwizard</td></tr><tr><td>开发者友好</td><td>客户端比较方面，二进制消息不能读</td><td>可读消息</td></tr><tr><td>对外开放</td><td>一般需要转成REST/文本协议</td><td>可直接对外开发</td></tr></tbody></table><h3 id="监控预警"><a href="#监控预警" class="headerlink" title="监控预警"></a>监控预警</h3><p>监控预警对于微服务很重要，一个可靠的监控预警体系对微服务运行至关重要。一般监控分为如下层次：</p><p><img src="/2018/12/08/微服务核心架构梳理/13.jpg" alt="康威定律"></p><p>从基础设施到用户端，层层有监控，全方位，多角度，每一个层面都很重要。总体来说，微服务可分5个监控点：<strong>日志监控</strong>，<strong>Metrics监控</strong>，<strong>健康检查</strong>，<strong>调用链检查</strong>，<strong>告警系统</strong></p><h4 id="监控架构"><a href="#监控架构" class="headerlink" title="监控架构"></a>监控架构</h4><p>下面的图是大部分公司的一种监控架构图。每一个服务都有一个<code>agent</code>，<code>agent</code>收集到关键信息，会传到一些<em>MQ</em>中，为了解耦。同时将日志传入<em>ELK</em>，将<em>Metrics</em>传入<em>InfluxDB</em>时间序列库。而像<em>nagios</em>，可以定期向agent发起信息检查微服务。</p><p><img src="/2018/12/08/微服务核心架构梳理/14.jpg" alt="康威定律"></p><h4 id="调用链监控APM"><a href="#调用链监控APM" class="headerlink" title="调用链监控APM"></a>调用链监控APM</h4><p>很多公司都有调用链监控，就譬如阿里有鹰眼监控，点评的<em>Cat</em>，大部分调用链监控（没错，我指的<code>Zipkin</code>）架构是这样的👇</p><p><img src="/2018/12/08/微服务核心架构梳理/15.jpg" alt="康威定律"></p><p>当请求进入Web容器的时候，会经过创建<code>Tracer</code>，连接<code>spans</code>（模拟潜在的分布式工作的延迟，该模块还包含在系统网络间传递跟踪上下文信息的工具包，如通过http headers）。<code>Spans</code>有一个上下文，其中包含<code>tracer</code>标识符，将其放在表示分布式操作的树的正确位置。当我们把图中的各种span放到后端的时候，我们的服务调用链会动态的生成调用链。</p><p>下面是一些市场上用的比较多的调用链监控：</p><p>  <strong>1、Pinpoint</strong><br>github地址：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">GitHub - naver/pinpoint: Pinpoint is an open source APM (Application Performance Management) tool for large-scale distributed systems written in Java.</a><br>对java领域的性能分析有兴趣的朋友都应该看看这个开源项目，这个是一个韩国团队开源出来的，通过JavaAgent的机制来做字节码代码植入，实现加入traceid和抓取性能数据的目的。<br>NewRelic、Oneapm之类的工具在java平台上的性能分析也是类似的机制。</p><p><strong>2、SkyWalking</strong><br>github地址：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">wu-sheng/sky-walking</a><br>这是国内一位叫吴晟的兄弟开源的，也是一个对JAVA分布式应用程序集群的业务运行情况进行追踪、告警和分析的系统，在github上也有400多颗星了。<br>功能相对pinpoint还是稍弱一些，插件还没那么丰富，不过也很难得了。</p><p><strong>3、Zipkin</strong><br>官网：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">OpenZipkin · A distributed tracing system</a><br>github地址：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">GitHub - openzipkin/zipkin: Zipkin is a distributed tracing system</a><br>这个是twitter开源出来的，也是参考Dapper的体系来做的。</p><p>Zipkin的java应用端是通过一个叫Brave的组件来实现对应用内部的性能分析数据采集。<br>Brave的github地址：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">https://github.com/openzipkin/brave</a><br>这个组件通过实现一系列的java拦截器，来做到对http/servlet请求、数据库访问的调用过程跟踪。<br>然后通过在spring之类的配置文件里加入这些拦截器，完成对java应用的性能数据采集。</p><p><strong>4、CAT</strong><br>github地址：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">GitHub - dianping/cat: Central Application Tracking</a><br>这个是大众点评开源出来的，实现的功能也还是蛮丰富的，国内也有一些公司在用了。<br>不过他实现跟踪的手段，是要在代码里硬编码写一些“埋点”，也就是侵入式的。<br>这样做有利有弊，好处是可以在自己需要的地方加埋点，比较有针对性；坏处是必须改动现有系统，很多开发团队不愿意。</p><p><strong>5、Xhprof/Xhgui</strong><br>这两个工具的组合，是针对PHP应用提供APM能力的工具，也是非侵入式的。<br>Xhprof github地址：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">GitHub - preinheimer/xhprof: XHGUI is a GUI for the XHProf PHP extension, using a database backend, and pretty graphs to make it easy to use and interpret.</a><br>Xhgui github地址：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">GitHub - perftools/xhgui: A graphical interface for XHProf data built on MongoDB</a><br>我对PHP不熟，不过网上介绍这两个工具的资料还是蛮多的。  </p><p><img src="/2018/12/08/微服务核心架构梳理/16.jpg" alt="康威定律"></p><h3 id="熔断、隔离、限流、降级"><a href="#熔断、隔离、限流、降级" class="headerlink" title="熔断、隔离、限流、降级"></a>熔断、隔离、限流、降级</h3><p>面对巨大的突发流量下，大型公司一般会采用一系列的<strong>熔断</strong>（系统自动将服务关闭防止让出现的问题最大化）、<strong>隔离</strong>（将服务和服务隔离，防止一个服务挂了其他服务不能访问）、<strong>限流</strong>（单位时间内之允许一定数量用户访问）、<strong>降级</strong>（当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，我们可以将一些 不重要或 不紧急 的服务或任务进行服务的 延迟使用 或 暂停使用）措施。</p><p>下面介绍一下<code>hystrix</code>的运行流程（没找到架构图不好意思）：</p><p><img src="/2018/12/08/微服务核心架构梳理/17.png" alt="hystrix"></p><p>每一个微服务调用时，都会使用<code>hystrix</code>的<code>command</code>方式（上图的左上角那个），然后使用<code>command</code><em>同步的</em>，或者是<em>响应式的</em>，或者是<em>异步的</em>，判断电路是否熔断（顺着图从左往右看），</p><p>如果断路则走降级fallback；</p><p>如果这个线闭合着，但是线程资源没了，队列满了，则走限流措施（看图的第5步）；</p><p>如果走完了，执行成功了，则走run()方法，获取response，但是这个过程如果出错了，则继续走降级fallback.</p><p>同时，看图最上面有一个后缀是<code>health</code>的，这是一个计算整个链路是否健康的组件，每一步操作都被它记录着。</p><h3 id="容器与服务编排引擎"><a href="#容器与服务编排引擎" class="headerlink" title="容器与服务编排引擎"></a>容器与服务编排引擎</h3><p>从物理机到虚拟机，从虚拟机到容器；从物理集群到<code>open stack</code>，<code>open stack</code>到<code>kubernetes</code>；科技不断的变化，我们的认知也没刷新。</p><p>我们从容器开始说起，它首先是一个相对独立的运行环境，在这一点有点类似于虚拟机，但是不像虚拟机那样彻底。<br>　　虚拟机会将虚拟硬件、内核（即操作系统）以及用户空间打包在新虚拟机当中，虚拟机能够利用“虚拟机管理程序”运行在物理设备之上。虚拟机依赖于hypervisor，其通常被安装在“裸金属”系统硬件之上，这导致hypervisor在某些方面被认为是一种操作系统。一旦 hypervisor安装完成， 就可以从系统可用计算资源当中分配虚拟机实例了，每台虚拟机都能够获得唯一的操作系统和负载(应用程序)。简言之，虚拟机先需要虚拟一个物理环境，然后构建一个完整的操作系统，再搭建一层Runtime，然后供应用程序运行。<br>　　<br>　　 对于容器环境来说，不需要安装主机操作系统，直接将容器层(比如LXC或libcontainer)安装在主机操作系统(通常是Linux变种)之上。在安装完容器层之后，就可以从系统可用计算资源当中分配容器实例了，并且企业应用可以被部署在容器当中。但是，每个容器化应用都会共享相同的操作系统(单个主机操作系统)。容器可以看成一个装好了一组特定应用的虚拟机，它直接利用了宿主机的内核，抽象层比虚拟机更少，更加轻量化，启动速度极快。</p><p>　　相比于虚拟机，容器拥有更高的资源使用效率，因为它并不需要为每个应用分配单独的操作系统——实例规模更小、创建和迁移速度也更快。这意味相比于虚拟机，单个操作系统能够承载更多的容器。云提供商十分热衷于容器技术，因为在相同的硬件设备当中，可以部署数量更多的容器实例。此外，容器易于迁移，但是只能被迁移到具有兼容操作系统内核的其他服务器当中，这样就会给迁移选择带来限制。因为容器不像虚拟机那样同样对内核或者虚拟硬件进行打包，所以每套容器都拥有自己的隔离化用户空间，从而使得多套容器能够运行在同一主机系统之上。我们可以看到全部操作系统层级的架构都可实现跨容器共享，惟一需要独立构建的就是二进制文件与库。正因为如此，容器才拥有极为出色的轻量化特性。 </p><p>我们最常用的容器是daocker，网址如下👉<a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a></p><h4 id="容器编排"><a href="#容器编排" class="headerlink" title="容器编排"></a>容器编排</h4><p>过去虚拟机可以通过云平台<code>open stack</code>管理虚拟化，容器时代如何管理容器呢？这就要看看容器编排引擎了。</p><h5 id="Apache-mesos"><a href="#Apache-mesos" class="headerlink" title="Apache mesos"></a>Apache mesos</h5><p>mesos是基于master，slave架构，框架决定如何利用资源，master负责管理机器，slave会定期的将机器情况报告给master，master再将信息给框架。master是高可用的，因为zk，也有leader的存在。下面是架构图👇</p><p><img src="/2018/12/08/微服务核心架构梳理/19.png" alt="1544264985310"></p><h5 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a>kubernetes</h5><p>kubernetes是最近十分火热的开源容器编排引擎，具体可以参考<a href="https://www.kubernetes.org.cn/kubernetes设计架构" target="_blank" rel="noopener">kubernetes中文文档</a></p><p><img src="https://raw.githubusercontent.com/kubernetes/kubernetes/release-1.2/docs/design/architecture.png" alt="k8s"></p><p>Kubernetes设计理念和功能其实就是一个类似Linux的分层架构，先说说每一个Kubernetes节点内部，kubelet管理全局全局pod，而每一个pod承载着一个或多个容器，kube-proxy负责网络代理和负载均衡    。</p><p>Kubernetes节点外部，则是对应的控制管理服务器，负责统一管理各个节点调度分配与运行。</p><h4 id="服务网格化"><a href="#服务网格化" class="headerlink" title="服务网格化"></a>服务网格化</h4><p>。。。待更新</p><h3 id="资料与文献"><a href="#资料与文献" class="headerlink" title="资料与文献"></a>资料与文献</h3><p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa" target="_blank" rel="noopener">马丁.福勒对微服务的描述</a></p><p><a href="https://yq.aliyun.com/articles/8611" target="_blank" rel="noopener">微服务架构的理论基础 - 康威定律</a></p><p><a href="https://www.jianshu.com/p/0fbbf99a236e" target="_blank" rel="noopener">调用链选型之Zipkin，Pinpoint，SkyWalking，CAT</a></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>此片完了~ 想要了解更多精彩新姿势？</p><p>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> </p><p>本篇为原创内容，已在<a href="https://blog.tengshe789.tech/2018/12/08/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E6%A2%B3%E7%90%86/#more" target="_blank" rel="noopener">个人博客</a>率先发表，随后看心情可能会在CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，<strong>缘分呢</strong>兄弟。赶快加个好友，咱们两个想个号码， 买个彩票，先挣他个几百万😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在公司学习了接近一个月。 &lt;/p&gt;
&lt;p&gt;一个月内，从0开始开始接触分布式微服务架构，给了我不小的收获。今天，我来从头到尾梳理一下，有关微服务架构的核心内容（全是干货）。&lt;/p&gt;
&lt;p&gt;下文，你将看到业界主流微服务框架的核心原理，包括服务发现，网关，配置中心，监控等组件，功
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="学好分布式架构" scheme="https://tengshe789.github.io/tags/%E5%AD%A6%E5%A5%BD%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
      <category term="架构" scheme="https://tengshe789.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>阿里巴巴Java开发手册</title>
    <link href="https://tengshe789.github.io/2018/12/07/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/"/>
    <id>https://tengshe789.github.io/2018/12/07/阿里巴巴Java开发手册/</id>
    <published>2018-12-07T06:51:38.000Z</published>
    <updated>2019-11-20T13:39:41.572Z</updated>
    
    <content type="html"><![CDATA[<p>分析一下广泛流传的阿里巴巴Java开发手册，当作在线文档，转侵删。。</p><div class="row">    <embed src="阿里巴巴Java开发手册.pdf" width="100%" height="550" type="application/pdf"></div> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分析一下广泛流传的阿里巴巴Java开发手册，当作在线文档，转侵删。。&lt;/p&gt;


	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;阿里巴巴Java开发手册.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application
      
    
    </summary>
    
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
      <category term="分享" scheme="https://tengshe789.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>阅读阿里开发手册发现的ConcurrentModificationException异常</title>
    <link href="https://tengshe789.github.io/2018/12/06/ConcurrentModificationException%E5%BC%82%E5%B8%B8/"/>
    <id>https://tengshe789.github.io/2018/12/06/ConcurrentModificationException异常/</id>
    <published>2018-12-06T01:45:13.000Z</published>
    <updated>2019-11-20T13:39:40.560Z</updated>
    
    <content type="html"><![CDATA[<p>今天阅读阿里巴巴Java开发手册(终极版).pdf，偶然发现一条强制规范：</p><blockquote><p>【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 <code>Iterator</code><br>方式，如果并发操作，需要对 Iterator 对象加锁。</p></blockquote><p>这引发了我的注意力。</p><p>按照他说的做了一遍，果然有这个问题。下面我们就探索一下，到底为什么会出这个问题吧！</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">https://blog.tengshe789.tech/</a></p><h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><p>下面是推荐使用的<code>Iterator</code>方式来<code>remove/add</code>操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">test1</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">       Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line">       <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">           String item = iterator.next();</span><br><span class="line">           <span class="keyword">if</span> (item.equals(NUM2)) &#123;</span><br><span class="line">               iterator.remove();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>不推荐使用的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">test2</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">           <span class="keyword">if</span> (NUM2.equals(item)) &#123;</span><br><span class="line">               list.remove(item);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我的main方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NUM1 = <span class="string">"1"</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NUM2 = <span class="string">"2"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">       list.add(<span class="string">"1"</span>);</span><br><span class="line">       list.add(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">       test2(list);</span><br><span class="line"></span><br><span class="line">       list.forEach(item -&gt; &#123;</span><br><span class="line">           System.out.println(<span class="string">"结果是 "</span> + item);</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="/2018/12/06/ConcurrentModificationException异常/1.png" alt="ConcurrentModificationException异常"><br>果然，将判断条件设置成<code>NUM2</code>时，就出异常了，可是这是为什么呢？</p><h3 id="一探究竟"><a href="#一探究竟" class="headerlink" title="一探究竟"></a>一探究竟</h3><p>我们从出错日志中查找答案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">      <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          checkForComodification();</span><br><span class="line">          <span class="keyword">int</span> i = cursor;</span><br><span class="line">          <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">          Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">          <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">          cursor = i + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>来到<code>foreach</code>中走的<code>next()</code>，第一步需要走<code>checkForComodification()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>这边又出现一个成员变量<code>modCount</code>，我们顺着来找找看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of times this list has been &lt;i&gt;structurally modified&lt;/i&gt;.</span></span><br><span class="line"><span class="comment">     * Structural modifications are those that change the size of the</span></span><br><span class="line"><span class="comment">     * list, or otherwise perturb it in such a fashion that iterations in</span></span><br><span class="line"><span class="comment">     * progress may yield incorrect results.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This field is used by the iterator and list iterator implementation</span></span><br><span class="line"><span class="comment">     * returned by the &#123;<span class="doctag">@code</span> iterator&#125; and &#123;<span class="doctag">@code</span> listIterator&#125; methods.</span></span><br><span class="line"><span class="comment">     * If the value of this field changes unexpectedly, the iterator (or list</span></span><br><span class="line"><span class="comment">     * iterator) will throw a &#123;<span class="doctag">@code</span> ConcurrentModificationException&#125; in</span></span><br><span class="line"><span class="comment">     * response to the &#123;<span class="doctag">@code</span> next&#125;, &#123;<span class="doctag">@code</span> remove&#125;, &#123;<span class="doctag">@code</span> previous&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> set&#125; or &#123;<span class="doctag">@code</span> add&#125; operations.  This provides</span></span><br><span class="line"><span class="comment">     * &lt;i&gt;fail-fast&lt;/i&gt; behavior, rather than non-deterministic behavior in</span></span><br><span class="line"><span class="comment">     * the face of concurrent modification during iteration.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;b&gt;Use of this field by subclasses is optional.&lt;/b&gt; If a subclass</span></span><br><span class="line"><span class="comment">     * wishes to provide fail-fast iterators (and list iterators), then it</span></span><br><span class="line"><span class="comment">     * merely has to increment this field in its &#123;<span class="doctag">@code</span> add(int, E)&#125; and</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> remove(int)&#125; methods (and any other methods that it overrides</span></span><br><span class="line"><span class="comment">     * that result in structural modifications to the list).  A single call to</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> add(int, E)&#125; or &#123;<span class="doctag">@code</span> remove(int)&#125; must add no more than</span></span><br><span class="line"><span class="comment">     * one to this field, or the iterators (and list iterators) will throw</span></span><br><span class="line"><span class="comment">     * bogus &#123;<span class="doctag">@code</span> ConcurrentModificationExceptions&#125;.  If an implementation</span></span><br><span class="line"><span class="comment">     * does not wish to provide fail-fast iterators, this field may be</span></span><br><span class="line"><span class="comment">     * ignored.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> <span class="keyword">transient</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>哦，缘来乳此，<code>list</code>是线程不安全的，因此如果在使用迭代器的过程中有其他线程修改了<code>list</code>，那么将抛出<code>ConcurrentModificationException</code>，这就是所谓<code>fail-fast</code>策略(见jdk注释)。</p><p><code>modCount</code>它代表该List对象被修改的次数，每对<code>List</code>对象修改一次，<code>modCount</code>都会加<code>Iterator</code>类里有一个成员变量<code>expectedModCount</code>，它的值为创建<code>Iterator</code>对象的时候<code>List的modCount</code>值。用此变量来检验在迭代过程中List对象是否被修改了，如果被修改了则抛出<code>java.util.ConcurrentModificationException</code>异常。在每次调用<code>Iterator</code>对象的<code>next()</code>方法的时候都会调用<code>checkForComodification()</code>方法进行一次检验，<code>checkForComodification()</code>方法中做的工作就是比较<code>expectedModCount</code>和<code>modCount</code>的值是否相等，如果不相等，就认为还有其他对象正在对当前的List进行操作，那个就会抛出<code>ConcurrentModificationException</code>异常。</p><p>网上查找的关于<code>Iterator</code>的工作机制。<code>Iterator</code>是工作在一个独立的线程中，并且拥有一个 <code>mutex</code>锁，就是说<code>Iterator</code>在工作的时候，是不允许被迭代的对象被改变的。而<code>List</code>等是动态的，可变对象数量的数据结构，但是<code>Iterator</code>则是单向不可变，只能顺序读取，不能逆序操作的数据结构，当 <code>Iterator</code>指向的原始数据发生变化时，<code>Iterator</code>自己就迷失了方向。</p><h3 id="续1s时间"><a href="#续1s时间" class="headerlink" title="续1s时间"></a>续1s时间</h3><p>全片结束，觉得我写的不错？想要了解更多精彩新姿势？赶快打开我的👉个人<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">博客</a> 👈吧！</p><p>谢谢你那么可爱，还一直关注着我~❤😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天阅读阿里巴巴Java开发手册(终极版).pdf，偶然发现一条强制规范：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 &lt;code&gt;Iterator&lt;/code&gt;&lt;br&gt;方式
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>分布式系统--感性认识JWT</title>
    <link href="https://tengshe789.github.io/2018/12/02/%E6%84%9F%E6%80%A7%E8%AE%A4%E8%AF%86JWT/"/>
    <id>https://tengshe789.github.io/2018/12/02/感性认识JWT/</id>
    <published>2018-12-02T12:30:23.000Z</published>
    <updated>2019-11-20T13:39:41.383Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写博客了，因为最近公司要求我学<code>spring cloud</code>，早点将以前软件迁移到新的架构上。所以我那个拼命的学呐，总是图快，很多关键的笔记没有做好记录，现在又遗忘了很多关键的技术点，极其罪恶！</p><p>现在想一想，还是踏踏实实的走比较好。这不，今天我冒了个泡，来补一补前面我所学所忘的知识点。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a>。</p><h2 id="常见的认证机制"><a href="#常见的认证机制" class="headerlink" title="常见的认证机制"></a>常见的认证机制</h2><p>今天我么聊一聊JWT。</p><p>关于JWT，相信很多人都已经看过用过，他是基于<code>json</code>数据结构的认证规范，简单的说就是验证用户登没登陆的玩意。这时候你可能回想，哎哟，不是又那个session么，分布式系统用<code>redis</code>做分布式session，那这个jwt有什么好处呢？</p><p>请听我慢慢诉说这历史！</p><h3 id="最原始的办法–HTTP-BASIC-AUTH"><a href="#最原始的办法–HTTP-BASIC-AUTH" class="headerlink" title="最原始的办法–HTTP BASIC AUTH"></a>最原始的办法–HTTP BASIC AUTH</h3><p>HTTP BASIC auth，别看它名字那么长那么生，你就认为这个玩意很高大上。其实原理很简单，简单的说就是每次请求API的时候，都会把用户名和密码通过<code>restful API</code>传给服务端。这样就可以实现一个<strong>无状态</strong>思想，即每次HTTP请求和以前都没有啥关系，只是获取目标URI，得到目标内容之后，这次连接就被杀死，没有任何痕迹。你可别一听无状态，正是现在的热门思想，就觉得很厉害。其实他的缺点还是又的，我们通过http请求发送给服务端的时候，很有可能将我们的用户名密码直接暴漏给第三方客户端，风险特别大，因此生产环境下用这个方法很少。</p><h3 id="Session和cookie"><a href="#Session和cookie" class="headerlink" title="Session和cookie"></a>Session和cookie</h3><p>session和cookie老生常谈了。开始时，都会在服务端全局创建session对象，session对象保存着各种关键信息，同时向客户端发送一组<code>sessionId</code>，成为一个cookie对象保存在浏览器中。</p><p>当认证时，cookie的数据会传入服务端与session进行匹配，进而进行数据认证。</p><p><img src="/2018/12/02/感性认识JWT/how-session-work.png" alt="how session work"></p><p>此时，实现的是一个<strong>有状态</strong>的思想，即该服务的实例可以将一部分数据随时进行备份，并且在创建一个新的有状态服务时，可以通过备份恢复这些数据，以达到数据持久化的目的。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>这种认证方法基本是现在软件最常用的方法了，它有一些自己的缺点：</p><ul><li><strong>安全性</strong>。cookies的安全性不好，攻击者可以通过获取本地cookies进行欺骗或者利用cookies进行<strong>CSRF</strong>攻击。</li><li><strong>跨域问题</strong>。使用cookies时，在多个域名下，会存在跨域问题。</li><li><strong>有状态</strong>。session在一定的时间里，需要存放在服务端，因此当拥有大量用户时，也会大幅度降低服务端的性能。</li><li><strong>状态问题</strong>。当有多台机器时，如何共享session也会是一个问题，也就是说，用户第一个访问的时候是服务器A，而第二个请求被转发给了服务器B，那服务器B如何得知其状态。</li><li><strong>移动手机问题</strong>。现在的智能手机，包括安卓，原生不支持cookie，要使用cookie挺麻烦。</li></ul><h3 id="Token认证（使用jwt规范）"><a href="#Token认证（使用jwt规范）" class="headerlink" title="Token认证（使用jwt规范）"></a>Token认证（使用jwt规范）</h3><p>token 即使是在计算机领域中也有不同的定义，这里我们说的token，是指 <strong>访问资源的凭据</strong> 。使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是 这样的：</p><ol><li>客户端使用用户名跟密码请求登录  </li><li>服务端收到请求，去验证用户名与密码 </li><li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端 </li><li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里 </li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token </li><li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li></ol><p>Token机制，我认为其本质思想就是将session中的信息简化很多，当作cookie用，也就是客户端的“session”。</p><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><p>那Token机制相对于Cookie机制又有什么<strong>好处</strong>呢？ </p><ul><li><strong>支持跨域访问:</strong> Cookie是不允许垮域访问的，这一点对Token机制是不存在的，前提 是传输的用户认证信息通过HTTP头传输. </li><li><strong>无状态</strong>:Token机制本质是校验, 他得到的会话状态完全来自于客户端, Token机制在服务端不需要存储session信息，因为 Token 自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息. </li><li><strong>更适用CDN</strong>: 可以通过内容分发网络请求你服务端的所有资料（如：javascript， HTML,图片等），而你的服务端只要提供API即可. </li><li><strong>去耦</strong>: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在 你的API被调用的时候，你可以进行Token生成调用即可. </li><li><strong>更适用于移动应用</strong>: 当你的客户端是一个原生平台（iOS, Android，Windows 8等） 时，Cookie是不被支持的（你需要通过Cookie容器进行处理），这时采用Token认 证机制就会简单得多。 CSRF:因为不再依赖于Cookie，所以你就不需要考虑对CSRF（跨站请求伪造）的防 范。 </li><li><strong>性能</strong>: 一次网络往返时间（通过数据库查询session信息）总比做一次HMACSHA256 计算 的Token验证和解析要费时得多. 不需要为登录页面做特殊处理: 如果你使用Protractor 做功能测试的时候，不再需要 为登录页面做特殊处理.</li><li><strong>基于标准化</strong>:你的API可以采用标准化的 JSON Web Token (JWT). 这个标准已经存在 多个后端库（.NET, Ruby, Java,Python, PHP）和多家公司的支持（如： Firebase,Google, Microsoft）</li></ul><h4 id="缺陷在哪？"><a href="#缺陷在哪？" class="headerlink" title="缺陷在哪？"></a>缺陷在哪？</h4><p>说了那么多token认证的好处，但他其实并没有想象的那么神，token 也并不是没有问题。</p><ol><li><p>占带宽</p><p>正常情况下要比 session_id 更大，需要<strong>消耗更多流量</strong>，挤占更多带宽，假如你的网站每月有 10 万次的浏览器，就意味着要多开销几十兆的流量。听起来并不多，但日积月累也是不小一笔开销。实际上，许多人会在 JWT 中存储的信息会更多。</p></li><li><p>无论如何你需要操作数据库</p><p>在网站上使用 JWT，对于用户加载的几乎所有页面，都需要从缓存/数据库中加载用户信息，如果对于高流量的服务，你确定这个操作合适么？如果使用redis进行缓存，那么效率上也并不能比 session 更高效</p></li><li><p>无法在服务端注销，那么久<strong>很难解决劫持</strong>问题</p></li><li><p>性能问题</p><p>JWT 的卖点之一就是加密签名，由于这个特性，接收方得以验证 JWT 是否有效且被信任。但是大多数 Web 身份认证应用中，JWT 都会被存储到 Cookie 中，这就是说你有了两个层面的签名。听着似乎很牛逼，但是没有任何优势，为此，你需要花费两倍的 CPU 开销来验证签名。对于有着严格性能要求的 Web 应用，这并不理想，尤其对于单线程环境。</p></li></ol><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>现在我们来说说今天的主角，<code>JWT</code></p><p>JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用 户和服务器之间传递安全可靠的信息</p><p><img src="/2018/12/02/感性认识JWT/4.png" alt="1543760350545"></p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>一个JWT实际上就是一个字符串，它由三部分组成，<strong>头部</strong>、<strong>载荷</strong>与<strong>签名</strong>。 </p><h4 id="头部-header"><a href="#头部-header" class="headerlink" title="头部(header)"></a>头部(header)</h4><p>头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以 被表示成一个JSON对象。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"typ"</span>:<span class="string">"JWT"</span>,</span><br><span class="line">    <span class="attr">"alg"</span>:<span class="string">"HS256"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是头部的明文内容，第一部分说明他是一个jwt，第二部分则指出签名算法用的是<em>HS256算法</em>。</p><p>然后将这个头部进行BASE64编码，编码后形成头部：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br></pre></td></tr></table></figure><h4 id="载荷-payload"><a href="#载荷-payload" class="headerlink" title="载荷(payload)"></a>载荷(payload)</h4><p>载荷就是存放有效信息的地方,有效信息包含三个部分:</p><p>（1）<strong>标准中注册的声明</strong>（建议但不强制使用）</p><ul><li>iss: jwt签发者  </li><li>sub: jwt所面向的用户  </li><li>aud: 接收jwt的一方  </li><li>exp: jwt的过期时间，这个过期时间必须要大于签发时间  </li><li>nbf: 定义在什么时间之前，该jwt都是不可用的.  </li><li>iat: jwt的签发时间  </li><li>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li></ul><p>（2）<strong>公共的声明</strong><br>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息. 但不建议添加敏感信息，因为该部分在客户端可解密.  </p><p>（3）<strong>私有的声明</strong> </p><p>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64 是对称解密的，意味着该部分信息可以归类为明文信息。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"sub"</span>:<span class="string">"1234567890"</span>,</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"tengshe789"</span>,</span><br><span class="line">    <span class="attr">"admin"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就是一个简单的载荷的明文，接下来使用base64加密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><br></pre></td></tr></table></figure><h4 id="签证（signature）"><a href="#签证（signature）" class="headerlink" title="签证（signature）"></a>签证（signature）</h4><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p><ol><li>header (base64后的) </li><li>payload (base64后的)</li><li>secret</li></ol><p>这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第 三部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure><h4 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6I kpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7Hg Q</span><br></pre></td></tr></table></figure><h2 id="实现JWT"><a href="#实现JWT" class="headerlink" title="实现JWT"></a>实现JWT</h2><p>现在一般实现jwt，都使用Apache 的开源项目JJWT（一个提供端到端的JWT创建和验证的Java库）。</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建token的demo"><a href="#创建token的demo" class="headerlink" title="创建token的demo"></a>创建token的demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateJWT</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        JwtBuilder builder = Jwts.builder().setId(<span class="string">"123"</span>)</span><br><span class="line">                .setSubject(<span class="string">"jwt所面向的用户"</span>)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256,<span class="string">"tengshe789"</span>);</span><br><span class="line">        String s = builder.compact();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="comment">//eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIxMjMiLCJzdWIiOiJqd3TmiYDpnaLlkJHnmoTnlKjmiLciLCJpYXQiOjE1NDM3NTk0MjJ9.1sIlEynqqZmA4PbKI6GgiP3ljk_aiypcsUxSN6-ATIA</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如图：</p><p><img src="/2018/12/02/感性认识JWT/2.png" alt="1543759471279"></p><p>（注意，jjwt不支持jdk11，0.9.1以后的jjwt必须实现signWith()方法才能实现）</p><h3 id="解析Token的demo"><a href="#解析Token的demo" class="headerlink" title="解析Token的demo"></a>解析Token的demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParseJWT</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String token = <span class="string">"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIxMjMiLCJzdWIiOiJqd3TmiYDpnaLlkJHnmoTnlKjmiLciLCJpYXQiOjE1NDM3NTk0MjJ9.1sIlEynqqZmA4PbKI6GgiP3ljk_aiypcsUxSN6-ATIA"</span>;</span><br><span class="line"></span><br><span class="line">        Claims claims =</span><br><span class="line">                Jwts.parser().setSigningKey(<span class="string">"tengshe789"</span>).parseClaimsJws(token).getBody();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"id"</span>+claims.getId());</span><br><span class="line">        System.out.println(<span class="string">"Subject"</span>+claims.getSubject());</span><br><span class="line">        System.out.println(<span class="string">"IssuedAt"</span>+claims.getIssuedAt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如图：</p><p><img src="/2018/12/02/感性认识JWT/3.png" alt="1543759769057"></p><h2 id="生产中的JWT"><a href="#生产中的JWT" class="headerlink" title="生产中的JWT"></a>生产中的JWT</h2><p>在企业级系统中，通常内部会有非常多的工具平台供大家使用，比如人力资源，代码管理，日志监控，预算申请等等。如果每一个平台都实现自己的用户体系的话无疑是巨大的浪费，所以公司内部会有一套公用的用户体系，用户只要登陆之后，就能够访问所有的系统。</p><p>这就是 <strong>单点登录（SSO: Single Sign-On）</strong></p><p>SSO 是一类解决方案的统称，而在具体的实施方面，一般有两种策略可供选择：</p><ol><li>SAML 2.0</li><li>OAuth 2.0</li></ol><p>欲扬先抑，先说说几个重要的知识点。</p><h3 id="Authentication-VS-Authorisation"><a href="#Authentication-VS-Authorisation" class="headerlink" title="Authentication VS Authorisation"></a>Authentication VS Authorisation</h3><ul><li><p>Authentication: 身份鉴别，鉴权，以下简称认证</p><p><strong>认证</strong> 的作用在于认可你有权限访问系统，用于鉴别访问者是否是合法用户。负责认证的服务通常称为 Authorization Server 或者 Identity Provider，以下简称 <strong>IdP</strong></p></li><li><p>Authorisation: 授权</p><p> <strong>授权</strong> 用于决定你有访问哪些资源的权限。大多数人不会区分这两者的区别，因为站在用户的立场上。而作为系统的设计者来说，这两者是有差别的，这是不同的两个工作职责，我们可以只需要认证功能，而不需要授权功能，甚至不需要自己实现认证功能，而借助 Google 的认证系统，即用户可以用 Google 的账号进行登陆。负责提供资源（API调用）的服务称为 Resource Server 或者 Service Provider，以下简称 <strong>SP</strong></p></li></ul><h3 id="SMAL-2-0"><a href="#SMAL-2-0" class="headerlink" title="SMAL 2.0"></a>SMAL 2.0</h3><p><img src="/2018/12/02/感性认识JWT/smalflow.png" alt="smal flow"></p><h3 id="OAuth（JWT）"><a href="#OAuth（JWT）" class="headerlink" title="OAuth（JWT）"></a>OAuth（JWT）</h3><p>OAuth（开放授权）是一个开放的授权标准，允许用户让第三方应用访问该用户在 某一web服务上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。</p><p>流程可以参考如下：</p><p><img src="/2018/12/02/感性认识JWT/1.png" alt="oauth"></p><p>简单的来说，就是你要访问一个应用服务，先找它要一个<code>request token</code>（请求令牌），再把这个<code>request token</code>发到第三方认证服务器，此时第三方认证服务器会给你一个<code>aceess token</code>（通行令牌）, 有了<code>aceess token</code>你就可以使用你的应用服务了。</p><p>注意图中第4步兑换 <code>access token</code> 的过程中，很多第三方系统，如Google ，并不会仅仅返回 <code>access token</code>，还会返回额外的信息，这其中和之后更新相关的就是 <code>refresh token</code>。一旦 <code>access token</code>过期，你就可以通过 <code>refresh token</code> 再次请求 <code>access token</code>。</p><p><img src="/2018/12/02/感性认识JWT/refresh-token.png" alt="refresh token"></p><p>当然了，流程是根据你的请求方式和访问的资源类型而定的，业务很多也是不一样的，我这是简单的聊聊。</p><p>现在这种方法比较常见，常见的譬如使用QQ快速登陆，用的基本的都是这种方法。</p><h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><p>我们用一个很火的开源项目<a href="https://gitee.com/minull/ace-security" target="_blank" rel="noopener">Cloud-Admin</a>为栗子，来分析一下jwt的应用。</p><p>Cloud-Admin是基于Spring Cloud微服务化开发平台，具有统一授权、认证后台管理系统，其中包含具备用户管理、资源权限管理、网关API管理等多个模块，支持多业务系统并行开发。</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="/2018/12/02/感性认识JWT/5.png" alt="1543763543823"></p><p>鉴权中心功能在<code>ace-auth</code>与<code>ace-gate</code>下。</p><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><p>下面是官方提供的架构模型。</p><p><img src="/2018/12/02/感性认识JWT/6.png" alt="image.png"></p><p>可以看到，<code>AuthServer</code>在架构的中心环节，要访问服务，必须需要鉴权中心的JWT鉴权。</p><h3 id="鉴权中心服务端代码解读"><a href="#鉴权中心服务端代码解读" class="headerlink" title="鉴权中心服务端代码解读"></a>鉴权中心服务端代码解读</h3><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><p>先看实体类，这里鉴权中心定义了一组客户端实体，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"auth_client"</span>)</span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String locked = <span class="string">"0"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"crt_time"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date crtTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"crt_user"</span>)</span><br><span class="line">    <span class="keyword">private</span> String crtUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"crt_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String crtName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"crt_host"</span>)</span><br><span class="line">    <span class="keyword">private</span> String crtHost;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"upd_time"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date updTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"upd_user"</span>)</span><br><span class="line">    <span class="keyword">private</span> String updUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"upd_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String updName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"upd_host"</span>)</span><br><span class="line">    <span class="keyword">private</span> String updHost;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String attr1;</span><br><span class="line">    <span class="keyword">private</span> String attr2;</span><br><span class="line">    <span class="keyword">private</span> String attr3;</span><br><span class="line">    <span class="keyword">private</span> String attr4;</span><br><span class="line">    <span class="keyword">private</span> String attr5;</span><br><span class="line">    <span class="keyword">private</span> String attr6;</span><br><span class="line">    <span class="keyword">private</span> String attr7;</span><br><span class="line">    <span class="keyword">private</span> String attr8;</span><br></pre></td></tr></table></figure><p>对应数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`auth_client`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`code`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'服务编码'</span>,</span><br><span class="line">  <span class="string">`secret`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'服务密钥'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'服务名'</span>,</span><br><span class="line">  <span class="string">`locked`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'是否锁定'</span>,</span><br><span class="line">  <span class="string">`description`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'描述'</span>,</span><br><span class="line">  <span class="string">`crt_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`crt_user`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建人'</span>,</span><br><span class="line">  <span class="string">`crt_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建人姓名'</span>,</span><br><span class="line">  <span class="string">`crt_host`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建主机'</span>,</span><br><span class="line">  <span class="string">`upd_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">  <span class="string">`upd_user`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新人'</span>,</span><br><span class="line">  <span class="string">`upd_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新姓名'</span>,</span><br><span class="line">  <span class="string">`upd_host`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新主机'</span>,</span><br><span class="line">  <span class="string">`attr1`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`attr2`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`attr3`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`attr4`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`attr5`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`attr6`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`attr7`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`attr8`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">14</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure><p>这些是每组微服务客户端的信息</p><p>第二个实体类，就是客户端_服务的实体，也就是对应着那些微服务客户端能调用哪些微服务客户端：</p><p>大概对应的就是微服务间调用权限关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"auth_client_service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"service_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serviceId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"client_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"crt_time"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date crtTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"crt_user"</span>)</span><br><span class="line">    <span class="keyword">private</span> String crtUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"crt_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String crtName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"crt_host"</span>)</span><br><span class="line">    <span class="keyword">private</span> String crtHost;&#125;</span><br></pre></td></tr></table></figure><h4 id="接口层"><a href="#接口层" class="headerlink" title="接口层"></a>接口层</h4><p>我们跳着看，先看接口层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"jwt"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jwt.token-header&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String tokenHeader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthService authService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"token"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectRestResponse&lt;String&gt; <span class="title">createAuthenticationToken</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestBody JwtAuthenticationRequest authenticationRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(authenticationRequest.getUsername()+<span class="string">" require logging..."</span>);</span><br><span class="line">        <span class="keyword">final</span> String token = authService.login(authenticationRequest);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ObjectRestResponse&lt;&gt;().data(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"refresh"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectRestResponse&lt;String&gt; <span class="title">refreshAndGetAuthenticationToken</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String token = request.getHeader(tokenHeader);</span><br><span class="line">        String refreshedToken = authService.refresh(token);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ObjectRestResponse&lt;&gt;().data(refreshedToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"verify"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="keyword">public</span> ObjectRestResponse&lt;?&gt; verify(String token) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        authService.validate(token);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ObjectRestResponse&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里放出了三个接口</p><p>先说第一个接口，创建<code>token</code>。</p><p>具体逻辑如下：<br>每一个用户<strong>登陆</strong>进来时，都会进入这个环节。根据request中用户的用户名和密码，利用<code>feign</code>客户端的拦截器拦截request，然后使用作者写的<code>JwtTokenUtil</code>里面的各种方法取出token中的key和密钥，验证token是否正确，正确则用<code>authService.login(authenticationRequest);</code>的方法返回出去一个新的token。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(JwtAuthenticationRequest authenticationRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        UserInfo info = userService.validate(authenticationRequest);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(info.getId())) &#123;</span><br><span class="line">            <span class="keyword">return</span> jwtTokenUtil.generateToken(<span class="keyword">new</span> JWTInfo(info.getUsername(), info.getId() + <span class="string">""</span>, info.getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UserInvalidException(<span class="string">"用户不存在或账户密码错误!"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下图是详细逻辑图：</p><p><img src="/2018/12/02/感性认识JWT/model.png" alt="model"></p><h3 id="鉴权中心客户端代码"><a href="#鉴权中心客户端代码" class="headerlink" title="鉴权中心客户端代码"></a>鉴权中心客户端代码</h3><h4 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h4><p>作者写了个注解的入口，使用<code>@EnableAceAuthClient</code>即自动开启微服务(客户端)的鉴权管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Import</span>(AutoConfiguration.class)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAceAuthClient &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>接着沿着注解的入口看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(&#123;<span class="string">"com.github.wxiaoqi.security.auth.client"</span>,<span class="string">"com.github.wxiaoqi.security.auth.common.event"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ServiceAuthConfig <span class="title">getServiceAuthConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServiceAuthConfig();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">UserAuthConfig <span class="title">getUserAuthConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserAuthConfig();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解会自动的将客户端的用户token和服务token的关键信息加载到bean中</p><h4 id="feigin拦截器"><a href="#feigin拦截器" class="headerlink" title="feigin拦截器"></a>feigin拦截器</h4><p>作者重写了<code>okhttp3</code>拦截器的方法，每一次微服务客户端请求的token都会被拦截下来，验证服务调用服务的token和用户调用服务的token是否过期，过期则返回新的token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request newRequest = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (chain.request().url().toString().contains(<span class="string">"client/token"</span>)) &#123;</span><br><span class="line">            newRequest = chain.request()</span><br><span class="line">                    .newBuilder()</span><br><span class="line">                    .header(userAuthConfig.getTokenHeader(), BaseContextHandler.getToken())</span><br><span class="line">                    .build();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newRequest = chain.request()</span><br><span class="line">                    .newBuilder()</span><br><span class="line">                    .header(userAuthConfig.getTokenHeader(), BaseContextHandler.getToken())</span><br><span class="line">                    .header(serviceAuthConfig.getTokenHeader(), serviceAuthUtil.getClientToken())</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line">        Response response = chain.proceed(newRequest);</span><br><span class="line">        <span class="keyword">if</span> (HttpStatus.FORBIDDEN.value() == response.code()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.body().string().contains(String.valueOf(CommonConstants.EX_CLIENT_INVALID_CODE))) &#123;</span><br><span class="line">                log.info(<span class="string">"Client Token Expire,Retry to request..."</span>);</span><br><span class="line">                serviceAuthUtil.refreshClientToken();</span><br><span class="line">                newRequest = chain.request()</span><br><span class="line">                        .newBuilder()</span><br><span class="line">                        .header(userAuthConfig.getTokenHeader(), BaseContextHandler.getToken())</span><br><span class="line">                        .header(serviceAuthConfig.getTokenHeader(), serviceAuthUtil.getClientToken())</span><br><span class="line">                        .build();</span><br><span class="line">                response = chain.proceed(newRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="spring容器的拦截器"><a href="#spring容器的拦截器" class="headerlink" title="spring容器的拦截器"></a>spring容器的拦截器</h4><p>第二道拦截器是来自spring容器的，第一道feign拦截器只是验证了两个token是否过期，但token真实的权限却没验证。接下来就要验证两个token的权限问题了。</p><p>服务调用权限代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        <span class="comment">// 配置该注解，说明不进行服务拦截</span></span><br><span class="line">        IgnoreClientToken annotation = handlerMethod.getBeanType().getAnnotation(IgnoreClientToken.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">            annotation = handlerMethod.getMethodAnnotation(IgnoreClientToken.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(annotation!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String token = request.getHeader(serviceAuthConfig.getTokenHeader());</span><br><span class="line">        IJWTInfo infoFromToken = serviceAuthUtil.getInfoFromToken(token);</span><br><span class="line">        String uniqueName = infoFromToken.getUniqueName();</span><br><span class="line">        <span class="keyword">for</span>(String client:serviceAuthUtil.getAllowedClient())&#123;</span><br><span class="line">            <span class="keyword">if</span>(client.equals(uniqueName))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClientForbiddenException(<span class="string">"Client is Forbidden!"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>用户权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        <span class="comment">// 配置该注解，说明不进行用户拦截</span></span><br><span class="line">        IgnoreUserToken annotation = handlerMethod.getBeanType().getAnnotation(IgnoreUserToken.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">            annotation = handlerMethod.getMethodAnnotation(IgnoreUserToken.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler);</span><br><span class="line">        &#125;</span><br><span class="line">        String token = request.getHeader(userAuthConfig.getTokenHeader());</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(token)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.getCookies() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Cookie cookie : request.getCookies()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cookie.getName().equals(userAuthConfig.getTokenHeader())) &#123;</span><br><span class="line">                        token = cookie.getValue();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        IJWTInfo infoFromToken = userAuthUtil.getInfoFromToken(token);</span><br><span class="line">        BaseContextHandler.setUsername(infoFromToken.getUniqueName());</span><br><span class="line">        BaseContextHandler.setName(infoFromToken.getName());</span><br><span class="line">        BaseContextHandler.setUserID(infoFromToken.getId());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BaseContextHandler.remove();</span><br><span class="line">        <span class="keyword">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="spring-cloud-gateway网关代码"><a href="#spring-cloud-gateway网关代码" class="headerlink" title="spring cloud gateway网关代码"></a>spring cloud gateway网关代码</h3><p>该框架中所有的请求都会走网关服务（ace-gatev2），通过网关，来验证token是否过期异常，验证token是否不存在，验证token是否有权限进行服务。</p><p>下面是核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange serverWebExchange, GatewayFilterChain gatewayFilterChain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"check token and user permission...."</span>);</span><br><span class="line">        LinkedHashSet requiredAttribute = serverWebExchange.getRequiredAttribute(ServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR);</span><br><span class="line">        ServerHttpRequest request = serverWebExchange.getRequest();</span><br><span class="line">        String requestUri = request.getPath().pathWithinApplication().value();</span><br><span class="line">        <span class="keyword">if</span> (requiredAttribute != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Iterator&lt;URI&gt; iterator = requiredAttribute.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">                URI next = iterator.next();</span><br><span class="line">                <span class="keyword">if</span>(next.getPath().startsWith(GATE_WAY_PREFIX))&#123;</span><br><span class="line">                    requestUri = next.getPath().substring(GATE_WAY_PREFIX.length());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> String method = request.getMethod().toString();</span><br><span class="line">        BaseContextHandler.setToken(<span class="keyword">null</span>);</span><br><span class="line">        ServerHttpRequest.Builder mutate = request.mutate();</span><br><span class="line">        <span class="comment">// 不进行拦截的地址</span></span><br><span class="line">        <span class="keyword">if</span> (isStartWith(requestUri)) &#123;</span><br><span class="line">            ServerHttpRequest build = mutate.build();</span><br><span class="line">            <span class="keyword">return</span> gatewayFilterChain.filter(serverWebExchange.mutate().request(build).build());</span><br><span class="line">        &#125;</span><br><span class="line">        IJWTInfo user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            user = getJWTUser(request, mutate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"用户Token过期异常"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> getVoidMono(serverWebExchange, <span class="keyword">new</span> TokenForbiddenResponse(<span class="string">"User Token Forbidden or Expired!"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;PermissionInfo&gt; permissionIfs = userService.getAllPermissionInfo();</span><br><span class="line">        <span class="comment">// 判断资源是否启用权限约束</span></span><br><span class="line">        Stream&lt;PermissionInfo&gt; stream = getPermissionIfs(requestUri, method, permissionIfs);</span><br><span class="line">        List&lt;PermissionInfo&gt; result = stream.collect(Collectors.toList());</span><br><span class="line">        PermissionInfo[] permissions = result.toArray(<span class="keyword">new</span> PermissionInfo[]&#123;&#125;);</span><br><span class="line">        <span class="keyword">if</span> (permissions.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (checkUserPermission(permissions, serverWebExchange, user)) &#123;</span><br><span class="line">                <span class="keyword">return</span> getVoidMono(serverWebExchange, <span class="keyword">new</span> TokenForbiddenResponse(<span class="string">"User Forbidden!Does not has Permission!"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 申请客户端密钥头</span></span><br><span class="line">        mutate.header(serviceAuthConfig.getTokenHeader(), serviceAuthUtil.getClientToken());</span><br><span class="line">        ServerHttpRequest build = mutate.build();</span><br><span class="line">        <span class="keyword">return</span> gatewayFilterChain.filter(serverWebExchange.mutate().request(build).build());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/12/02/感性认识JWT/7.png" alt="1543848104059"></p><h3 id="cloud-admin总结"><a href="#cloud-admin总结" class="headerlink" title="cloud admin总结"></a>cloud admin总结</h3><p>总的来说，鉴权和网关模块就说完了。作者代码构思极其精妙，使用在大型的权限系统中，可以巧妙的减少耦合性，让服务鉴权粒度细化，方便管理。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> </p><p>本篇为原创内容，已在<a href="https://blog.tengshe789.tech/2018/12/02/%E6%84%9F%E6%80%A7%E8%AE%A4%E8%AF%86jwt/#more" target="_blank" rel="noopener">个人博客</a>率先发表，随后看心情可能会在CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，<strong>缘分呢</strong>兄弟。赶快加个好友，咱们两个想个号码， 买个彩票，先挣他个几百万😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没写博客了，因为最近公司要求我学&lt;code&gt;spring cloud&lt;/code&gt;，早点将以前软件迁移到新的架构上。所以我那个拼命的学呐，总是图快，很多关键的笔记没有做好记录，现在又遗忘了很多关键的技术点，极其罪恶！&lt;/p&gt;
&lt;p&gt;现在想一想，还是踏踏实实的走比较好。这
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="源码" scheme="https://tengshe789.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
      <category term="学好分布式架构" scheme="https://tengshe789.github.io/tags/%E5%AD%A6%E5%A5%BD%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
      <category term="网络" scheme="https://tengshe789.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>光鲜下的china</title>
    <link href="https://tengshe789.github.io/2018/11/03/%E5%88%86%E4%BA%AB%E5%BE%AE%E5%8D%9A/"/>
    <id>https://tengshe789.github.io/2018/11/03/分享微博/</id>
    <published>2018-11-03T10:56:32.000Z</published>
    <updated>2019-11-20T13:39:41.227Z</updated>
    
    <content type="html"><![CDATA[<p>看到一篇微博文章，分享一下。</p><p><img src="/2018/11/03/分享微博/1.png" alt="微博"></p><p>为什么分享这篇文章呢？</p><p>其实现在，我对现在的环境还是抱有一点悲观态度的。今天和十年前的今天不一样，十年前，我小学6年级，北京奥运会，红歌洋溢，欢声笑语，那时候，谷歌没有退出中国，Facebook还能继续登陆，GFW根本不存在。那时候，我们不发达，但是我们每家安居乐业。</p><p>随后汶川大地震，没个中国人众志成城，我们没钱，但是我们有物资。每个人都会自动献出自己的一片心意。大街上大家伙自发向上的踊跃报名志愿者，全中国人民众志成城。那时候，我们不发达，但是我们自由团结。</p><p>再后来，金融危机，举世萧条，我们拥有优良的社会制度，我们也遭受着一系列的损失，但是远不如其他国家那么强烈。在这期间，我们不光自我改革，而且还援助整个世界。那时候，我们不发达，但是我们制度先进。</p><p>现在呢？</p><p>我长大了，成年了。21岁，一个值得娓娓道来的年龄，一个需要担起责任的年龄，一个初入社会的年龄。一个男人，又是一个家族的独生子，需要养老，需要找媳妇，需要实现自我责任与义务的年龄。</p><p>可是在现在的环境下，房价涨了，房价（青岛）从十年前的4000翻到现在的30000；就业少了，就业生/当届应届生 的比例一年比一年少；税收高了，高新产业税务严重，消费产品一般人消费不起来；GFW来了，世界也变小了，甚至我们生而为人-说话的权力，都被削弱了。</p><p><strong>好失望</strong>。</p><p>不光是我，肯定也有很多和我一个年龄的人，承受着和我一样的困扰。憋在心里好难受啊，想说！想说！想把它像痘痘一样挤出来，不要让他变大，不要让他变黄。</p><p>可是，已经很少有人说话了。关于政治，关于中国左倾，很少有人出来说话了。说了，就是不懂事；说了，就是不尊老；说了，就是不爱国。</p><blockquote><p>解决问题的最好方法就是解决说出问题的人。 </p></blockquote><p>我不敢说，我有父母，我有爱人，说话的代价太大了，我承受不起。</p><p>父母让我做公务员，我觉得很不错，因为我觉得总有和我一样的人，热爱这片土地，这爱这个国家，却又看见这世界矛盾不公平的现象。</p><p><strong>但我放弃了。</strong>理由，就是那样。</p><p>我很笨，所以我选择学计算机，安安心心的做一个技术人员，安安心心的跟着人民群众走，坚决拥护党的正确领导。做一个乌龟，做一个书呆子，慢慢积德，没准，下辈子我就会富裕了呢！</p><blockquote><p>当我沉默的时候，我觉得很充实，当我开口说话，就感到了空虚。   –鲁迅</p></blockquote>]]></content>
    
    <summary type="html">
    
      不当言论警告，文章访问需要密码！
    
    </summary>
    
    
      <category term="日常" scheme="https://tengshe789.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>秋招失败了，还是要继续</title>
    <link href="https://tengshe789.github.io/2018/11/03/%E5%8A%A0%E6%B2%B92/"/>
    <id>https://tengshe789.github.io/2018/11/03/加油2/</id>
    <published>2018-11-03T10:21:58.000Z</published>
    <updated>2019-11-20T13:39:41.236Z</updated>
    
    <content type="html"><![CDATA[<p>在济南本地投了几份简历，收到了五六份offer，感觉除了一家小公司以外以外，都不是很满意。官僚作风，技术封闭，干活累，不尊重应聘者，什么都有。</p><p><strong>人生好迷茫，做人好累啊。</strong></p><p>今天女朋友逼我，问我意向城市，她性子急，她想根据我选的工作地点找工作。可是我太弱小了，我找不到工作，好烦。好惆怅。她和我说我们可能要分手了，工作地点不同，两方不会在一起的。我很难受，可现实就是这样，菜是原罪，而我恰好就很菜。</p><p>她是个很懒的人，也是个经常焦虑的人。今年秋招，她只去了一个面试，结果过了，工作地点在青岛即墨，一个不是很发达的地方，和我老家在一个市，但是距离非常远，工资4K，外贸专员。我不看好她的工作，主要是地点不好，不是市区，我让他放弃，可她不甘心，说怪我没定下来地点，我不靠谱。我们吵了很多次，没有结果。</p><p><strong>超级想转行~</strong></p><p>有时候真的觉得，计算机方面我有爱好，但是却没有这个能力。</p><p>如果我做管理，结果会怎么样呢？如果我做营销，结果会怎么样呢？如果我做教书，结果会怎么样呢？我不知道，但我认为我会做的很好，在或者，会非常不甘心吧。</p><p>不管如何，还是慢慢的活着吧。就像我父母最开始的愿望，让我安安稳稳的活着，最好衣食无忧，也不要做个富人，受人嫉妒，做个小小的勤劳的蚂蚁就好。</p><p>这个月中旬我要去实习了，去那家，一开始给我面试很和蔼又感觉很有深度的面试官所在的公司。生活还在继续，<strong>我还是会慢慢活着，但是我永远不会停止我对自己的追求！</strong></p><blockquote><p>优秀的人不在于顺境如何过活，而是在逆境活出精彩。难熬的日子总会出现，过去了就是过去，更加坚韧。</p></blockquote><p>鸡汤点到为止，要开始吃饭了，秋招只是工作生涯的开始，起跑线落户的事不是没经历过，现在开始努力，最差不过下一站春招，没再怕的。</p><p>Nothing to lose,everything will be !  </p>]]></content>
    
    <summary type="html">
    
      负面情绪警告，文章访问受限！
    
    </summary>
    
    
      <category term="日常" scheme="https://tengshe789.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="生活" scheme="https://tengshe789.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="吐槽" scheme="https://tengshe789.github.io/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>技术学习路线图</title>
    <link href="https://tengshe789.github.io/2018/11/01/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/"/>
    <id>https://tengshe789.github.io/2018/11/01/技术学习路线图/</id>
    <published>2018-11-01T12:40:11.000Z</published>
    <updated>2019-11-20T13:39:41.407Z</updated>
    
    <content type="html"><![CDATA[<p>分享一下学习技术的思维脑图，主要是<strong>架构师图谱，java知识图谱，前端技术学习导图，大数据与云计算技能，DevOps相关图谱</strong>，留作个人备份用。素材全部搜集于网络，侵删！</p><h3 id="架构师图谱"><a href="#架构师图谱" class="headerlink" title="架构师图谱"></a>架构师图谱</h3><p><img src="/2018/11/01/技术学习路线图/1.1 架构师图谱.jpg" alt="1.1 架构师图谱"></p><p><img src="/2018/11/01/技术学习路线图/1.2 Java架构师图谱.jpg" alt="1.2 Java架构师图谱"></p><p><img src="/2018/11/01/技术学习路线图/1.3 微服务架构秘籍.jpg" alt="1.3 微服务架构秘籍"></p><p><img src="/2018/11/01/技术学习路线图/1.4 一致性图谱.jpg" alt="1.4 一致性图谱"></p><p><img src="/2018/11/01/技术学习路线图/1.5 互联网大流量的方法.jpg" alt="1.5 互联网大流量的方法"></p><p><img src="/2018/11/01/技术学习路线图/1.6 安全秘籍.jpg" alt="1.6 安全秘籍"></p><p><img src="/2018/11/01/技术学习路线图/1.7 阿里巴巴常用小框架.jpg" alt="1.7 阿里巴巴常用小框架"></p><p><img src="/2018/11/01/技术学习路线图/1.8 架构方法论图谱.jpg" alt="1.8 架构方法论图谱"></p><p><img src="/2018/11/01/技术学习路线图/1.9 设计模式秘籍图谱.jpg" alt="1.9 设计模式秘籍图谱"></p><p><img src="/2018/11/01/技术学习路线图/微信图片_20180915145231.jpg" alt="云原生架构图"></p><h3 id="java知识图谱"><a href="#java知识图谱" class="headerlink" title="java知识图谱"></a>java知识图谱</h3><h4 id="java框架图谱"><a href="#java框架图谱" class="headerlink" title="java框架图谱"></a>java框架图谱</h4><p><img src="/2018/11/01/技术学习路线图/2.3 Java集合图谱.jpg" alt="2.3 Java集合图谱"></p><p><img src="/2018/11/01/技术学习路线图/2.4 Java集合类图.jpg" alt="2.4 Java集合类图"></p><p><img src="/2018/11/01/技术学习路线图/2.5 Java List类图.jpg" alt="2.5 Java List类图"></p><p><img src="/2018/11/01/技术学习路线图/2.6 Java Map类图.jpg" alt="2.6 Java Map类图"></p><p><img src="/2018/11/01/技术学习路线图/2.7 Java Set类图.jpg" alt="2.7 Java Set类图"></p><p><img src="/2018/11/01/技术学习路线图/2.8 Java TCP IP.png" alt="2.8 Java TCP IP"></p><h4 id="Java并发知识图谱"><a href="#Java并发知识图谱" class="headerlink" title="Java并发知识图谱"></a>Java并发知识图谱</h4><p><img src="/2018/11/01/技术学习路线图/Java并发知识图谱.png" alt="Java并发知识图谱"></p><p><img src="/2018/11/01/技术学习路线图/2.2 Java并发图谱.jpg" alt="2.2 Java并发图谱"></p><h3 id="前端技术学习导图"><a href="#前端技术学习导图" class="headerlink" title="前端技术学习导图"></a>前端技术学习导图</h3><p><img src="/2018/11/01/技术学习路线图/现代前端技术解析_V2@高清.jpg" alt="前端技术学习导图"></p><p><img src="/2018/11/01/技术学习路线图/5.3 前端技能图谱.jpg" alt="5.3 前端技能图谱"></p><h3 id="大数据与云计算技能"><a href="#大数据与云计算技能" class="headerlink" title="大数据与云计算技能"></a>大数据与云计算技能</h3><p><img src="/2018/11/01/技术学习路线图/218695c599e9e09aceb41e593bea4397.png" alt="某课堂教学大纲"></p><p><img src="/2018/11/01/技术学习路线图/3.1 Hadoop技能图谱.jpg" alt="3.1 Hadoop技能图谱"></p><p><img src="/2018/11/01/技术学习路线图/3.2 大数据技能图谱.jpg" alt="3.2 大数据技能图谱"></p><p><img src="/2018/11/01/技术学习路线图/4.1 云计算图谱.jpg" alt="4.1 云计算图谱"></p><p><img src="/2018/11/01/技术学习路线图/4.2 云计算技能图谱.jpg" alt="4.2 云计算技能图谱"></p><p><img src="/2018/11/01/技术学习路线图/5.2 OpenResty技能图谱.jpg" alt="5.2 OpenResty技能图谱"></p><h3 id="ios技能"><a href="#ios技能" class="headerlink" title="ios技能"></a>ios技能</h3><p><img src="/2018/11/01/技术学习路线图/5.1 iOS技能图谱.jpg" alt="5.1 iOS技能图谱"></p><h3 id="DevOps相关图谱"><a href="#DevOps相关图谱" class="headerlink" title="DevOps相关图谱"></a>DevOps相关图谱</h3><p><img src="/2018/11/01/技术学习路线图/5.4 容器技能图谱.jpg" alt="5.4 容器技能图谱"></p><p><img src="/2018/11/01/技术学习路线图/5.5 嵌入式开发技能图谱.jpg" alt="5.5 嵌入式开发技能图谱"></p><p><img src="/2018/11/01/技术学习路线图/5.6 开发语言宝典.jpg" alt="5.6 开发语言宝典"></p><p><img src="/2018/11/01/技术学习路线图/5.7 移动端测试图谱.jpg" alt="5.7 移动端测试图谱"></p><p><img src="/2018/11/01/技术学习路线图/5.8 运维技能图谱.jpg" alt="5.8 运维技能图谱"></p><p><img src="/2018/11/01/技术学习路线图/5.9 软件工程图谱.jpeg" alt="5.9 软件工程图谱"></p><p><img src="/2018/11/01/技术学习路线图/5.10 DevOps图谱.jpg" alt="5.10 DevOps图谱"></p><p><img src="/2018/11/01/技术学习路线图/5.11 前端开发图谱.jpg" alt="5.11 前端开发图谱"></p><p><img src="/2018/11/01/技术学习路线图/5.12 后端开发图谱.jpg" alt="5.12 后端开发图谱"></p><p><img src="/2018/11/01/技术学习路线图/5.13 软件发布流程.jpeg" alt="5.13 软件发布流程"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分享一下学习技术的思维脑图，主要是&lt;strong&gt;架构师图谱，java知识图谱，前端技术学习导图，大数据与云计算技能，DevOps相关图谱&lt;/strong&gt;，留作个人备份用。素材全部搜集于网络，侵删！&lt;/p&gt;
&lt;h3 id=&quot;架构师图谱&quot;&gt;&lt;a href=&quot;#架构师图谱&quot; 
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="分享" scheme="https://tengshe789.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>未来の目標</title>
    <link href="https://tengshe789.github.io/2018/10/27/%E6%9C%AA%E6%9D%A5%E3%81%AE%E7%9B%AE%E6%A8%99/"/>
    <id>https://tengshe789.github.io/2018/10/27/未来の目標/</id>
    <published>2018-10-27T09:20:25.000Z</published>
    <updated>2019-11-20T13:39:41.543Z</updated>
    
    <content type="html"><![CDATA[<p>很多时候，生活并不如意；很多时候，理想并不能实现；路很长，身体很累，可还是一直要走下去。</p><hr><h3 id="始"><a href="#始" class="headerlink" title="始"></a>始</h3><p>我是一个一个普普通通的双非学校的大学生，来自山东的二十线小城市，家境一般，生活很安逸。可能小时候受到的熏陶比较多吧，家里人比较护犊，接触的事情也很少。平时没啥习惯，最大的爱好是捣鼓计算机。</p><p>妈妈的眼界很广，我小时候三年级，妈妈教了flash动画，初中傻了吧唧的的玩国外游戏，因此英语还算可以，高中自己学diy电脑，搞机器。</p><p>一步一步的成长，到了快上大学的年纪，自己啥也不知道，只靠着父母。父母很爱我，给我选了一个网络工程专业。进了大学，什么都变了，人变了，楼变了，世界变了。这里的人温文尔雅，这里的人衣着整齐，我动心了，生活在这里好幸福。</p><p>我在慢慢懂事。</p><p>第一年，我去了学生会，我去了一家世界500强实习，同时还找了一份修电脑的兼职，又对一个女孩产生了好感。</p><p>第二年，慢慢的摸索，我继续我的老路。我认为我自己做的决定，很完善，很好，我沉浸在其中。</p><p>第三年，恋爱余温降下来了，现实也来了。青春期的烦恼接踵而至，“我在哪？我为什么要这么做？”，我总是在自己探索，我总是比别人晚发育很多。</p><p>有这样一个故事，一名记者看见农村的一个正在放羊的小孩，问他“你的理想是什么？”<br>小孩回答说：“放羊！”<br>“羊儿喂大了干什么？”<br>“卖钱！”<br>“有了卖羊儿的钱干什么？”<br>“娶老婆！”<br>“娶老婆干什么？”<br>“生小孩！”<br>“生小孩来干什么？”<br>“放羊！”<br>……</p><p>放羊的小孩对世界的理解也就是：放羊挣钱娶老婆生小孩再放羊。对外面世界的了解可能趋向于了零，在他的世界里，这就是美好的一切，幸福的生活。对世界认识的局限性会导致思维的局限性，思维的局限性会导致目标的局限性，目标的局限性最终导致行为的局限性，从而影响人生中的各种选择。</p><p>我，会放羊，但是我不想一直放羊。我需要努力，我需要上进，我想赚钱，我想给我爱的人最好的。</p><p>所以，我想做程序员。</p><h3 id="走"><a href="#走" class="headerlink" title="走"></a>走</h3><p>我做过很多事情，很多没有目标。可做程序员，没有目标是不行的。现在是2018年了，我面临着非常巨大的竞争压力。这一年，正好赶上了90后的末班潮，全国学校都已经扩容完毕，数不胜数的，比我优秀的211，985大学生研究生，疯狂的挤入人才市场。可是，今年的人才供求却远不如去年前年。我，觉得我失业了。</p><p>我不甘心，我投了很多很多面试，有的长辈对我大吼大叫，说我这样是不可能找到工作的，有的长辈连看都不看，只是冷漠的说声“你走吧”。</p><p>望尽世俗常态，唯有提升自己才是根本。</p><p>所以我想努力，我想成为我自己。</p><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><p>在这里我定下目标，三年内，需要学会或者精通以下知识：</p><ul><li style="list-style: none"><input type="checkbox" checked> 数据结构<ul><li style="list-style: none"><input type="checkbox" checked> 队列</li><li style="list-style: none"><input type="checkbox" checked> 集合</li><li style="list-style: none"><input type="checkbox" checked> 链表、数组</li><li style="list-style: none"><input type="checkbox" checked> 字典、关联数组</li><li style="list-style: none"><input type="checkbox" checked> 栈</li><li style="list-style: none"><input type="checkbox" checked> 树<ul><li style="list-style: none"><input type="checkbox" checked> 二叉树</li><li style="list-style: none"><input type="checkbox" checked> 完全二叉树</li><li style="list-style: none"><input type="checkbox" checked> 平衡二叉树</li><li style="list-style: none"><input type="checkbox" checked> 二叉查找树（BST）</li><li style="list-style: none"><input type="checkbox" checked> B，B+，B - [x]树</li><li style="list-style: none"><input type="checkbox" checked> 红黑树</li><li style="list-style: none"><input type="checkbox" checked> LSM 树</li></ul></li><li style="list-style: none"><input type="checkbox" checked> 常用算法<ul><li style="list-style: none"><input type="checkbox" checked> 排序、查找算法<ul><li style="list-style: none"><input type="checkbox" checked> 选择排序</li><li style="list-style: none"><input type="checkbox" checked> 冒泡排序</li><li style="list-style: none"><input type="checkbox" checked> 插入排序</li><li style="list-style: none"><input type="checkbox" checked> 快速排序</li><li style="list-style: none"><input type="checkbox" checked> 归并排序</li><li style="list-style: none"><input type="checkbox" checked> 桶排序</li><li style="list-style: none"><input type="checkbox" checked> 计数排序</li><li style="list-style: none"><input type="checkbox" checked> 希尔排序</li><li style="list-style: none"><input type="checkbox" checked> 基数排序</li><li style="list-style: none"><input type="checkbox" checked> 计数排序</li><li style="list-style: none"><input type="checkbox" checked> 二分查找</li><li style="list-style: none"><input type="checkbox" checked> 归并排序</li><li style="list-style: none"><input type="checkbox" checked> Java 中的排序数据结构（arraylist）</li></ul></li><li style="list-style: none"><input type="checkbox" checked> 布隆过滤器</li><li style="list-style: none"><input type="checkbox" checked> 字符串比较<ul><li style="list-style: none"><input type="checkbox" checked> KMP 算法</li></ul></li><li style="list-style: none"><input type="checkbox" checked> 深度优先、广度优先</li><li style="list-style: none"><input type="checkbox" checked> 贪心算法</li><li style="list-style: none"><input type="checkbox" checked> 回溯算法</li><li style="list-style: none"><input type="checkbox" checked> 剪枝算法</li><li style="list-style: none"><input type="checkbox" checked> 动态规划</li><li style="list-style: none"><input type="checkbox" checked> 朴素贝叶斯</li><li style="list-style: none"><input type="checkbox" checked> 最小生成树算法</li><li style="list-style: none"><input type="checkbox" checked> 最短路径算法</li></ul></li><li style="list-style: none"><input type="checkbox" checked> 并发编程<ul><li style="list-style: none"><input type="checkbox" checked> Java 并发</li><li style="list-style: none"><input type="checkbox" checked> 多线程</li><li style="list-style: none"><input type="checkbox" checked> 线程安全</li><li style="list-style: none"><input type="checkbox" checked> 一致性、事务<ul><li style="list-style: none"><input type="checkbox" checked> ACID</li><li style="list-style: none"><input type="checkbox" checked> 事务的隔离级别</li><li style="list-style: none"><input type="checkbox" checked> MVCC</li></ul></li><li style="list-style: none"><input type="checkbox" checked> 锁<ul><li style="list-style: none"><input type="checkbox" checked> Java中的锁和同步类</li><li style="list-style: none"><input type="checkbox" checked> 公平锁 &amp; 非公平锁</li><li style="list-style: none"><input type="checkbox" checked> 悲观锁</li><li style="list-style: none"><input type="checkbox" checked> 乐观锁 &amp; CAS</li><li style="list-style: none"><input type="checkbox" checked> ABA 问题</li><li style="list-style: none"><input type="checkbox" checked> CopyOnWrite容器</li><li style="list-style: none"><input type="checkbox" checked> RingBuffer</li><li style="list-style: none"><input type="checkbox" checked> 可重入锁 &amp; 不可重入锁</li><li style="list-style: none"><input type="checkbox" checked> 互斥锁 &amp; 共享锁</li><li style="list-style: none"><input type="checkbox" checked> 死锁</li></ul></li></ul></li><li style="list-style: none"><input type="checkbox" checked> 操作系统<ul><li style="list-style: none"><input type="checkbox" checked> 计算机原理</li><li style="list-style: none"><input type="checkbox" checked> CPU</li><li style="list-style: none"><input type="checkbox" checked> 内存</li><li style="list-style: none"><input type="checkbox" checked> 进程线程协程</li><li style="list-style: none"><input type="checkbox" checked> Linux</li></ul></li><li style="list-style: none"><input type="checkbox" checked> 设计模式<ul><li style="list-style: none"><input type="checkbox" checked> 23种常见设计模式</li><li style="list-style: none"><input type="checkbox" checked> MVC</li><li style="list-style: none"><input type="checkbox" checked> IOC</li><li style="list-style: none"><input type="checkbox" checked> AOP</li><li style="list-style: none"><input type="checkbox" checked> 设计模式的六大原则</li><li style="list-style: none"><input type="checkbox" checked> 微服务思想<ul><li style="list-style: none"><input type="checkbox" checked> 康威定律</li></ul></li></ul></li><li style="list-style: none"><input type="checkbox" checked> 运维<ul><li style="list-style: none"><input type="checkbox" checked> 常规监控</li><li style="list-style: none"><input type="checkbox" checked> APM</li><li style="list-style: none"><input type="checkbox" checked> 统计分析</li><li style="list-style: none"><input type="checkbox" checked> 持续集成(CI/CD)<ul><li style="list-style: none"><input type="checkbox" checked> 环境分离</li><li style="list-style: none"><input type="checkbox" checked> Jenkins</li></ul></li><li style="list-style: none"><input type="checkbox" checked> 自动化运维</li></ul></li><li style="list-style: none"><input type="checkbox" checked> 运维 ; 统计 ; 技术支持<ul><li style="list-style: none"><input type="checkbox" checked> Jenkins</li><li style="list-style: none"><input type="checkbox" checked> 环境分离<ul><li style="list-style: none"><input type="checkbox" checked> 自动化运维</li></ul></li><li style="list-style: none"><input type="checkbox" checked> Ansible</li><li style="list-style: none"><input type="checkbox" checked> puppet</li><li style="list-style: none"><input type="checkbox" checked> chef<ul><li style="list-style: none"><input type="checkbox" checked> 测试</li></ul></li><li style="list-style: none"><input type="checkbox" checked> TDD 理论</li><li style="list-style: none"><input type="checkbox" checked> 单元测试</li><li style="list-style: none"><input type="checkbox" checked> 压力测试</li><li style="list-style: none"><input type="checkbox" checked> 全链路压测</li><li style="list-style: none"><input type="checkbox" checked> A/B 、灰度、蓝绿测试<ul><li style="list-style: none"><input type="checkbox" checked> 虚拟化</li></ul></li><li style="list-style: none"><input type="checkbox" checked> KVM</li><li style="list-style: none"><input type="checkbox" checked> Xen</li><li style="list-style: none"><input type="checkbox" checked> OpenVZ<ul><li style="list-style: none"><input type="checkbox" checked> 容器技术</li></ul></li><li style="list-style: none"><input type="checkbox" checked> Docker<ul><li style="list-style: none"><input type="checkbox" checked> 云技术</li></ul></li><li style="list-style: none"><input type="checkbox" checked> OpenStack<ul><li style="list-style: none"><input type="checkbox" checked> DevOps</li><li style="list-style: none"><input type="checkbox" checked> 文档管理</li></ul></li></ul></li><li style="list-style: none"><input type="checkbox" checked> 中间件<ul><li style="list-style: none"><input type="checkbox" checked> Web Server<ul><li style="list-style: none"><input type="checkbox" checked> Nginx</li><li style="list-style: none"><input type="checkbox" checked> OpenResty</li><li style="list-style: none"><input type="checkbox" checked> Tengine</li><li style="list-style: none"><input type="checkbox" checked> <a href="apache-httpd">Apache Httpd</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="tomcat">Tomcat</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="架构原理">架构原理</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="调优方案">调优方案</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="jetty">Jetty</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="缓存">缓存</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="本地缓存">本地缓存</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="客户端缓存">客户端缓存</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="服务端缓存">服务端缓存</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="web缓存">Web缓存</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="memcached">Memcached</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="redis">Redis</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="架构">架构</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="回收策略">回收策略</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="tair">Tair</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="消息队列">消息队列</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="消息总线">消息总线</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="消息的顺序">消息的顺序</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="rabbitmq">RabbitMQ</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="rocketmq">RocketMQ</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="activemq">ActiveMQ</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="kafka">Kafka</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="redis-消息推送">Redis 消息推送</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="zeromq">ZeroMQ</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="定时调度">定时调度</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="单机定时调度">单机定时调度</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="分布式定时调度">分布式定时调度</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="rpc">RPC</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="dubbo">Dubbo</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="thrift">Thrift</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="grpc">gRPC</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="数据库中间件">数据库中间件</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="sharding-jdbc">Sharding Jdbc</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="日志系统">日志系统</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="日志搜集">日志搜集</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="配置中心">配置中心</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="api-网关">API 网关</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="网络">网络</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="协议">协议</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="osi-七层协议">OSI 七层协议</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="tcpip">TCP/IP</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http">HTTP</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http20">HTTP2.0</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https">HTTPS</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="网络模型">网络模型</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="epoll">Epoll</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="java-nio">Java NIO</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="kqueue">kqueue</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="连接和短连接">连接和短连接</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="框架">框架</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="零拷贝zero-copy">零拷贝（Zero-copy）</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="序列化二进制协议">序列化(二进制协议)</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="hessian">Hessian</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="protobuf">Protobuf</a></li></ul></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="数据库">数据库</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="基础理论">基础理论</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="数据库设计的三大范式">数据库设计的三大范式</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="mysql">MySQL</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="原理">原理</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="innodb">InnoDB</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="优化">优化</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="索引">索引</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="聚集索引-非聚集索引">聚集索引, 非聚集索引</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="复合索引">复合索引</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="自适应哈希索引ahi">自适应哈希索引(AHI)</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="explain">explain</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="nosql">NoSQL</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="mongodb">MongoDB</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="hbase">Hbase</a></li></ul></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="搜索引擎">搜索引擎</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="搜索引擎原理">搜索引擎原理</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="lucene">Lucene</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="elasticsearch">Elasticsearch</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="solr">Solr</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="sphinx">sphinx</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="性能">性能</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="性能优化方法论">性能优化方法论</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="容量评估">容量评估</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="cdn-网络">CDN 网络</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="连接池">连接池</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="性能调优">性能调优</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="大数据">大数据</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="流式计算">流式计算</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="storm">Storm</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="flink">Flink</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="kafka-stream">Kafka Stream</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="应用场景-1">应用场景</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="hadoop">Hadoop</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="hdfs">HDFS</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="mapreduce">MapReduce</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="yarn">Yarn</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="spark">Spark</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="安全">安全</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="web-安全">web 安全</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="xss">XSS</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="csrf">CSRF</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="sql-注入">SQL 注入</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="hash-dos">Hash Dos</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="脚本注入">脚本注入</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="漏洞扫描工具">漏洞扫描工具</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="验证码">验证码</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="ddos-防范">DDoS 防范</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="用户隐私信息保护">用户隐私信息保护</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="序列化漏洞">序列化漏洞</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="加密解密">加密解密</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="对称加密">对称加密</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="哈希算法">哈希算法</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="非对称加密">非对称加密</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="服务器安全">服务器安全</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="数据安全">数据安全</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="数据备份">数据备份</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="网络隔离">网络隔离</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="内外网分离">内外网分离</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="登录跳板机">登录跳板机</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="授权认证">授权、认证</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="rbac">RBAC</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="oauth20">OAuth2.0</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="双因素认证2fa">双因素认证（2FA）</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="单点登录sso">单点登录(SSO)</a></li></ul></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="常用开源框架">常用开源框架</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="开源协议">开源协议</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="日志框架">日志框架</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="log4jlog4j2">Log4j、Log4j2</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="logback">Logback</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="orm">ORM</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="网络框架">网络框架</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="web-框架">Web 框架</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="spring-家族">Spring 家族</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="工具框架">工具框架</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="分布式设计">分布式设计</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="扩展性设计">扩展性设计</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="稳定性--高可用">稳定性 &amp; 高可用</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="硬件负载均衡">硬件负载均衡</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="软件负载均衡">软件负载均衡</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="限流">限流</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="应用层容灾">应用层容灾</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="跨机房容灾">跨机房容灾</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="容灾演练流程">容灾演练流程</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="平滑启动">平滑启动</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="数据库扩展">数据库扩展</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="读写分离模式">读写分离模式</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="分片模式">分片模式</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="服务治理">服务治理</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="服务注册与发现">服务注册与发现</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="服务路由控制">服务路由控制</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="分布式一致">分布式一致</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="cap-与-base-理论">CAP 与 BASE 理论</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="分布式锁">分布式锁</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="分布式一致性算法">分布式一致性算法</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="paxos">PAXOS</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="zab">Zab</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="raft">Raft</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="gossip">Gossip</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="两阶段提交多阶段提交">两阶段提交、多阶段提交</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="幂等">幂等</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="分布式一致方案">分布式一致方案</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="分布式-leader-节点选举">分布式 Leader 节点选举</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="tcctryconfirmcancel-柔性事务">TCC(Try/Confirm/Cancel) 柔性事务</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="分布式文件系统">分布式文件系统</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="唯一id-生成">唯一ID 生成</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="全局唯一id">全局唯一ID</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="一致性hash算法">一致性Hash算法</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="设计思想--开发模式">设计思想 &amp; 开发模式</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="ddddomain-driven-design---领域驱动设计">DDD(Domain-driven Design - 领域驱动设计)</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="命令查询职责分离cqrs">命令查询职责分离(CQRS)</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="贫血充血模型">贫血，充血模型</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="actor-模式">Actor 模式</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="响应式编程">响应式编程</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="reactor">Reactor</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="rxjava">RxJava</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="vertx">Vert.x</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="dodaf20">DODAF2.0</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="serverless">Serverless</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="service-mesh">Service Mesh</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="项目管理">项目管理</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="架构评审">架构评审</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="重构">重构</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="代码规范">代码规范</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="代码-review">代码 Review</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="rup">RUP</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="看板管理">看板管理</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="scrum">SCRUM</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="敏捷开发">敏捷开发</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="极限编程xp">极限编程（XP）</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="结对编程">结对编程</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="pdca-循环质量管理">PDCA 循环质量管理</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="fmea管理模式">FMEA管理模式</a></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="通用业务术语">通用业务术语</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="技术趋势">技术趋势</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="政策法规">政策、法规</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="法律">法律</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="严格遵守刑法253法条">严格遵守刑法253法条</a></li></ul></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <a href="架构师素质">架构师素质</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="团队管理">团队管理</a><ul><li style="list-style: none"><input type="checkbox" checked> <a href="招聘">招聘</a><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3>有目标，就有动力。未来，我期望着你！</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多时候，生活并不如意；很多时候，理想并不能实现；路很长，身体很累，可还是一直要走下去。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;始&quot;&gt;&lt;a href=&quot;#始&quot; class=&quot;headerlink&quot; title=&quot;始&quot;&gt;&lt;/a&gt;始&lt;/h3&gt;&lt;p&gt;我是一个一个普普通通的双非学校的大
      
    
    </summary>
    
    
      <category term="生活" scheme="https://tengshe789.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>论如何在论文中优美的黏贴代码</title>
    <link href="https://tengshe789.github.io/2018/10/27/%E8%AE%BA%E5%A6%82%E4%BD%95%E5%9C%A8%E8%AE%BA%E6%96%87%E4%B8%AD%E4%BC%98%E7%BE%8E%E7%9A%84%E9%BB%8F%E8%B4%B4%E4%BB%A3%E7%A0%81/"/>
    <id>https://tengshe789.github.io/2018/10/27/论如何在论文中优美的黏贴代码/</id>
    <published>2018-10-27T08:39:32.000Z</published>
    <updated>2019-11-20T13:39:41.568Z</updated>
    
    <content type="html"><![CDATA[<p>又是一年论文季，学生党表示鸭梨山大。</p><p><img src="/2018/10/27/论如何在论文中优美的黏贴代码/1.jpg" alt="1.jpg"></p><p>这不，复制粘贴一个项目里的代码，搞得整个结构乱七八糟的！这该如何是好呢？</p><p>今天，我来分享一个网站，可以优雅的将我的代码复制到WORD上~</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h4><p>打开这个网页<a href="http://www.planetb.ca/projects/syntaxHighlighter/" target="_blank" rel="noopener">PlanetB</a></p><h4 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h4><p>谷歌搜索syntax highlight code in word documents，检索结果的第一个。当然了，这两个方法返回的是同一个网站。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>将你需要插入在word中的代码完整的复制到该网站提示的文本框内，选择你的代码类型，如Java,C++,HTML等，并点击<code>Show Highlighted</code>。如下图：</p><p><img src="/2018/10/27/论如何在论文中优美的黏贴代码/3.jpg" alt="1.jpg"></p></li><li><p>该网页会自动将该代码生成到一个新的页面，此时ctrl+A全选，后ctrl+c复制到word中粘贴就好。如下图：</p><p><img src="/2018/10/27/论如何在论文中优美的黏贴代码/2.jpg" alt="1.jpg"></p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>怎么样，是不是效果很好？各位看观老爷，喜欢就点个赞吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;又是一年论文季，学生党表示鸭梨山大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/10/27/论如何在论文中优美的黏贴代码/1.jpg&quot; alt=&quot;1.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;这不，复制粘贴一个项目里的代码，搞得整个结构乱七八糟的！这该如何是好呢？&lt;/p&gt;
&lt;p&gt;今天，
      
    
    </summary>
    
    
      <category term="窍门" scheme="https://tengshe789.github.io/tags/%E7%AA%8D%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>万物基于Spring（一）</title>
    <link href="https://tengshe789.github.io/2018/10/07/%E4%B8%87%E7%89%A9%E5%9F%BA%E4%BA%8ESpring/"/>
    <id>https://tengshe789.github.io/2018/10/07/万物基于Spring/</id>
    <published>2018-10-07T13:08:03.000Z</published>
    <updated>2019-11-20T13:39:41.168Z</updated>
    
    <content type="html"><![CDATA[<p>前面文章提到了，<code>Springboot</code>是基于spring为基础扩展出来的一个快递框架。深入理解<code>springboot</code>就需要理解<code>spring</code>的相关原理。所以我们就开始吧！</p><p>想要解锁更多新姿势？请访问我的个人博客<a href="https://blog.tengshe789.tech/（😘" target="_blank" rel="noopener">https://blog.tengshe789.tech/（😘</a></p><h2 id="Spring的概述"><a href="#Spring的概述" class="headerlink" title="Spring的概述"></a>Spring的概述</h2><p>Spring是一个开源的轻量级JavaSE（Java标准版本）/ JavaEE（Java企业版本）开发应用框架，其目的是用于简化企业级应用程序开发。</p><p>应用程序是由一组相互协作的对象组成。而在传统应用程序开发中，一个完整的应用是由一组相互协作的对象组成。所以开发一个应用除了要开发业务逻辑之外，最多的是关注如何使这些对象协作来完成所需功能，而且要<strong>低耦合、高内聚</strong>。</p><p>业务逻辑开发是不可避免的，那如果有个框架出来帮我们来创建对象及管理这些对象之间的依赖关系。可能有人说了，比如“抽象工厂、工厂方法设计模式”不也可以帮我们创建对象，“生成器模式”帮我们处理对象间的依赖关系，不也能完成这些功能吗？可是这些又需要我们创建另一些工厂类、生成器类，我们又要而外管理这些类，增加了我们的负担，如果能有种通过配置方式来创建对象，管理对象之间依赖关系，我们不需要通过工厂和生成器来创建及管理对象之间的依赖关系，这样我们是不是减少了许多工作，加速了开发，能节省出很多时间来干其他事。</p><p>Spring框架刚出来时主要就是来完成这个功能。</p><p><img src="/2018/10/07/万物基于Spring/1.jpg" alt="Spring"></p><p>Spring框架除了帮我们管理对象及其依赖关系，还提供像通用<strong>日志记录</strong>、<strong>性能统计</strong>、<strong>安全控制</strong>、<strong>异常处理</strong>等面向切面的能力，还能帮我们管理最头疼的<strong>数据库事务</strong>，本身提供了一套简单的JDBC访问实现，提供与第三方数据访问框架集成，如JPA（默认使用<code>Hibernate</code>），与各种JavaEE技术整合（如<code>JavaMail</code>、任务调度等等），提供一套自己的web层框架<code>SpringMVC</code>、<code>Webflex</code>，而且还能非常简单的与第三方Web框架集成。</p><p>从这里可以认为Spring是一个超级粘合平台，除了自己提供功能外，还提供粘合其他技术和框架的能力，从而使我们可以更自由的选择到底使用什么技术进行开发。而且不管是JAVASE（C/S架构）应用程序还是JAVAEE（B/S架构）应用程序都可以使用这个平台进行开发。让我们来深入看一下Spring到底能帮我们做些什么？</p><h2 id="历史的开始"><a href="#历史的开始" class="headerlink" title="历史的开始"></a>历史的开始</h2><p>1996，Java还只是一个新兴的、初出茅庐的编程语言。人们之所以关注她仅仅是因为，可以使用Java的Applet来开发Web应用。但这些开发者很快就发现这个新兴的语言还能做更多的事情。与之前的所有语言不同，Java让模块化构建复杂的系统成为可能（当时的软件行业虽然在业务上突飞猛进，但当时开发用的是传统的面向过程开发思想，软件的开发效率一直踟蹰不前。伴随着业务复杂性的不断加深，开发也变得越发困难。其实，当时也是面向对象思想飞速发展的时期，她在80年代末被提出，成熟于90年代，现今大多数编程语言都是面向对象的，当然这是后话了）。他们为Applet而来，为组件化而留。这便是最早的Java。</p><p>同样在这一年的12月，Sun公司发布了当时还名不见经传但后来人尽皆知的JavaBean1.00-A规范。早期的JavaBean规范针对于Java，她定义了软件组件模型。这个规范规定了一整套编码策略，使简单的Java对象不仅可以被重用，而且还可以轻松地构建更为复杂的应用。尽管JavaBean最初是为重用应用组件而设计的，但当时他们却是主要用作构建窗体控件，毕竟在PC时代那才是主流。但相比于当时正如日中天的Delphi、VB和C++，他看起来还是太简易了，以至于无法胜任任何”实际的”工作。</p><p>复杂的应用通常需要诸如事物、安全、分布式等服务的支持，但JavaBean并未直接提供。所以到了1998年3月，Sun发布了EJB1.0规范，该规范把Java组件的设计理念延伸到了服务器端，并提供了许多必须的企业级服务，但他也不再像早期的JavaBean那么简单了。实际上，除了名字，EJBBean已经和JavaBean没有任何关系了。</p><p>尽管现实中有很多系统是基于EJB构建的，但EJB从来没有实现它最初的设想：简化开发。EJB的声明式编程模型的确简化了很多基础架构层面的开发，例如事务和安全；但另一方面EJB在部署描述符和配套代码实现等方面变得异常复杂。随着时间的推移，很多开发者对EJB已经不再抱有幻想，开始寻求更简洁的方法。</p><p>现在Java组件开发理念重新回归正轨。新的编程技术AOP和DI的不断出现，他们为JavaBean提供了之前EJB才能拥有的强大功能。这些技术为POJO提供了类似EJB的声明式编程模型，而没有引入任何EJB的复杂性。当简单的JavaBean足以胜任时，人们便不愿编写笨重的EJB组件了。</p><p>客观地讲，EJB的发展甚至促进了基于POJO的编程模型。引入新的理念，最新的EJB规范相比之前的规范有了前所未有的简化，但对很多开发者而言，这一切的一切都来得太迟了。到了EJB3规范发布时，其他基于POJO的开发架构已经成为事实的标准了，而Spring框架也是在这样的大环境下出现的。</p><h3 id="Spring设计的初衷"><a href="#Spring设计的初衷" class="headerlink" title="Spring设计的初衷"></a>Spring设计的初衷</h3><p>Spring是为解决企业级应用开发的复杂性而设计，她可以做很多事。但归根到底支撑Spring的仅仅是少许的基本理念，而所有地这些的基本理念都能可以追溯到一个最根本的使命：简化开发。这是一个郑重的承诺，其实许多框架都声称在某些方面做了简化。</p><p>而Spring则立志于全方面的简化Java开发。对此，她主要采取了4个关键策略：</p><p>1，基于POJO的轻量级和最小侵入性编程；</p><p>2，通过依赖注入和面向接口松耦合；</p><p>3，基于切面进行声明式编程；</p><p>4，通过切面和模板减少样板式代码；</p><p>而他主要是通过：面向Bean、依赖注入以及面向切面这三种方式来达成的。</p><h3 id="BOP编程伊始"><a href="#BOP编程伊始" class="headerlink" title="BOP编程伊始"></a>BOP编程伊始</h3><p>Spring是<strong>面向Bean的编程</strong>（BeanOrientedProgramming,BOP），Bean在Spring中才是真正的主角。Bean在Spring中作用就像Object对OOP的意义一样，Spring中没有Bean也就没有Spring存在的意义。Spring提供了IOC容器通过配置文件或者注解的方式来管理对象之间的依赖关系。</p><p>控制反转(其中最常见的方式叫做依赖注入（DependencyInjection，DI），还有一种方式叫“依赖查找”（DependencyLookup，DL），她在C++、Java、PHP以及.NET中都运用。在最早的Spring中是包含有依赖注入方法和依赖查询的，但因为依赖查询使用频率过低，不久就被Spring移除了，所以在Spring中控制反转也被称作依赖注入)，她的基本概念是：不创建对象，但是描述创建它们的方式。在代码中不直接与对象和服务连接，但在配置文件中描述哪一个组件需要哪一项服务。容器（在Spring框架中是IOC容器）负责将这些联系在一起。</p><p>在典型的IOC场景中，容器创建了所有对象，并设置必要的属性将它们连接在一起，决定什么时间调用方法。</p><h3 id="依赖注入DI的基本概念"><a href="#依赖注入DI的基本概念" class="headerlink" title="依赖注入DI的基本概念"></a>依赖注入DI的基本概念</h3><p>Spring设计的核心org.springframework.beans包（架构核心是org.springframework.core包），它的设计目标是与JavaBean组件一起使用。这个包通常不是由用户直接使用，而是由服务器将其用作其他多数功能的底层中介。下一个最高级抽象是BeanFactory接口，它是工厂设计模式的实现，允许通过名称创建和检索对象。BeanFactory也可以管理对象之间的关系。</p><p>BeanFactory支持两个对象模型。</p><p>1，单例：模型提供了具有特定名称的对象的共享实例，可以在查询时对其进行检索。Singleton是默认的也是最常用的对象模型。对于无状态服务对象很理想。</p><p>2，原型：模型确保每次检索都会创建单独的对象。在每个用户都需要自己的对象时，原型模型最适合。</p><p>Bean工厂的概念是Spring作为IOC容器的基础。IOC则将处理事情的责任从应用程序代码转移到框架。</p><h3 id="AOP编程理念"><a href="#AOP编程理念" class="headerlink" title="AOP编程理念"></a>AOP编程理念</h3><p>面向切面编程，即AOP，是一种编程思想，它允许程序员对横切关注点或横切典型的职责分界线的行为（例如日志和事务管理）进行模块化。AOP的核心构造是方面（切面），它将那些影响多个类的行为封装到可重用的模块中。</p><p>AOP和IOC是补充性的技术，它们都运用模块化方式解决企业应用程序开发中的复杂问题。在典型的面向对象开发方式中，可能要将日志记录语句放在所有方法和Java类中才能实现日志功能。在AOP方式中，可以反过来将日志服务模块化，并以声明的方式将它们应用到需要日志的组件上。当然，优势就是Java类不需要知道日志服务的存在，也不需要考虑相关的代码。所以，用SpringAOP编写的应用程序代码是松散耦合的。</p><p>AOP的功能完全集成到了Spring事务管理、日志和其他各种特性的上下文中。</p><p>AOP编程的常用场景有：Authentication权限认证、Logging日志、TransctionsManager事务、LazyLoading懒加载、ContextProcess上下文处理、ErrorHandler错误跟踪（异常捕获机制）、Cache缓存。</p><h3 id="编程思想总结"><a href="#编程思想总结" class="headerlink" title="编程思想总结"></a>编程思想总结</h3><table><thead><tr><th>Spring思想</th><th>应用场景（特点）</th><th>一句话归纳</th></tr></thead><tbody><tr><td>AOP</td><td>AspectOrientedProgramming(面向切面编程)              找出多个类中有一定规律的代码，开发时拆开，运行时再合并。              面向切面编程，即面向规则编程。</td><td>解耦，专人做专事。</td></tr><tr><td>OOP</td><td>ObjectOrientedProgramming（面向对象编程）              归纳总结生活中一切事物。</td><td>封装、继承、多态。</td></tr><tr><td>BOP</td><td>BeanOrientedProgramming（面向Bean编程）              面向Bean（普通的java类）设计程序。</td><td>一切从Bean开始。</td></tr><tr><td>IOC</td><td>InversionofControl（控制反转）              将new对象的动作交给Spring管理，并由Spring保存已创建的对象（IOC容器）。</td><td>转交控制权（即控制权反转）。</td></tr><tr><td>DI/DL</td><td>DependencyInjection（依赖注入）或者DependencyLookup（依赖查找）              依赖注入、依赖查找，Spring不仅保存自己创建的对象，而且保存对象与对象之间的关系。              注入即赋值，主要三种方式构造方法、set方法、直接赋值。</td><td>先理清关系再赋值。</td></tr></tbody></table><h2 id="Spring架构设计"><a href="#Spring架构设计" class="headerlink" title="Spring架构设计"></a>Spring架构设计</h2><p>Spring总共大约有20个模块，由1300多个不同的文件构成。而这些组件被分别整合在核心容器（CoreContainer）、AOP（AspectOrientedProgramming）和设备支持（Instrmentation）、数据访问及集成（DataAccess/Integeration）、Web、报文发送（Messaging）、Test，6个模块集合中。以下是spring总体架构图和Spring5的模块结构图：</p><p><img src="/2018/10/07/万物基于Spring/2.svg" alt="springboot"></p><p><img src="/2018/10/07/万物基于Spring/3.jpg" alt="spring5"></p><p>组成<code>Spring</code>框架的每个模块集合或者模块都可以单独存在，也可以一个或多个模块联合实现。每个模块的组成和功能如下：</p><p>1.<strong>核心容器</strong>：由<code>spring-beans</code>、<code>spring-core</code>、<code>spring-context</code>和<code>spring-expression</code>（SpringExpressionLanguage,SpEL）4个模块组成。</p><p><code>spring-beans</code>和<code>spring-core</code>模块是Spring框架的核心模块，包含了控制反转（InversionofControl,IOC）和依赖注入（DependencyInjection,DI）。BeanFactory接口是Spring框架中的核心接口，它是工厂模式的具体实现。BeanFactory使用控制反转对应用程序的配置和依赖性规范与实际的应用程序代码进行了分离。但BeanFactory容器实例化后并不会自动实例化Bean，只有当Bean被使用时BeanFactory容器才会对该Bean进行实例化与依赖关系的装配。</p><p><code>spring-context</code>模块构架于核心模块之上，他扩展了<code>BeanFactory</code>，为她添加了Bean生命周期控制、框架事件体系以及资源加载透明化等功能。此外该模块还提供了许多企业级支持，如邮件访问、远程访问、任务调度等，ApplicationContext是该模块的核心接口，她是BeanFactory的超类，与BeanFactory不同，ApplicationContext容器实例化后会自动对所有的单实例Bean进行实例化与依赖关系的装配，使之处于待用状态。</p><p><code>spring-expression</code>模块是统一表达式语言（EL）的扩展模块，可以查询、管理运行中的对象，同时也方便的可以调用对象方法、操作数组、集合等。它的语法类似于传统EL，但提供了额外的功能，最出色的要数函数调用和简单字符串的模板函数。这种语言的特性是基于Spring产品的需求而设计，他可以非常方便地同SpringIOC进行交互。</p><p>2.AOP和设备支持：由<code>spring-aop</code>、<code>spring-aspects</code>和<code>spring-instrument</code>3个模块组成。</p><p><code>spring-aop</code>是Spring的另一个核心模块，是AOP主要的实现模块。作为继OOP后，对程序员影响最大的编程思想之一，AOP极大地开拓了人们对于编程的思路。在Spring中，他是以JVM的动态代理技术为基础，然后设计出了一系列的AOP横切实现，比如前置通知、返回通知、异常通知等，同时，Pointcut接口来匹配切入点，可以使用现有的切入点来设计横切面，也可以扩展相关方法根据需求进行切入。</p><p><code>spring-aspects</code>模块集成自AspectJ框架，主要是为SpringAOP提供多种AOP实现方法。</p><p><code>spring-instrument</code>模块是基于JAVASE中的”java.lang.instrument”进行设计的，应该算是AOP的一个支援模块，主要作用是在JVM启用时，生成一个代理类，程序员通过代理类在运行时修改类的字节，从而改变一个类的功能，实现AOP的功能。在分类里，我把他分在了AOP模块下，在Spring官方文档里对这个地方也有点含糊不清，这里是纯个人观点。</p><p>3.数据访问及集成：由<code>spring-jdbc</code>、<code>spring-tx</code>、<code>spring-orm</code>、<code>spring-jms</code>和<code>spring-oxm</code>5个模块组成。</p><p><code>spring-jdbc</code>模块是Spring提供的JDBC抽象框架的主要实现模块，用于简化SpringJDBC。主要是提供JDBC模板方式、关系数据库对象化方式、SimpleJdbc方式、事务管理来简化JDBC编程，主要实现类是JdbcTemplate、SimpleJdbcTemplate以及NamedParameterJdbcTemplate。</p><p><code>spring-tx</code>模块是SpringJDBC事务控制实现模块。使用Spring框架，它对事务做了很好的封装，通过它的AOP配置，可以灵活的配置在任何一层；但是在很多的需求和应用，直接使用JDBC事务控制还是有其优势的。其实，事务是以业务逻辑为基础的；一个完整的业务应该对应业务层里的一个方法；如果业务操作失败，则整个事务回滚；所以，事务控制是绝对应该放在业务层的；但是，持久层的设计则应该遵循一个很重要的原则：保证操作的原子性，即持久层里的每个方法都应该是不可以分割的。所以，在使用SpringJDBC事务控制时，应该注意其特殊性。</p><p><code>spring-orm</code>模块是ORM框架支持模块，主要集成Hibernate,JavaPersistenceAPI(JPA)和JavaDataObjects(JDO)用于资源管理、数据访问对象(DAO)的实现和事务策略。</p><p><code>spring-jms</code>模块（JavaMessagingService）能够发送和接受信息，自SpringFramework4.1以后，他还提供了对spring-messaging模块的支撑。</p><p><code>spring-oxm</code>模块主要提供一个抽象层以支撑OXM（OXM是Object-to-XML-Mapping的缩写，它是一个O/M-mapper，将java对象映射成XML数据，或者将XML数据映射成java对象），例如：JAXB,Castor,XMLBeans,JiBX和XStream等。</p><p>4.Web：由<code>spring-web</code>、<code>spring-webmvc</code>、<code>spring-websocket</code>和<code>spring-webflux</code>4个模块组成。</p><p><code>spring-web</code>模块为Spring提供了最基础Web支持，主要建立于核心容器之上，通过Servlet或者Listeners来初始化IOC容器，也包含一些与Web相关的支持。</p><p><code>spring-webmvc</code>模块众所周知是一个的Web-Servlet模块，实现了SpringMVC（model-view-Controller）的Web应用。</p><p><code>spring-websocket</code>模块主要是与Web前端的全双工通讯的协议。（资料缺乏，这是个人理解）</p><p><code>spring-webflux</code>是一个新的非堵塞函数式ReactiveWeb框架，可以用来建立异步的，非阻塞，事件驱动的服务，并且扩展性非常好。</p><p>5.报文发送：即<code>spring-messaging</code>模块。</p><p><code>spring-messaging</code>是从Spring4开始新加入的一个模块，主要职责是为Spring框架集成一些基础的报文传送应用。</p><p>6.Test：即<code>spring-test</code>模块。</p><p><code>spring-test</code>模块主要为测试提供支持的，毕竟在不需要发布（程序）到你的应用服务器或者连接到其他企业设施的情况下能够执行一些集成测试或者其他测试对于任何企业都是非常重要的。</p><h3 id="Spirng各模块之间的依赖关系"><a href="#Spirng各模块之间的依赖关系" class="headerlink" title="Spirng各模块之间的依赖关系"></a>Spirng各模块之间的依赖关系</h3><p>该图是Spring5的包结构，可以从中清楚看出Spring各个模块之间的依赖关系。</p><p><img src="/2018/10/07/万物基于Spring/3.jpg" alt="spring5"></p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>这是9月份写的，大部分是复制的，因为面试没有写完，所以未完待续吧！</p><p>接下来咱们介绍<code>Spring</code>的这个博客，是从spring-core开始，其次是spring-beans和spring-aop，随后是spring-context，再其次是spring-tx和spring-orm，最后是spring-web和其他部分。</p><p>感谢观看</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>大部分来自咕泡学院TOM老师的材料</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面文章提到了，&lt;code&gt;Springboot&lt;/code&gt;是基于spring为基础扩展出来的一个快递框架。深入理解&lt;code&gt;springboot&lt;/code&gt;就需要理解&lt;code&gt;spring&lt;/code&gt;的相关原理。所以我们就开始吧！&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
      <category term="Spring" scheme="https://tengshe789.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>并发基础-缓存、内存与JVM</title>
    <link href="https://tengshe789.github.io/2018/09/30/Java%E4%B8%8E%E5%86%85%E5%AD%98/"/>
    <id>https://tengshe789.github.io/2018/09/30/Java与内存/</id>
    <published>2018-09-30T13:10:41.000Z</published>
    <updated>2019-11-20T13:39:40.575Z</updated>
    
    <content type="html"><![CDATA[<p>又是一年秋招季，哎呀妈呀我被虐的惨来~这不，前几阵失踪没更新博客，其实是我偷偷把时间用在复习课本了（雾</p><p>坚持在社区分享博客也很久了，由于过去的文章有很多疏漏之处，很多大佬都在评论指出我的过错，我很开心也很失望，开心的是有大家帮我指出错误，失望的鄙人学识浅薄总没法做到完美。总之，欢迎评论区各种pr~</p><p>好，回到正题。复习的时候，无意间看到java虚拟机的有关知识点，我产生了非常浓厚的兴趣，今天我来结合<strong>计算机内存模型</strong>的相关知识，与<strong>Java内存模型</strong>、<strong>Java对象模型</strong>、<strong>JVM内存结构</strong>等相关的知识串联起来，本篇文章共1.5W字，分享给大家，感谢阅读。</p><p>想要解锁更多新姿势？请访问我的个人博客<a href="https://blog.tengshe789.tech/（😘" target="_blank" rel="noopener">https://blog.tengshe789.tech/（😘</a></p><h2 id="计算机内存"><a href="#计算机内存" class="headerlink" title="计算机内存"></a>计算机内存</h2><p>相信每个人都有一台电脑，也有diy电脑的经历。现在一台功能强大的diy电脑大概3k就能组装起来，一个i5-8400 的cpu 869元，DDR4 内存 1200块钱，b360主板300元 散热器50元 机械硬盘200元 350w电源300元 机箱100元 ，没错，只要3k就能拿到一个性能强大的6C6T电脑。</p><p>要说一台PC中最重要的部件是什么？大家看价格也会看明白，是cpu和内存，下面我来介绍一下cpu和内存之间的关系。</p><h3 id="cpu与内存缓存的千丝万缕"><a href="#cpu与内存缓存的千丝万缕" class="headerlink" title="cpu与内存缓存的千丝万缕"></a>cpu与内存缓存的千丝万缕</h3><h4 id="cpu相关术语"><a href="#cpu相关术语" class="headerlink" title="cpu相关术语"></a>cpu相关术语</h4><p>首先说明一下相关的cpu术语：</p><ul><li>socket：cpu插在主板上那个槽与cpu称作一个socket。</li><li>Die：核心（Die）又称为内核，是cpu的物理组成部分之一。cpu也会分为多die cpu与单die cpu，譬如我们现在强大的AMD TR-2990WX就是4die cpu，每个die里面有8个核心（core）</li><li>core：也就是物理核心了。core这个词是英特尔起的，起初是为了与竞争对手AMD区别开，后面用的多了也淡了。</li><li>thread：就是硬件线程数。一个程序执行可能需要多个线程一起进行~而现在也就比较强大的超线程技术，过去的cpu往往一个cpu核心只支持一个线程，现在一些强大的cpu中，就譬如IBM 的POWER 9 ，支持8核心32个线程（平均一个核心4个线程），理论性能非常强大。</li></ul><p>总结一下，以明星cpu AMD TR-2990WX作为栗子，这个cpu使用一个socket，一个socket里面有4个die，总共32个物理核心64个线程</p><h4 id="cpu缓存"><a href="#cpu缓存" class="headerlink" title="cpu缓存"></a>cpu缓存</h4><p>我们都知道，cpu将要处理的数据会放到内存中保存，可是，为什么会这样，将内存缓存硬盘行不行呢？</p><p>答案当然是不行的。cpu的处理速度很强大，内存的速度虽然非常快速但是根本跟不上cpu的步伐，所以，就出现的缓存。与来自DRAM家族的内存不同，缓存SRAM与内存最大的特点是，特别快，容量小，结构复杂，成本也高。</p><p>造成内存和缓存性能差异，主要有以下原因：</p><ol><li>DRAM储存一位数据只需要一个电容加上一个晶体管，而SRAM需要6个晶体管。由于DRAM保存数据其实是在电容里面的，电容需要充放电才能进行读写操作，这就导致其读写数据就有比较大的延迟问题。</li><li>存储可以看错一个二维数组，每个存储单元都有其行地址列地址。SRAM的容量很小，其存储单元比较短（行列短），可以一次性传输到SRAM中；而DRAM，需要分别传送行列地址。</li><li>SRAM的频率和cpu频率比较接近；而DRAM的频率和cpu差距比较大。    </li></ol><p>近代的缓存通常被集成到cpu当中，为了适应性能与成本的需要，现实中的缓存往往使用金字塔型多级缓存架构。也就是<strong>当CPU要读取一个数据时，首先从一级缓存中查找，如果没有找到再从二级缓存中查找，如果还是没有就从三级缓存或内存中查找。</strong></p><p>下面是英特尔最近以来用的初代skylake架构</p><p><img src="/2018/09/30/Java与内存/1.png" alt="skl架构"></p><p>可以看到，每个个核心有专属的L1，L2缓存，他们共享一个L3缓存。如果cpu如果要访问内存中的数据，必须要经过L1,L2,L3,LLC（或者L4）四层缓存。</p><h3 id="缓存一致性问题"><a href="#缓存一致性问题" class="headerlink" title="缓存一致性问题"></a>缓存一致性问题</h3><p>最开始的cpu，其实只是一个核心一个线程的，当时根本不需要考虑缓存一致性问题，<strong>单线程</strong>，也就是cpu核心的缓存只被一个线程访问。缓存独占，不会出现访问冲突等问题。</p><p>后来超线程技术来到我们视野，<strong>‘’单核CPU多线程’’</strong>，也就是进程中的多个线程会同时访问进程中的共享数据，CPU将某块内存加载到缓存后，不同线程在访问相同的物理地址的时候，都会映射到相同的缓存位置，这样即使发生线程的切换，缓存仍然不会失效。但由于任何时刻只能有一个线程在执行，因此不会出现缓存访问冲突。</p><p>时代不断发展，<strong>“多核CPU多线程”</strong>来了，即多个线程访问进程中的某个共享内存，且这多个线程分别在不同的核心上执行，则每个核心都会在各自的caehe中保留一份共享内存的缓冲。由于多核是可以并行的，可能会出现多个线程同时写各自的缓存的情况，而各自的cache之间的数据就有可能不同。</p><p>这就是我们说的<strong>缓存一致性</strong>问题。</p><p>目前公认最好的解决方案是英特尔的<strong>MESI协议</strong>，下面我们着重介绍。</p><h4 id="MESI协议"><a href="#MESI协议" class="headerlink" title="MESI协议"></a>MESI协议</h4><p>首先说说I/O操作的单位问题，大部分人都知道，在内存中操作I/O不是以字节为单位，而是以“块”为单位，这是为什么呢？</p><p>其实这是因为I/O操作的数据访问有空间连续性特征，即需要访问内存空间很多数据，但是I/O操作比较慢，读一个字节和读N个字节的时间基本相同。</p><p>机智的intel就规定了，cpu缓存中最小的存储单元是<strong>缓存行</strong><code>cache line</code>，在x86的cpu中，一个<code>cache line</code>储存64字节，每一级的缓存都会被划分成许多组<code>cache line</code>。</p><p>缓存工作原理请看👉<a href="https://en.wikipedia.org/wiki/CPU_cache" target="_blank" rel="noopener">维基百科</a></p><p>接下来我们看看MESI规范，这其实是用四种缓存行状态命名的，我们定义了CPU中每个缓存行使用4种状态进行标记（使用额外的两位(bit)表示)，分别是:</p><ul><li><p><strong>M: 被修改（Modified)</strong></p><p>该缓存行只被缓存在该CPU的缓存中，并且是被修改过的（dirty),即与主存中的数据不一致，该缓存行中的内存需要在未来的某个时间点（允许其它CPU读取请主存中相应内存之前）写回（write back）主存。当被写回主存之后，该缓存行的状态会变成独享（exclusive)状态。</p></li><li><p><strong>E: 独享的（Exclusive)</strong></p><p>该缓存行只被缓存在该CPU的缓存中，它是未被修改过的（clean)，与主存中数据一致。该状态可以在任何时刻当有其它CPU读取该内存时变成共享状态（shared)。同样地，当CPU修改该缓存行中内容时，该状态可以变成Modified状态。</p></li><li><p><strong>S:  共享的（Shared)</strong></p><p>该状态意味着该缓存行可能被多个CPU缓存，并且各个缓存中的数据与主存数据一致（clean)，当有一个CPU修改该缓存行中，其它CPU中该缓存行可以被作废（变成无效状态（Invalid））。</p></li><li><p><strong>I: 无效的（Invalid）</strong></p><p>该缓存是无效的（可能有其它CPU修改了该缓存行）。</p></li></ul><p><img src="/2018/09/30/Java与内存/2.png" alt="mesi"></p><p>然而，只是有这四种状态也会带来一定的问题。下面引用一下oracle的<a href="https://docs.oracle.com/cd/E19205-01/821-0393/aewcx/index.html" target="_blank" rel="noopener">文档</a>。</p><blockquote><p>同时更新来自不同处理器的相同缓存代码行中的单个元素会使整个缓存代码行无效，即使这些更新在逻辑上是彼此独立的。每次对缓存代码行的单个元素进行更新时，都会将此代码行标记为<strong>无效</strong>。其他访问同一代码行中不同元素的处理器将看到该代码行已标记为<strong>无效</strong>。即使所访问的元素未被修改，也会强制它们从内存或其他位置获取该代码行的较新副本。这是因为基于缓存代码行保持缓存一致性，而不是针对单个元素的。因此，互连通信和开销方面都将有所增长。并且，正在进行缓存代码行更新的时候，禁止访问该代码行中的元素。</p></blockquote><p><strong>MESI协议，可以保证缓存的一致性，但是无法保证实时性。</strong>这种情况称为<strong>伪共享</strong>。</p><h4 id="伪共享问题"><a href="#伪共享问题" class="headerlink" title="伪共享问题"></a>伪共享问题</h4><p>伪共享问题其实在Java中是真实存在的一个问题。假设有如下所示的java class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObiect</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> a;</span><br><span class="line">    <span class="keyword">long</span> b;</span><br><span class="line">    <span class="keyword">long</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照java规范，MyObiect对象是在堆空间中分配的，a、b、c这三个变量在内存空间中是近邻，分别占8字节，长度之和为24字节。而我们的x86的缓存行是64字节，这三个变量完全有可能会在一个缓存行中，并且被两个不同的cpu核心共享！</p><p>根据MESI协议，如果不同物理核心cpu中的线程1和线程2要互斥的对这几个变量进行操作，很有可能要互相抢占资源，导致原来的并行变成串行，大大降低了系统的并发性，这就是缓存的伪共享。</p><h4 id="解决伪共享"><a href="#解决伪共享" class="headerlink" title="解决伪共享"></a>解决伪共享</h4><p>其实解决伪共享很简单，只需要将这几个变量分别放到不同的缓存行即可。在java8中，就已经提供了普适性的解决方案，即采用<code>@Contended</code>注解来保证对象中的变量或者属性不在一个缓存行中~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Contended</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolatileObiect</span></span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> a = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> b = <span class="number">2L</span>;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> c = <span class="number">3L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存不一致性问题"><a href="#内存不一致性问题" class="headerlink" title="内存不一致性问题"></a>内存不一致性问题</h3><p>上面我说了MESI协议在多核心cpu中解决缓存一致性的问题，下面我们说说cpu的内存不一致性问题。</p><h4 id="三种cpu架构"><a href="#三种cpu架构" class="headerlink" title="三种cpu架构"></a>三种cpu架构</h4><p>首先，要了解三个名词：</p><ul><li>SMP(Symmetric Multi-Processor)</li></ul><blockquote><p>SMP ,对称多处理系统内有许多紧耦合多处理器，在这样的系统中，所有的CPU共享全部资源，如总线，内存和I/O系统等，操作系统或管理数据库的复本只有一个，这种系统有一个最大的特点就是共享所有资源。多个CPU之间没有区别，平等地访问内存、外设、一个操作系统。操作系统管理着一个队列，每个处理器依次处理队列中的进程。如果两个处理器同时请求访问一个资源（例如同一段内存地址），由硬件、软件的锁机制去解决资源争用问题。</p></blockquote><p><a href="https://gooqia.bay.livefilestore.com/y1mTR45b2QQBvMknXoy3T6RC7QW_bimMfEFsHvninuE5BlQRc5CpJu-XhG5EM0L20gGCUUYgBbYMkpvckoz7whBhXF8bXDRyyux_cspQ4Z_CgHpDB_86XN_zt6QwLXFH3xhgy1_OF1jz5k/smp%5b2%5d.gif" target="_blank" rel="noopener"><img src="/2018/09/30/Java与内存/clip_image001_d7728dc2-e525-4e5b-b84c-6f5a7f4de300.gif" alt="clip_image001"></a></p><blockquote><p>所谓对称多处理器结构，是指服务器中多个 CPU 对称工作，无主次或从属关系。各 CPU 共享相同的物理内存，每个 CPU 访问内存中的任何地址所需时间是相同的，因此 SMP 也被称为一致存储器访问结构 (UMA ： Uniform Memory Access) 。对 SMP 服务器进行扩展的方式包括增加内存、使用更快的 CPU 、增加 CPU 、扩充 I/O( 槽口数与总线数 ) 以及添加更多的外部设备 ( 通常是磁盘存储 ) 。</p><p>SMP 服务器的主要特征是共享，系统中所有资源 (CPU 、内存、 I/O 等 ) 都是共享的。也正是由于这种特征，导致了 SMP 服务器的主要问题，那就是它的扩展能力非常有限。对于 SMP 服务器而言，每一个共享的环节都可能造成 SMP 服务器扩展时的瓶颈，而最受限制的则是内存。由于每个 CPU 必须通过相同的内存总线访问相同的内存资源，因此随着 CPU 数量的增加，内存访问冲突将迅速增加，最终会造成 CPU 资源的浪费，使 CPU 性能的有效性大大降低。实验证明， SMP 服务器 CPU 利用率最好的情况是 2 至 4 个 CPU 。</p></blockquote><p><a href="http://images.cnblogs.com/cnblogs_com/yubo/WindowsLiveWriter/SMPNUMAMPP_F6D4/clip_image002_2.gif" target="_blank" rel="noopener"><img src="/2018/09/30/Java与内存/clip_image002_thumb.gif" alt="clip_image002"></a></p><ul><li>NUMA(Non-Uniform Memory Access)</li></ul><blockquote><p>　　由于 SMP 在扩展能力上的限制，人们开始探究如何进行有效地扩展从而构建大型系统的技术， NUMA 就是这种努力下的结果之一。利用 NUMA 技术，可以把几十个 CPU( 甚至上百个 CPU) 组合在一个服务器内。其NUMA 服务器 CPU 模块结构如图所示：</p></blockquote><p><a href="http://images.cnblogs.com/cnblogs_com/yubo/WindowsLiveWriter/SMPNUMAMPP_F6D4/clip_image003_2.gif" target="_blank" rel="noopener"><img src="/2018/09/30/Java与内存/clip_image003_thumb.gif" alt="clip_image003"></a></p><blockquote><p>NUMA 服务器的基本特征是具有多个 CPU 模块，每个 CPU 模块由多个 CPU( 如 4 个 ) 组成，并且具有独立的本地内存、 I/O 槽口等。由于其节点之间可以通过互联模块 ( 如称为 Crossbar Switch) 进行连接和信息交互，因此每个 CPU 可以访问整个系统的内存 ( 这是 NUMA 系统与 MPP 系统的重要差别 ) 。显然，访问本地内存的速度将远远高于访问远地内存 ( 系统内其它节点的内存 ) 的速度，这也是非一致存储访问 NUMA 的由来。由于这个特点，为了更好地发挥系统性能，开发应用程序时需要尽量减少不同 CPU 模块之间的信息交互。</p><p>利用 NUMA 技术，可以较好地解决原来 SMP 系统的扩展问题，在一个物理服务器内可以支持上百个 CPU 。比较典型的 NUMA 服务器的例子包括 HP 的 Superdome 、 SUN15K 、 IBMp690 等。</p><p>　　但 NUMA 技术同样有一定缺陷，由于访问远地内存的延时远远超过本地内存，因此当 CPU 数量增加时，系统性能无法线性增加。如 HP 公司发布 Superdome 服务器时，曾公布了它与 HP 其它 UNIX 服务器的相对性能值，结果发现， 64 路 CPU 的 Superdome (NUMA 结构 ) 的相对性能值是 20 ，而 8 路 N4000( 共享的 SMP 结构 ) 的相对性能值是 6.3 。从这个结果可以看到， 8 倍数量的 CPU 换来的只是 3 倍性能的提升。</p></blockquote><ul><li>MPP(Massive Parallel Processing)</li></ul><blockquote><p>　　和 NUMA 不同， MPP 提供了另外一种进行系统扩展的方式，它由多个 SMP 服务器通过一定的节点互联网络进行连接，协同工作，完成相同的任务，从用户的角度来看是一个服务器系统。其基本特征是由多个 SMP 服务器 ( 每个 SMP 服务器称节点 ) 通过节点互联网络连接而成，每个节点只访问自己的本地资源 ( 内存、存储等 ) ，是一种完全无共享 (Share Nothing) 结构，因而扩展能力最好，理论上其扩展无限制，目前的技术可实现 512 个节点互联，数千个 CPU 。目前业界对节点互联网络暂无标准，如 NCR 的 Bynet ， IBM 的 SPSwitch ，它们都采用了不同的内部实现机制。但节点互联网仅供 MPP 服务器内部使用，对用户而言是透明的。</p><p>　　在 MPP 系统中，每个 SMP 节点也可以运行自己的操作系统、数据库等。但和 NUMA 不同的是，它不存在异地内存访问的问题。换言之，每个节点内的 CPU 不能访问另一个节点的内存。节点之间的信息交互是通过节点互联网络实现的，这个过程一般称为数据重分配 (Data Redistribution) 。</p><p>但是 MPP 服务器需要一种复杂的机制来调度和平衡各个节点的负载和并行处理过程。目前一些基于 MPP 技术的服务器往往通过系统级软件 ( 如数据库 ) 来屏蔽这种复杂性。举例来说， NCR 的 Teradata 就是基于 MPP 技术的一个关系数据库软件，基于此数据库来开发应用时，不管后台服务器由多少个节点组成，开发人员所面对的都是同一个数据库系统，而不需要考虑如何调度其中某几个节点的负载。</p><p>MPP (Massively Parallel Processing)，大规模并行处理系统，这样的系统是由许多松耦合的处理单元组成的，要注意的是这里指的是处理单元而不是处理器。每个单元内的CPU都有自己私有的资源，如总线，内存，硬盘等。在每个单元内都有操作系统和管理数据库的实例复本。这种结构最大的特点在于不共享资源。</p></blockquote><h4 id="NUMA结构下的缓存一致性"><a href="#NUMA结构下的缓存一致性" class="headerlink" title="NUMA结构下的缓存一致性"></a>NUMA结构下的缓存一致性</h4><p>要知道，MESI协议解决的是传统SMP结构下缓存的一致性，为了在NUMA架构也实现缓存一致性，intel引入了MESI的一个拓展协议–MESIF，但是目前并没有什么资料，也没法研究，更多消息请查阅intel的wiki。</p><h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>我们写程序，为什么要考虑内存模型呢，我们前面说了，缓存一致性问题、内存一致问题是硬件的不断升级导致的。解决问题，最简单直接的做法就是废除CPU缓存，让CPU直接和主存交互。但是，这么做虽然可以保证多线程下的并发问题。但是，这就有点时代倒退了。</p><p>所以，为了保证并发编程中可以满足原子性、可见性及有序性。有一个重要的概念，那就是——内存模型。</p><p>即为了保证共享内存的正确性（可见性、有序性、原子性），需要内存模型来定义了共享内存系统中多线程程序读写操作行为的相应规范~</p><h3 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h3><p>Java内存模型是根据英文Java Memory Model（JMM）翻译过来的。其实JMM并不像JVM内存结构一样是真实存在的。它<strong>是一种符合内存模型规范的，屏蔽了各种硬件和操作系统的访问差异的，保证了Java程序在各种平台下对内存的访问都能保证效果一致的机制及规范</strong>。就像JSR-133: Java Memory Model and Thread Specification 中描述了，JMM是和多线程相关的，他描述了一组规则或规范，这个规范定义了一个线程对共享变量的写入时对另一个线程是可见的。</p><p><img src="/2018/09/30/Java与内存/7.png" alt="抽象图"></p><p>Java的多线程之间是通过共享内存进行通信的，而由于采用共享内存进行通信，在通信过程中会存在一系列如可见性、原子性、顺序性等问题，而JMM就是围绕着多线程通信以及与其相关的一系列特性而建立的模型。JMM定义了一些语法集，这些语法集映射到Java语言中就是<code>volatile</code>、<code>synchronized</code>等关键字。</p><p>在JMM中，我们把多个线程间通信的共享内存称之为主内存，而在并发编程中多个线程都维护了一个自己的本地内存（这是个抽象概念），其中保存的数据是主内存中的数据拷贝。而<strong>JMM主要是控制本地内存和主内存之间的数据交互的</strong>。</p><p>下面看看Java内存模型抽象图：</p><p><img src="/2018/09/30/Java与内存/5.png" alt="抽象图"></p><p>在Java中，JMM是一个非常重要的概念，正是由于有了JMM，Java的并发编程才能避免很多问题。</p><h3 id="JMM同步八种操作"><a href="#JMM同步八种操作" class="headerlink" title="JMM同步八种操作"></a>JMM同步八种操作</h3><p>JMM规定了一系列操作，为了保证数据的操作的一致数据的一致。</p><p>（1）lock(锁定)：作用于主内存的变量，把一个变量标记为一条线程独占状态</p><p>（2）unlock(解锁)：作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</p><p>（3）read(读取)：作用于主内存的变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用</p><p>（4）load(载入)：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中</p><p>（5）use(使用)：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎</p><p>（6）assign(赋值)：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量</p><p>（7）store(存储)：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作</p><p>（8）write(写入)：作用于工作内存的变量，它把store操作从工作内存中的一个变量的值传送到主内存的变量中</p><p>按照顺序如图所示：</p><p><img src="/2018/09/30/Java与内存/8.png" alt="JMM同步八种操作"></p><h4 id="同步规则"><a href="#同步规则" class="headerlink" title="同步规则"></a>同步规则</h4><p>同步规则分析：</p><ol><li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步会主内存中</li><li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或者assign）的变量。即就是对一个变量实施use和store操作之前，必须先自行assign和load操作。</li><li>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。lock和unlock必须成对出现。</li><li>如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量之前需要重新执行load或assign操作初始化变量的值。</li><li>如果一个变量事先没有被lock操作锁定，则不允许对它执行unlock操作；也不允许去unlock一个被其他线程锁定的变量。</li><li>对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）</li></ol><h3 id="JMM应用"><a href="#JMM应用" class="headerlink" title="JMM应用"></a>JMM应用</h3><p>了解Java多线程的朋友都知道，在Java中提供了一系列和并发处理相关的关键字，比如<code>volatile</code>、<code>synchronized</code>、<code>final</code>、<code>concurrent</code>包等。其实这些就是Java内存模型封装了底层的实现后提供给我们使用的一些关键字。</p><p>在开发多线程的代码的时候，我们可以直接使用<code>synchronized</code>等关键字来控制并发，从来就不需要关心底层的编译器优化、缓存一致性等问题。所以，<strong>Java内存模型，除了定义了一套规范，还提供了一系列原语，封装了底层实现后，供开发者直接使用。</strong></p><p>并发编程要解决原子性、有序性和可见性的问题，我们就再来看下，在Java中，分别使用什么方式来保证。</p><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p><strong>原子性</strong>是指在一个操作中就是cpu不可以在中途暂停然后再调度，既不被中断操作，要不执行完成，要不就不执行。</p><p>JMM提供保证了访问基本数据类型的原子性（其实在写一个工作内存变量到主内存是分主要两步：store、write），但是实际业务处理场景往往是需要更大的范围的原子性保证。</p><p>在Java中，为了保证原子性，提供了两个高级的字节码指令<code>monitorenter</code>和<code>monitorexit</code>，而这两个字节码，在Java中对应的关键字就是<code>synchronized</code>。</p><p>因此，在Java中可以使用<code>synchronized</code>来保证方法和代码块内的操作是原子性的。这里推荐一篇文章<a href="https://blog.csdn.net/javazejian/article/details/72828483" target="_blank" rel="noopener">深入理解Java并发之synchronized实现原理</a>。</p><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p><strong>可见性</strong>是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p><p>Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值的这种依赖主内存作为传递媒介的方式来实现的。</p><p>Java中的<code>volatile</code>关键字提供了一个功能，那就是被其修饰的变量在被修改后可以立即同步到<strong>主内存</strong>，被其修饰的变量在每次是用之前都从主内存刷新。因此，可以使用<code>volatile</code>来保证多线程操作时变量的可见性。</p><p>除了<code>volatile</code>，Java中的<code>synchronized</code>和<code>final</code>、<code>static</code>三个关键字也可以实现可见性。下面分享一下我的读书笔记：</p><p><img src="/2018/09/30/Java与内存/6.png" alt="1538374970743"></p><h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p><strong>有序性</strong>即程序执行的顺序按照代码的先后顺序执行。</p><p>在Java中，可以使用<code>synchronized</code>和<code>volatile</code>来保证多线程之间操作的有序性。实现方式有所区别：</p><p><code>volatile</code>关键字会禁止指令重排。<code>synchronized</code>关键字保证同一时刻只允许一条线程操作。</p><p>好了，这里简单的介绍完了Java并发编程中解决原子性、可见性以及有序性可以使用的关键字。读者可能发现了，好像<code>synchronized</code>关键字是万能的，他可以同时满足以上三种特性，这其实也是很多人滥用<code>synchronized</code>的原因。</p><p>但是<code>synchronized</code>是比较影响性能的，虽然编译器提供了很多锁优化技术，但是也不建议过度使用。</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>我们都知道，Java代码是要运行在虚拟机上的，而虚拟机在执行Java程序的过程中会把所管理的内存划分为若干个不同的数据区域，这些区域都有各自的用途。下面我们来说说JVM运行时内存区域结构</p><h3 id="JVM运行时内存区域结构"><a href="#JVM运行时内存区域结构" class="headerlink" title="JVM运行时内存区域结构"></a>JVM运行时内存区域结构</h3><p>在《Java虚拟机规范（Java SE 8）》中描述了JVM运行时内存区域结构如下：</p><p><img src="/2018/09/30/Java与内存/3.png" alt="JVM"></p><p> 1.<strong>程序计数器</strong></p><p>　　程序计数器（Program Counter Register），也有称作为PC寄存器。想必学过汇编语言的朋友对程序计数器这个概念并不陌生，在汇编语言中，程序计数器是指CPU中的寄存器，它保存的是程序当前执行的指令的地址（也可以说保存下一条指令的所在存储单元的地址），当CPU需要执行指令时，需要从程序计数器中得到当前需要执行的指令所在存储单元的地址，然后根据得到的地址获取到指令，在得到指令之后，程序计数器便自动加1或者根据转移指针得到下一条指令的地址，如此循环，直至执行完所有的指令。</p><p>　　虽然JVM中的程序计数器并不像汇编语言中的程序计数器一样是物理概念上的CPU寄存器，但是JVM中的程序计数器的功能跟汇编语言中的程序计数器的功能在逻辑上是等同的，也就是说是用来指示 执行哪条指令的。</p><p>　　由于在JVM中，多线程是通过线程轮流切换来获得CPU执行时间的，因此，在任一具体时刻，一个CPU的内核只会执行一条线程中的指令，因此，为了能够使得每个线程都在线程切换后能够恢复在切换之前的程序执行位置，每个线程都需要有自己独立的程序计数器，并且不能互相被干扰，否则就会影响到程序的正常执行次序。因此，可以这么说，程序计数器是每个线程所私有的。</p><p>　　在JVM规范中规定，如果线程执行的是非native方法，则程序计数器中保存的是当前需要执行的指令的地址；如果线程执行的是native方法，则程序计数器中的值是undefined。</p><p>　　由于程序计数器中存储的数据所占空间的大小不会随程序的执行而发生改变，因此，对于程序计数器是不会发生内存溢出现象(OutOfMemory)的。</p><p> 2.<strong>Java栈</strong></p><p>　　Java栈也称作虚拟机栈（Java Vitual Machine Stack），也就是我们常常所说的栈，跟C语言的数据段中的栈类似。事实上，Java栈是Java方法执行的内存模型。为什么这么说呢？下面就来解释一下其中的原因。</p><p>　　Java栈中存放的是一个个的栈帧，每个栈帧对应一个被调用的方法，在栈帧中包括局部变量表(Local Variables)、操作数栈(Operand Stack)、指向当前方法所属的类的运行时常量池（运行时常量池的概念在方法区部分会谈到）的引用(Reference to runtime constant pool)、方法返回地址(Return Address)和一些额外的附加信息。当线程执行一个方法时，就会随之创建一个对应的栈帧，并将建立的栈帧压栈。当方法执行完毕之后，便会将栈帧出栈。因此可知，线程当前执行的方法所对应的栈帧必定位于Java栈的顶部。讲到这里，大家就应该会明白为什么 在 使用 递归方法的时候容易导致栈内存溢出的现象了以及为什么栈区的空间不用程序员去管理了（当然在Java中，程序员基本不用关系到内存分配和释放的事情，因为Java有自己的垃圾回收机制），这部分空间的分配和释放都是由系统自动实施的。对于所有的程序设计语言来说，栈这部分空间对程序员来说是不透明的。下图表示了一个Java栈的模型：</p><p><img src="/2018/09/30/Java与内存/4.png" alt="img"></p><p>　　<strong>局部变量表</strong>，顾名思义，想必不用解释大家应该明白它的作用了吧。就是用来存储方法中的局部变量（包括在方法中声明的非静态变量以及函数形参）。对于基本数据类型的变量，则直接存储它的值，对于引用类型的变量，则存的是指向对象的引用。局部变量表的大小在编译器就可以确定其大小了，因此在程序执行期间局部变量表的大小是不会改变的。</p><p>　　<strong>操作数栈</strong>，想必学过数据结构中的栈的朋友想必对表达式求值问题不会陌生，栈最典型的一个应用就是用来对表达式求值。想想一个线程执行方法的过程中，实际上就是不断执行语句的过程，而归根到底就是进行计算的过程。因此可以这么说，程序中的所有计算过程都是在借助于操作数栈来完成的。</p><p>　　<strong>指向运行时常量池的引用</strong>，因为在方法执行的过程中有可能需要用到类中的常量，所以必须要有一个引用指向运行时常量。</p><p>　　<strong>方法返回地址</strong>，当一个方法执行完毕之后，要返回之前调用它的地方，因此在栈帧中必须保存一个方法返回地址。</p><p>　　由于每个线程正在执行的方法可能不同，因此每个线程都会有一个自己的Java栈，互不干扰。</p><p> 3.<strong>本地方法栈</strong></p><p>　　本地方法栈与Java栈的作用和原理非常相似。区别只不过是Java栈是为执行Java方法服务的，而本地方法栈则是为执行本地方法（Native Method）服务的。在JVM规范中，并没有对本地方发展的具体实现方法以及数据结构作强制规定，虚拟机可以自由实现它。在HotSopt虚拟机中直接就把本地方法栈和Java栈合二为一。</p><p>4.<strong>堆</strong></p><p>　　在C语言中，堆这部分空间是唯一一个程序员可以管理的内存区域。程序员可以通过malloc函数和free函数在堆上申请和释放空间。那么在Java中是怎么样的呢？</p><p>　　Java中的堆是用来存储对象本身的以及数组（当然，数组引用是存放在Java栈中的）。只不过和C语言中的不同，在Java中，程序员基本不用去关心空间释放的问题，Java的垃圾回收机制会自动进行处理。因此这部分空间也是Java垃圾收集器管理的主要区域。另外，堆是被所有线程共享的，在JVM中只有一个堆。</p><p> 5.<strong>方法区</strong></p><p>　　方法区在JVM中也是一个非常重要的区域，它与堆一样，是被线程共享的区域。在方法区中，存储了每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码等。</p><p>　　在Class文件中除了类的字段、方法、接口等描述信息外，还有一项信息是常量池，用来存储编译期间生成的字面量和符号引用。</p><p>　　在方法区中有一个非常重要的部分就是运行时常量池，它是每一个类或接口的常量池的运行时表示形式，在类和接口被加载到JVM后，对应的运行时常量池就被创建出来。当然并非Class文件常量池中的内容才能进入运行时常量池，在运行期间也可将新的常量放入运行时常量池中，比如String的intern方法。</p><p>　　在JVM规范中，没有强制要求方法区必须实现垃圾回收。很多人习惯将方法区称为“永久代”，是因为HotSpot虚拟机以永久代来实现方法区，从而JVM的垃圾收集器可以像管理堆区一样管理这部分区域，从而不需要专门为这部分设计垃圾回收机制。不过自从JDK7之后，Hotspot虚拟机便将运行时常量池从永久代移除了。</p><h3 id="Java对象模型的内存布局"><a href="#Java对象模型的内存布局" class="headerlink" title="Java对象模型的内存布局"></a>Java对象模型的内存布局</h3><p>java是一种面向对象的语言，而Java对象在JVM中的存储也是有一定的结构的。而这个关于Java对象自身的存储模型称之为Java对象模型。</p><p>HotSpot虚拟机中，设计了一个OOP-Klass Model。OOP（Ordinary Object Pointer）指的是普通对象指针，而Klass用来描述对象实例的具体类型。</p><p>每一个Java类，在被JVM加载的时候，JVM会给这个类创建一个<code>instanceKlass</code>，保存在方法区，用来在JVM层表示该Java类。当我们在Java代码中，使用new创建一个对象的时候，JVM会创建一个<code>instanceOopDesc</code>对象，对象在内存中存储的布局可以分为3块区域：对象头（Header）、 实例数据（Instance Data）和对齐填充（Padding）。 </p><ol><li>对象头：标记字（32位虚拟机4B，64位虚拟机8B） + 类型指针（32位虚拟机4B，64位虚拟机8B）+ [数组长（对于数组对象才需要此部分信息）]</li><li>实例数据：存储的是真正有效数据，如各种字段内容，各字段的分配策略为longs/doubles、ints、shorts/chars、bytes/boolean、oops(ordinary object pointers)，相同宽度的字段总是被分配到一起，便于之后取数据。父类定义的变量会出现在子类定义的变量的前面。</li><li>对齐填充：对于64位虚拟机来说，对象大小必须是8B的整数倍，不够的话需要占位填充</li></ol><h3 id="JVM内存垃圾收集器"><a href="#JVM内存垃圾收集器" class="headerlink" title="JVM内存垃圾收集器"></a>JVM内存垃圾收集器</h3><p>为了理解现有收集器，我们需要先了解一些术语。最基本的垃圾收集涉及识别不再使用的内存并使其可重用。现代收集器在几个阶段进行这一过程，对于这些阶段我们往往有如下描述：</p><ul><li>并行- 在JVM运行时，同时存在应用程序线程和垃圾收集器线程。 并行阶段是由多个gc线程执行，即gc工作在它们之间分配。 不涉及GC线程是否需要暂停应用程序线程。</li><li>串行- 串行阶段仅在单个gc线程上执行。与之前一样，它也没有说明GC线程是否需要暂停应用程序线程。</li><li>STW - STW阶段，应用程序线程被暂停，以便gc执行其工作。 当应用程序因为GC暂停时，这通常是由于Stop The World阶段。</li><li>并发 -如果一个阶段是并发的，那么GC线程可以和应用程序线程同时进行。 并发阶段很复杂，因为它们需要在阶段完成之前处理可能使工作无效（译者注：因为是并发进行的，GC线程在完成一阶段的同时，应用线程也在工作产生操作内存，所以需要额外处理）的应用程序线程。</li><li>增量 -如果一个阶段是增量的，那么它可以运行一段时间之后由于某些条件提前终止，例如需要执行更高优先级的gc阶段，同时仍然完成生产性工作。 增量阶段与需要完全完成的阶段形成鲜明对比。</li></ul><h4 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h4><p>Serial收集器是最基本的收集器，这是一个单线程收集器，它仍然是JVM在Client模式下的默认新生代收集器。它有着优于其他收集器的地方：简单而高效（与其他收集器的单线程比较），Serial收集器由于没有线程交互的开销，专心只做垃圾收集自然也获得最高的效率。在用户桌面场景下，分配给JVM的内存不会太多，停顿时间完全可以在几十到一百多毫秒之间，只要收集不频繁，这是完全可以接受的。</p><h4 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h4><p>ParNew是Serial的多线程版本，在回收算法、对象分配原则上都是一致的。ParNew收集器是许多运行在Server模式下的默认新生代垃圾收集器，其主要在于除了Serial收集器，目前只有ParNew收集器能够与CMS收集器配合工作。</p><h4 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h4><p>Parallel Scavenge收集器是一个新生代垃圾收集器，其使用的算法是复制算法，也是并行的多线程收集器。</p><p>Parallel Scavenge 收集器更关注可控制的吞吐量，吞吐量等于运行用户代码的时间/(运行用户代码的时间+垃圾收集时间)。直观上，只要最大的垃圾收集停顿时间越小，吞吐量是越高的，但是GC停顿时间的缩短是以牺牲吞吐量和新生代空间作为代价的。比如原来10秒收集一次，每次停顿100毫秒，现在变成5秒收集一次，每次停顿70毫秒。停顿时间下降的同时，吞吐量也下降了。</p><p>停顿时间越短就越适合需要与用户交互的程序；而高吞吐量则可以最高效的利用CPU的时间，尽快的完成计算任务，主要适用于后台运算。</p><h4 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h4><p>Serial Old收集器是Serial收集器的老年代版本，也是一个单线程收集器，采用“标记-整理算法”进行回收。其运行过程与Serial收集器一样。</p><h4 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h4><p>Parallel Old收集器是Parallel Scavenge收集器的老年代版本，使用多线程和标记-整理算法进行垃圾回收。其通常与Parallel Scavenge收集器配合使用，“吞吐量优先”收集器是这个组合的特点，在注重吞吐量和CPU资源敏感的场合，都可以使用这个组合。</p><h4 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h4><p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短停顿时间为目标的收集器，CMS收集器采用标记–清除算法，运行在老年代。主要包含以下几个步骤：</p><ul><li>初始标记</li><li>并发标记</li><li>重新标记</li><li>并发清除</li></ul><p>其中初始标记和重新标记仍然需要“Stop the world”。初始标记仅仅标记GC Root能直接关联的对象，并发标记就是进行GC Root Tracing过程，而重新标记则是为了修正并发标记期间，因用户程序继续运行而导致标记变动的那部分对象的标记记录。</p><p>由于整个过程中最耗时的并发标记和并发清除，收集线程和用户线程一起工作，所以总体上来说，CMS收集器回收过程是与用户线程并发执行的。虽然CMS优点是并发收集、低停顿，很大程度上已经是一个不错的垃圾收集器，但是还是有三个显著的缺点：</p><ol><li>CMS收集器对CPU资源很敏感。在并发阶段，虽然它不会导致用户线程停顿，但是会因为占用一部分线程（CPU资源）而导致应用程序变慢。</li><li>CMS收集器不能处理浮动垃圾。所谓的“浮动垃圾”，就是在并发标记阶段，由于用户程序在运行，那么自然就会有新的垃圾产生，这部分垃圾被标记过后，CMS无法在当次集中处理它们，只好在下一次GC的时候处理，这部分未处理的垃圾就称为“浮动垃圾”。也是由于在垃圾收集阶段程序还需要运行，即还需要预留足够的内存空间供用户使用，因此CMS收集器不能像其他收集器那样等到老年代几乎填满才进行收集，需要预留一部分空间提供并发收集时程序运作使用。要是CMS预留的内存空间不能满足程序的要求，这是JVM就会启动预备方案：临时启动Serial Old收集器来收集老年代，这样停顿的时间就会很长。</li><li>由于CMS使用标记–清除算法，所以在收集之后会产生大量内存碎片。当内存碎片过多时，将会给分配大对象带来困难，这是就会进行Full GC。</li></ol><h4 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h4><p>G1收集器与CMS相比有很大的改进：</p><p>· G1收集器采用标记–整理算法实现。</p><p>· 可以非常精确地控制停顿。</p><p>​    G1收集器可以实现在基本不牺牲吞吐量的情况下完成低停顿的内存回收，这是由于它极力的避免全区域的回收，G1收集器将Java堆（包括新生代和老年代）划分为多个区域（Region），并在后台维护一个优先列表，每次根据允许的时间，优先回收垃圾最多的区域 。</p><h4 id="ZGC收集器"><a href="#ZGC收集器" class="headerlink" title="ZGC收集器"></a>ZGC收集器</h4><p>Java 11 新加入的ZGC垃圾收集器号称可以达到10ms 以下的 GC 停顿，ZGC给Hotspot Garbage Collectors增加了两种新技术：着色指针和读屏障。下面引用国外文章说的内容：</p><blockquote><h5 id="着色指针"><a href="#着色指针" class="headerlink" title="着色指针"></a><strong>着色指针</strong></h5><p>着色指针是一种将信息存储在指针（或使用Java术语引用）中的技术。因为在64位平台上（ZGC仅支持64位平台），指针可以处理更多的内存，因此可以使用一些位来存储状态。 ZGC将限制最大支持4Tb堆（42-bits），那么会剩下22位可用，它目前使用了4位： <code>finalizable</code>， <code>remap</code>， <code>mark0</code>和<code>mark1</code>。 我们稍后解释它们的用途。</p><p>着色指针的一个问题是，当您需要取消着色时，它需要额外的工作（因为需要屏蔽信息位）。 像SPARC这样的平台有内置硬件支持指针屏蔽所以不是问题，而对于x86平台来说，ZGC团队使用了简洁的多重映射技巧。</p><h5 id="多重映射"><a href="#多重映射" class="headerlink" title="多重映射"></a><strong>多重映射</strong></h5><p>要了解多重映射的工作原理，我们需要简要解释虚拟内存和物理内存之间的区别。 物理内存是系统可用的实际内存，通常是安装的DRAM芯片的容量。 虚拟内存是抽象的，这意味着应用程序对（通常是隔离的）物理内存有自己的视图。 操作系统负责维护虚拟内存和物理内存范围之间的映射，它通过使用页表和处理器的内存管理单元（MMU）和转换查找缓冲器（TLB）来实现这一点，后者转换应用程序请求的地址。</p><p>多重映射涉及将不同范围的虚拟内存映射到同一物理内存。 由于设计中只有一个<code>remap</code>，<code>mark0</code>和<code>mark1</code>在任何时间点都可以为1，因此可以使用三个映射来完成此操作。 ZGC源代码中有一个很好的图表可以说明这一点。</p><h5 id="读屏障"><a href="#读屏障" class="headerlink" title="读屏障"></a><strong>读屏障</strong></h5><p>读屏障是每当应用程序线程从堆加载引用时运行的代码片段（即访问对象上的非原生字段non-primitive field）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">void</span> <span class="title">printName</span><span class="params">( Person person )</span> </span>&#123;</span><br><span class="line">&gt;     String name = person.name;  <span class="comment">// 这里触发读屏障</span></span><br><span class="line">&gt;                                 <span class="comment">// 因为需要从heap读取引用 </span></span><br><span class="line">&gt;                                 <span class="comment">// </span></span><br><span class="line">&gt;     System.out.println(name);   <span class="comment">// 这里没有直接触发读屏障</span></span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>在上面的代码中，String name = person.name 访问了堆上的person引用，然后将引用加载到本地的name变量。此时触发读屏障。 Systemt.out那行不会直接触发读屏障，因为没有来自堆的引用加载（name是局部变量，因此没有从堆加载引用）。 但是System和out，或者println内部可能会触发其他读屏障。</p><p>这与其他GC使用的写屏障形成对比，例如G1。读屏障的工作是检查引用的状态，并在将引用（或者甚至是不同的引用）返回给应用程序之前执行一些工作。 在ZGC中，它通过测试加载的引用来执行此任务，以查看是否设置了某些位。 如果通过了测试，则不执行任何其他工作，如果失败，则在将引用返回给应用程序之前执行某些特定于阶段的任务。</p><h5 id="标记"><a href="#标记" class="headerlink" title="标记"></a><strong>标记</strong></h5><p>现在我们了解了这两种新技术是什么，让我们来看看ZG的GC循环。</p><p>GC循环的第一部分是标记。标记包括查找和标记运行中的应用程序可以访问的所有堆对象，换句话说，查找不是垃圾的对象。</p><p>ZGC的标记分为三个阶段。 第一阶段是STW，其中GC roots被标记为活对象。 GC roots类似于局部变量，通过它可以访问堆上其他对象。 如果一个对象不能通过遍历从roots开始的对象图来访问，那么应用程序也就无法访问它，则该对象被认为是垃圾。从roots访问的对象集合称为Live集。GC roots标记步骤非常短，因为roots的总数通常比较小。</p><p>该阶段完成后，应用程序恢复执行，ZGC开始下一阶段，该阶段同时遍历对象图并标记所有可访问的对象。 在此阶段期间，读屏障针使用掩码测试所有已加载的引用，该掩码确定它们是否已标记或尚未标记，如果尚未标记引用，则将其添加到队列以进行标记。</p><p>在遍历完成之后，有一个最终的，时间很短的的Stop The World阶段，这个阶段处理一些边缘情况（我们现在将它忽略），该阶段完成之后标记阶段就完成了。</p><h5 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a><strong>重定位</strong></h5><p>GC循环的下一个主要部分是重定位。重定位涉及移动活动对象以释放部分堆内存。 为什么要移动对象而不是填补空隙？ 有些GC实际是这样做的，但是它导致了一个不幸的后果，即分配内存变得更加昂贵，因为当需要分配内存时，内存分配器需要找到可以放置对象的空闲空间。 相比之下，如果可以释放大块内存，那么分配内存就很简单，只需要将指针递增新对象所需的内存大小即可。</p><p>ZGC将堆分成许多页面，在此阶段开始时，它同时选择一组需要重定位活动对象的页面。选择重定位集后，会出现一个Stop The World暂停，其中ZGC重定位该集合中root对象，并将他们的引用映射到新位置。与之前的Stop The World步骤一样，此处涉及的暂停时间仅取决于root的数量以及重定位集的大小与对象的总活动集的比率，这通常相当小。所以不像很多收集器那样，暂停时间随堆增加而增加。</p><p>移动root后，下一阶段是并发重定位。 在此阶段，GC线程遍历重定位集并重新定位其包含的页中所有对象。 如果应用程序线程试图在GC重新定位对象之前加载它们，那么应用程序线程也可以重定位该对象，这可以通过读屏障（在从堆加载引用时触发）</p><p>这可确保应用程序看到的所有引用都已更新，并且应用程序不可能同时对重定位的对象进行操作。</p><p>GC线程最终将对重定位集中的所有对象重定位，然而可能仍有引用指向这些对象的旧位置。 GC可以遍历对象图并重新映射这些引用到新位置，但是这一步代价很高昂。 因此这一步与下一个标记阶段合并在一起。在下一个GC周期的标记阶段遍历对象对象图的时候，如果发现未重映射的引用，则将其重新映射，然后标记为活动状态。</p></blockquote><h3 id="JVM内存优化"><a href="#JVM内存优化" class="headerlink" title="JVM内存优化"></a>JVM内存优化</h3><p>在《深入理解Java虚拟机》一书中讲了很多jvm优化思路，下面我来简单说说。</p><h4 id="java内存抖动"><a href="#java内存抖动" class="headerlink" title="java内存抖动"></a>java内存抖动</h4><p>堆内存都有一定的大小，能容纳的数据是有限制的，当Java堆的大小太大时，垃圾收集会启动停止堆中不再应用的对象，来释放内存。现在，内存抖动这个术语可用于描述在极短时间内分配给对象的过程。 具体如何优化请谷歌查询~</p><h4 id="jvm大页内存"><a href="#jvm大页内存" class="headerlink" title="jvm大页内存"></a>jvm大页内存</h4><h5 id="什么是内存分页？"><a href="#什么是内存分页？" class="headerlink" title="什么是内存分页？"></a>什么是内存分页？</h5><p>CPU是通过寻址来访问内存的。32位CPU的寻址宽度是 0~0xFFFFFFFF，即4G，也就是说可支持的物理内存最大是4G。但在实践过程中，程序需要使用4G内存，而可用物理内存小于4G，导致程序不得不降低内存占用。为了解决此类问题，现代CPU引入了<code>MMU</code>（Memory Management Unit，内存管理单元）。       </p><p><code>MMU</code> 的核心思想是利用虚拟地址替代物理地址，即CPU寻址时使用虚址，由MMU负责将虚址映射为物理地址。MMU的引入，解决了对物理内存的限制，对程序来说，就像自己在使用4G内存一样。       </p><p><strong>内存分页</strong>(Paging)是在使用MMU的基础上，提出的一种内存管理机制。它将虚拟地址和物理地址按固定大小（4K）分割成页(page)和页帧(page frame)，并保证页与页帧的大小相同。这种机制，从数据结构上，保证了访问内存的高效，并使OS能支持非连续性的内存分配。在程序内存不够用时，还可以将不常用的物理内存页转移到其他存储设备上，比如磁盘，这就是虚拟内存。    </p><p>要知道，虚拟地址与物理地址需要通过映射，才能使CPU正常工作。而映射就需要存储映射表。在现代CPU架构中，映射关系通常被存储在物理内存上一个被称之为页表(page table)的地方。 页表是被存储在内存中的，CPU通过总线访问内存，肯定慢于直接访问寄存器的。为了进一步优化性能，现代CPU架构引入了<code>TLB</code>（Translation lookaside buffer，页表寄存器缓冲），用来缓存一部分经常访问的页表内容 。</p><h5 id="为什么要支持大内存分页？"><a href="#为什么要支持大内存分页？" class="headerlink" title="为什么要支持大内存分页？"></a>为什么要支持大内存分页？</h5><p>TLB是有限的，这点毫无疑问。当超出TLB的存储极限时，就会发生 TLB miss，于是OS就会命令CPU去访问内存上的页表。如果频繁的出现TLB miss，程序的性能会下降地很快。</p><p>为了让TLB可以存储更多的页地址映射关系，我们的做法是调大内存分页大小。</p><p>如果一个页4M，对比一个页4K，前者可以让TLB多存储1000个页地址映射关系，性能的提升是比较可观的。</p><h5 id="开启JVM大页内存"><a href="#开启JVM大页内存" class="headerlink" title="开启JVM大页内存"></a>开启JVM大页内存</h5><p>JVM启用时加参数 -XX:LargePageSizeInBytes=10m 如果JDK是在1.5 update5以前的，还需要加 -XX:+UseLargePages，作用是启用大内存页支持。 </p><h4 id="通过软引用和弱引用提升JVM内存使用性能"><a href="#通过软引用和弱引用提升JVM内存使用性能" class="headerlink" title="通过软引用和弱引用提升JVM内存使用性能"></a>通过软引用和弱引用提升JVM内存使用性能</h4><h5 id="强软弱虚"><a href="#强软弱虚" class="headerlink" title="强软弱虚"></a>强软弱虚</h5><ol><li>强引用：</li></ol><p>只要引用存在，垃圾回收器永远不会回收</p><p>Object obj = new Object();</p><p>//可直接通过obj取得对应的对象 如obj.equels(new Object());</p><p>而这样 obj对象对后面new Object的一个强引用，只有当obj这个引用被释放之后，对象才会被释放掉，这也是我们经常所用到的编码形式。</p><ol start="2"><li>软引用（可以实现缓存）：</li></ol><p>非必须引用，内存溢出之前进行回收，可以通过以下代码实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">SoftReference&lt;Object&gt; sf = <span class="keyword">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class="line"></span><br><span class="line">obj = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">sf.get();<span class="comment">//有时候会返回null</span></span><br></pre></td></tr></table></figure></p><p>这时候sf是对obj的一个软引用，通过sf.get()方法可以取到这个对象，当然，当这个对象被标记为需要回收的对象时，则返回null；软引用主要用户实现类似缓存的功能，在内存足够的情况下直接通过软引用取值，无需从繁忙的真实来源查询数据，提升速度；当内存不足时，自动删除这部分缓存数据，从真正的来源查询这些数据。</p><ol start="3"><li>弱引用（用来在回调函数中防止内存泄露）：</li></ol><p>第二次垃圾回收时回收，可以通过如下代码实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">WeakReference&lt;Object&gt; wf = <span class="keyword">new</span> WeakReference&lt;Object&gt;(obj);</span><br><span class="line"></span><br><span class="line">obj = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">wf.get();<span class="comment">//有时候会返回null</span></span><br><span class="line"></span><br><span class="line">wf.isEnQueued();<span class="comment">//返回是否被垃圾回收器标记为即将回收的垃圾</span></span><br></pre></td></tr></table></figure></p><p>弱引用是在第二次垃圾回收时回收，短时间内通过弱引用取对应的数据，可以取到，当执行过第二次垃圾回收时，将返回null。弱引用主要用于监控对象是否已经被垃圾回收器标记为即将回收的垃圾，可以通过弱引用的isEnQueued方法返回对象是否被垃圾回收器标记。</p><ol start="4"><li>虚引用：</li></ol><p>垃圾回收时回收，无法通过引用取到对象值，可以通过如下代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">PhantomReference&lt;Object&gt; pf = <span class="keyword">new</span> PhantomReference&lt;Object&gt;(obj);</span><br><span class="line">obj=<span class="keyword">null</span>;</span><br><span class="line">pf.get();<span class="comment">//永远返回null</span></span><br><span class="line">pf.isEnQueued();<span class="comment">//返回是否从内存中已经删除</span></span><br></pre></td></tr></table></figure><p>虚引用是每次垃圾回收的时候都会被回收，通过虚引用的get方法永远获取到的数据为null，因此也被成为幽灵引用。虚引用主要用于检测对象是否已经从内存中删除。</p><h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h5><p>简单来说，可以使用软引用还引用数量巨大的对象，详情请参考<a href="http://www.cnblogs.com/JavaArchitect/p/8685993.html" target="_blank" rel="noopener">http://www.cnblogs.com/JavaArchitect/p/8685993.html</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此篇文章总共1.5W字，我从计算机物理内存体系讲到了java内存模型，在通过java内存模型引出了JVM内存的相关知识点。觉得写的好的请给个赞。本篇文章我会率先发布在我的个人博客，随后会在掘金等平台相继发出。最后，非常感谢你的阅读~</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>文中的各种超链接</p><p>《深入理解Java虚拟机》</p><p>《Java并发编程的艺术》</p><p>《架构解密从分布式到微服务》</p><p><a href="https://www.cnblogs.com/yubo/archive/2010/04/23/1718810.html" target="_blank" rel="noopener">SMP、NUMA、MPP体系结构介绍</a></p><p><a href="https://medium.com/airbnb-engineering/nebula-as-a-storage-platform-to-build-airbnbs-search-backends-ecc577b05f06" target="_blank" rel="noopener">ZGC原理（请用正确的姿势魔法上网观看）</a></p><p><a href="https://www.youtube.com/watch?v=tShc0dyFtgw" target="_blank" rel="noopener">Stefan Karlsson和PerLiden Jfokus的演讲（请用正确的姿势魔法上网）</a></p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>【版权申明】此片为原创内容，使用 <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/" target="_blank" rel="noopener">CC BY-NC-SA 3.0</a>授权条款，请遵守对应的义务，即被授权人有义务在所有副本中都必须包含版权声明。谢谢合作~</p><p>想要解锁更多新姿势？请访问我的个人博客<a href="https://blog.tengshe789.tech/（😘" target="_blank" rel="noopener">https://blog.tengshe789.tech/（😘</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;又是一年秋招季，哎呀妈呀我被虐的惨来~这不，前几阵失踪没更新博客，其实是我偷偷把时间用在复习课本了（雾&lt;/p&gt;
&lt;p&gt;坚持在社区分享博客也很久了，由于过去的文章有很多疏漏之处，很多大佬都在评论指出我的过错，我很开心也很失望，开心的是有大家帮我指出错误，失望的鄙人学识浅薄总没
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
      <category term="并发" scheme="https://tengshe789.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>记一次不经思考的消费(AppStore退款)</title>
    <link href="https://tengshe789.github.io/2018/09/03/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%8D%E7%BB%8F%E6%80%9D%E8%80%83%E7%9A%84%E6%B6%88%E8%B4%B9-AppStore%E9%80%80%E6%AC%BE/"/>
    <id>https://tengshe789.github.io/2018/09/03/记一次不经思考的消费-AppStore退款/</id>
    <published>2018-09-02T23:54:54.000Z</published>
    <updated>2019-11-20T13:39:41.553Z</updated>
    
    <content type="html"><![CDATA[<p>昨天晚上，我做了一个惊天地泣鬼神的事情</p><p>帮媳妇改完论文，突然抖了一个机灵“每天都用电脑，我难道永远的脱离使用纸和笔么？”</p><p>我还是个孩子！</p><p>说罢，打开AppStore，就是一堆翻。没错，上个月我入了一个apple pencil，几乎没怎么用。我现在的所有思维都是给我的apple pencil找老婆</p><p><img src="/2018/09/03/记一次不经思考的消费-AppStore退款/1535933495124.png" alt="1535933495124"></p><p>一眼就看到了这个app，支持手写笔，自动谷歌同步，可以OCR，那个眼馋啊    </p><p>纠结了一阵，</p><p><img src="/2018/09/03/记一次不经思考的消费-AppStore退款/44ce5968103f417bb5d9f7fc61b7fa7d.jpg" alt="img"></p><p>👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇</p><p>👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇</p><p>👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇</p><p><img src="/2018/09/03/记一次不经思考的消费-AppStore退款/1535933671318.png" alt="1535933671318"></p><p>👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇</p><p>👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇</p><p>👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇</p><p><img src="/2018/09/03/记一次不经思考的消费-AppStore退款/timg.jpg" alt="img"></p><p>然后我就买了。。</p><p>打开app以后，<img src="/2018/09/03/记一次不经思考的消费-AppStore退款/1535933810115.png" alt="1535933810115"></p><p>这啥啊，长得和OneNote一毛一样，竟然收50大洋</p><p>退退退！<img src="/2018/09/03/记一次不经思考的消费-AppStore退款/1535933853422.png" alt="1535933853422"></p><p>果断打开果子官方网找退款通道</p><p>🤨🤨🤨🤨🤨🤨🤨🤨🤨🤨🤨🤨🤨🤨🤨🤨🤨🤨</p><p>一小时过去了</p><p>😵😵😵😵😵😵😵😵😵😵😵😵😵😵😵😵😵😵</p><p>夜还是辣么黑，我的钱包还是辣么瘪</p><p>法克Q🙂果子</p><p>我心里咆哮着</p><p>没办法，百度吧，以下是正文</p><h2 id="退款"><a href="#退款" class="headerlink" title="退款"></a>退款</h2><p>要知道，在苹果眼中，退款是分为两种的，超过90天和没有超过90天。要阅读本片文章，你要知道，用了超过90天的app是非常难退款的。下面我来介绍苹果家没有超过90天退款app的方法</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>打开 <a href="https://reportaproblem.apple.com/" target="_blank" rel="noopener">https://reportaproblem.apple.com/</a> ，并登陆你的果子账号</p><h3 id="※第二步※"><a href="#※第二步※" class="headerlink" title="※第二步※"></a>※第二步※</h3><p><img src="/2018/09/03/记一次不经思考的消费-AppStore退款/1535934396968.png" alt="1535934396968"></p><p>寻找你买过的爱啪啪，点击报告问题，选择需要报告的问题。</p><p>这其中有“我没有授权此项购买”、“并不像购买此项目”、“原本打算购买另一个项目”、“未下载项目或者无法找到项目”、“项目无法安装或下载太慢”、“项目可打开，但是未起到预期的作用”、“没有列出我的问题”等多个选项各选。</p><p>由这些选项我们可以看出，苹果对退款原因的接受度还是挺广的，这些选项几乎包含了所有的原因，尤其是“并不想购买此项目”显得格外任性。</p><p>下面给大家一个问题描述的范文：</p><p>I have downloaded a XXXX（要退费程序的名称）program for iPhone （或 iPad） from the App Store，  but this item dose not meet my expectation. </p><p>Would you please help me refund my payment ？ </p><p>Thank you very much.</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>慢慢等邮件么，我是晚上12点退的，第二天醒来就收到退款和退款邮件了~</p><h2 id="如何理性消费"><a href="#如何理性消费" class="headerlink" title="如何理性消费"></a>如何理性消费</h2><p><br></p><p><br></p><p><br></p><p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><p><strong>理性！ 不可能的！这辈子都无法理性！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天晚上，我做了一个惊天地泣鬼神的事情&lt;/p&gt;
&lt;p&gt;帮媳妇改完论文，突然抖了一个机灵“每天都用电脑，我难道永远的脱离使用纸和笔么？”&lt;/p&gt;
&lt;p&gt;我还是个孩子！&lt;/p&gt;
&lt;p&gt;说罢，打开AppStore，就是一堆翻。没错，上个月我入了一个apple pencil，几乎没
      
    
    </summary>
    
    
      <category term="窍门" scheme="https://tengshe789.github.io/tags/%E7%AA%8D%E9%97%A8/"/>
    
      <category term="生活" scheme="https://tengshe789.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>如何用Java与python代码解释IO模型</title>
    <link href="https://tengshe789.github.io/2018/08/25/IO%E6%A8%A1%E5%9E%8B/"/>
    <id>https://tengshe789.github.io/2018/08/25/IO模型/</id>
    <published>2018-08-25T11:39:12.000Z</published>
    <updated>2019-11-20T13:39:40.564Z</updated>
    
    <content type="html"><![CDATA[<p>最近爷爷生病，我一直在陪床。陪床空隙，偶而研究一会资料。前天刚好看了点《UNIX网络编程》，比较头大。现在我来整理一下所学所得，并用于个人备忘。如果有不对，请批评。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">https://blog.tengshe789.tech/</a></p><h1 id="IO模型介绍"><a href="#IO模型介绍" class="headerlink" title="IO模型介绍"></a>IO模型介绍</h1><p>IO模型是什么？很多书籍或者百度百度百科，都没有给出明确的解释，我也不敢乱下定义。以我愚见，IO模型，是通过根据前人主观意识的思考而构成客观阐述IO复杂操作逻辑的物件。</p><p>要知道，应用程序使用系统资源的一个过程，<strong>进程无法直接操作IO设备的</strong>，因为用户进程不能直接访问磁盘，所以要通过内核的系统调用读取，这个内核读取的过程就是用户进程等待的过程，等待内核读取后将数据从内核内存复制到进程内存。因此操作系统设立一个IO模型进行规范，就非常有必要了。</p><p><img src="/2018/08/25/IO模型/831179-20160814120934953-1360584282.png" alt="应用程序使用系统资源"></p><p>为了更好地了解IO模型，我们需要事先回顾下：同步、异步、阻塞、非阻塞</p><p><strong>同步与异步</strong>：描述的是用户线程与内核的交互方式，同步指用户线程发起IO请求后需要等待或者轮询内核IO操作完成后才能继续执行；而异步是指用户线程发起IO请求后仍然继续执行，当内核IO操作完成后会通知用户线程，或者调用用户线程注册的回调函数。</p><p><strong>阻塞与非阻塞</strong>：描述是用户线程调用内核IO操作的方式，阻塞是指IO操作需要彻底完成后才返回到用户空间；而非阻塞是指IO操作被调用后立即返回给用户一个状态值，无需等到IO操作彻底完成。</p><p>IO模型一共有5类：</p><ul><li><p>blocking-IO           BIO（阻塞IO）</p></li><li><p>non-blocking IO      NIO（非阻塞IO）</p></li><li><p>IO multiplexing      IO多路复用</p></li><li><p>signal driven IO     信号驱动IO</p></li><li><p>asynchronous IO    AIO（异步IO）</p><p>由于signal driven IO（信号驱动IO）在实际中并不常用，所以主要介绍其余四种IO Model。</p></li></ul><h1 id="BIO（blocking-io）"><a href="#BIO（blocking-io）" class="headerlink" title="BIO（blocking io）"></a>BIO（blocking io）</h1><p>先来看看读操作流程</p><p><img src="/2018/08/25/IO模型/1535200521414.png" alt="1535200521414"></p><p>从图中可以看出，用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据。</p><p>对于network io来说，很多时候数据在一开始还没有到达（比如，还没有收到一个完整的UDP包），这个时候kernel就要等待足够的数据到来。</p><p>而在用户进程这边，整个进程会被阻塞。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。</p><p><strong>也就是说，blocking IO的特点就是在IO执行的两个阶段（等待数据和拷贝数据两个阶段）都被block了。</strong></p><h2 id="JAVA-阻塞-demo"><a href="#JAVA-阻塞-demo" class="headerlink" title="JAVA 阻塞 demo"></a>JAVA 阻塞 demo</h2><p>下面的例子主要使用Socket通道进行编程。服务端如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: socketTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: one thread demo for bio version</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: tEngSHe789</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-08-26 21:17</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocket serverSocket=<span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">            System.out.println(<span class="string">"服务端Start...."</span>);</span><br><span class="line">            <span class="comment">//等待客户端就绪 -&gt; 堵塞</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                Socket socket = serverSocket.accept();</span><br><span class="line">                System.out.println(<span class="string">"发现客户端连接"</span>);</span><br><span class="line">                InputStream is=socket.getInputStream();</span><br><span class="line">                <span class="keyword">byte</span>[] b =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="comment">//等待客户端发送请求 -&gt; 堵塞</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> data = is.read(b);</span><br><span class="line">                    String info=<span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (data!=-<span class="number">1</span>)&#123;</span><br><span class="line">                        info=<span class="keyword">new</span> String(b,<span class="number">0</span>,data,<span class="string">"GBK"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(info);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: socketTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: one thread demo for bio version</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: tEngSHe789</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket socket=<span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">8888</span>);</span><br><span class="line">            OutputStream os = socket.getOutputStream();</span><br><span class="line">            System.out.println(<span class="string">"正在发送数据"</span>);</span><br><span class="line">            os.write(<span class="string">"这是来自客户端的信息"</span>.getBytes());</span><br><span class="line">            os.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PY-阻塞-demo"><a href="#PY-阻塞-demo" class="headerlink" title="PY 阻塞 demo"></a>PY 阻塞 demo</h2><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket()</span><br><span class="line">s.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8888</span>))</span><br><span class="line">print(<span class="string">'服务端启动....'</span>)</span><br><span class="line"><span class="comment"># 等待客户端就绪 -&gt; 堵塞</span></span><br><span class="line">s.listen()</span><br><span class="line"><span class="comment"># 等待客户端发送请求 -&gt; 堵塞</span></span><br><span class="line">conn,addr = s.accept()</span><br><span class="line">msg = conn.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(msg)</span><br><span class="line">conn.close()</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>,<span class="number">8888</span>))</span><br><span class="line">print(<span class="string">'客户端已启动....'</span>)</span><br><span class="line">s.send(<span class="string">'正在发送数据'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h1 id="NIO（non-blocking-io）"><a href="#NIO（non-blocking-io）" class="headerlink" title="NIO（non blocking io）"></a>NIO（non blocking io）</h1><p>NIO就不一样了，recvform系统调用调用之后，进程并没有被阻塞，内核马上返回给进程，如果数据还没准备好，此时会返回一个error。进程在返回之后，可以干点别的事情，然后再发起recvform系统调用。重复上面的过程，循环往复的进行recvform系统调用。这个过程通常被称之为轮询。</p><p>轮询检查内核数据，直到数据准备好，再拷贝数据到进程，进行数据处理。需要注意，拷贝数据整个过程，进程仍然是属于阻塞的状态。</p><p><img src="/2018/08/25/IO模型/1535201598609.png" alt="1535201598609"></p><h2 id="JAVA-与NIO"><a href="#JAVA-与NIO" class="headerlink" title="JAVA 与NIO"></a>JAVA 与NIO</h2><p>Java NIO(New IO)是一个可以替代标准Java IO API的IO API（从Java 1.4开始)，Java NIO提供了与标准IO不同的IO工作方式。</p><p>在java中，标准的IO基于字节流和字符流进行操作的，而NIO是基于通道（Channel）和缓冲区（Buffer）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。</p><p>我们先看看Buffer类</p><h3 id="Buffer类"><a href="#Buffer类" class="headerlink" title="Buffer类"></a>Buffer类</h3><p>Java NIO中的Buffer主要用于与NIO通道进行交互，数据是从通道读入到缓冲区，从缓冲区写入通道中的。概念上，缓冲区可以看成包在一个对象内的数组，下面看一个图</p><p><img src="/2018/08/25/IO模型/1535619881305.png" alt="新创建的ByteBuffer"></p><p>这是一个新创建的容量为10的ByteBuffer逻辑图，他有四个属性来提供关于其包含的数据元素信息，分别是：</p><p>1）容量（capacity）：表示Buffer最大数据容量，缓冲区容量不能为负，并且建立后不能修改。</p><p>2）限制（limit）：也叫上界。<strong>第一个不应该读取或者写入的数据的索引</strong>，即位于limit后的数据不可以读写。缓冲区的限制不能为负，并且不能大于其容量（capacity）。</p><p>3）位置（position）：下一个要读取或写入的数据的索引。缓冲区的位置不能为负，并且不能大于其限制（limit）。</p><p>4）标记（mark）与重置（reset）：标记是一个索引，通过Buffer中的mark()方法指定Buffer中一个特定的position，之后可以通过调用reset()方法恢复到这个position。</p><p>从这幅图可以看到，他的容量（capacity）和限制（limit）设置为10，位置设置为0，每个缓冲区容量是固定的，标记是未定义的，其他三个属性可以通过使用缓冲区解决。</p><h4 id="缓冲区存储数据支持的数据类型"><a href="#缓冲区存储数据支持的数据类型" class="headerlink" title="缓冲区存储数据支持的数据类型"></a>缓冲区存储数据支持的数据类型</h4><p>支持七种数据类型，他们是：<br>1.byteBuffer<br>2.charBuffer<br>3.shortBuffer<br>4.IntBuffer<br>5.LongBuffer<br>6.FloatBuffer<br>7.DubooBuffer</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>使用Buffer读写数据一般遵循以下四个步骤：</p><p>(1) 写入数据到Buffer，一般有可以从Channel读取到缓冲区中，也可以调用put方法写入。</p><p>(2) 调用flip()方法，切换数据模式。</p><p>(3) 从Buffer中读取数据，一般从缓冲区读取数据写入到通道中，也可以调用get方法读取。</p><p>(4) 调用clear()方法或者compact()方法。</p><h4 id="缓冲区API"><a href="#缓冲区API" class="headerlink" title="缓冲区API"></a>缓冲区API</h4><p>首先，用allocate 指定缓冲区大小1024</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer byteBuffer=ByteBuffer.allocate(<span class="number">1024</span>);</span><br></pre></td></tr></table></figure><h5 id="存储或填充"><a href="#存储或填充" class="headerlink" title="存储或填充"></a>存储或填充</h5><p>我们可以用put 存入数据到缓冲区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byteBuffer.put(<span class="string">"tengshe789"</span>.getBytes());</span><br></pre></td></tr></table></figure><p>当调用put时，会指出下一个元素应当被插入的位置，位置（position）指向的是下一个元素。如果指向的位置超过限制（limit），则抛出<code>BufferOverFlowException</code>异常。</p><h5 id="翻转"><a href="#翻转" class="headerlink" title="翻转"></a>翻转</h5><p>Flip将一个能够继续添加数据元素的填充状态的缓冲区翻转成一个准备读出元素的释放状态 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byteBuffer.flip();</span><br></pre></td></tr></table></figure><p>具体有什么用呢？</p><p>对于已经写满了缓冲区，如果将缓冲区内容传递给一个通道，以使内容能被全部写出。</p><p>但如果通道现在在缓冲区上执行get，那么它将从我们刚刚插入的有用数据之外取出未定义数据。通过翻转将位置值重新设为 0，通道就会从正确位置开始获取。</p><p>例如我们定义了一个容量是10的buffer，并填入hello，如下图所示  </p><p><img src="/2018/08/25/IO模型/1535636182144.png" alt="1535636182144"></p><p>翻转后如下图所示 </p><p><img src="/2018/08/25/IO模型/1535636206735.png" alt="1535636206735"></p><h5 id="重读"><a href="#重读" class="headerlink" title="重读"></a>重读</h5><p>Rewind与 flip相似，但不影响上界属性。它只是将位置值设回 0。可以使用 rewind()后退，重读已经被翻转的缓冲区中的数据。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byteBuffer.rewind();</span><br></pre></td></tr></table></figure><h5 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h5><p>翻转完了，就可以用get获取缓冲区数据了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] b= <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuffer.limit()];</span><br><span class="line">byteBuffer.get(b);</span><br></pre></td></tr></table></figure><p>当调用get时，会指出下一个元素应当被索引的位置，位置（position）返回时会+1s。如果指向的位置超过限制（limit），则抛出<code>BufferUnderFlowException</code>异常。如果提供的索引超过范围，也会抛出<code>IndexOutOfBoundsException</code>异常</p><h5 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h5><p>remaining可以告诉你从当前位置（position）到限制（limit）还剩的元素数目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = byteBuffer.remaining();</span><br></pre></td></tr></table></figure><p>clear将缓冲区重置为空状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byteBuffer.clear();</span><br></pre></td></tr></table></figure><h5 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h5><p>如果我们只想从缓冲区中释放一部分数据，而不是全部，然后重新填充。为了实现这一点，未读的数据元素需要下移以使第一个元素索引为 0。尽管重复这样做会效率低下，但这有时非常必要，而 API 对此为您提供了一个 compact()函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byteBuffer.compact();</span><br></pre></td></tr></table></figure><h5 id="标记与重置"><a href="#标记与重置" class="headerlink" title="标记与重置"></a>标记与重置</h5><p>标记是一个索引，通过Buffer中的mark()方法指定Buffer中一个特定的position，之后可以通过调用reset()方法恢复到这个position。要知道缓冲区的标记在mark()函数被调用前时未定义的，如果标记未定义，调用reset()会导致<code>InvalidMarkException</code>异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byteBuffer.position(<span class="number">2</span>).mark().position(<span class="number">4</span>).reset();</span><br></pre></td></tr></table></figure><p>要注意，java.nio中的类特意被设计为支持级联调用，优雅的使用级联调用，可以产生优美易读的代码。</p><h4 id="直接缓冲区与非直接缓冲区"><a href="#直接缓冲区与非直接缓冲区" class="headerlink" title="直接缓冲区与非直接缓冲区"></a>直接缓冲区与非直接缓冲区</h4><h5 id="非直接缓冲区"><a href="#非直接缓冲区" class="headerlink" title="非直接缓冲区"></a>非直接缓冲区</h5><p>上面我们说了ByteBuffer，也就是缓冲区的用法，譬如用<code>allocate()</code> 方法指定缓冲区大小，然后进行填充或翻转操作等等等。我们所创建的缓冲区，都属于直接缓冲区。他们都是在JVM<strong>中</strong>内存中创建，在每次调用基础操作系统的一个本机IO之前或者之后，虚拟机都会将缓冲区的内容复制到中间缓冲区（或者从中间缓冲区复制内容），缓冲区的内容驻留在JVM内，因此销毁容易，但是占用JVM内存开销，处理过程中有复制操作。 </p><p>非直接缓冲区写入步骤：</p><p>1.创建一个临时的直接ByteBuffer对象。<br>2.将非直接缓冲区的内容复制到临时缓冲中。<br>3.使用临时缓冲区执行低层次I/O操作。<br>4.临时缓冲区对象离开作用域，并最终成为被回收的无用数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: UndirectBuffer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 利用通道完成文件的复制(非直接缓冲区)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: tEngSHe789</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UndirectBuffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"d://blog.md"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d://blog.md"</span>);</span><br><span class="line">        <span class="comment">//获取管道</span></span><br><span class="line">        FileChannel in = fis.getChannel();</span><br><span class="line">        FileChannel out = fos.getChannel();</span><br><span class="line">        <span class="comment">// 分配指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">while</span> (in.read(buffer) !=-<span class="number">1</span>)&#123;</span><br><span class="line">            buffer.flip();<span class="comment">// 准备读数据了</span></span><br><span class="line">            out.write(buffer);</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="直接缓冲区"><a href="#直接缓冲区" class="headerlink" title="直接缓冲区"></a>直接缓冲区</h5><p>直接缓冲区，是通过 <code>allocateDirect()</code> 方法在JVM内存<strong>外</strong>开辟内存，在每次调用基础<strong>操作系统</strong>的一个本机IO之前或者之后，虚拟机都会避免将缓冲区的内容复制到中间缓冲区（或者从中间缓冲区复制内容），缓冲区的内容驻留在<strong>物理内存</strong>内，会少一次复制过程，如果需要循环使用缓冲区，用直接缓冲区可以很大地提高性能。</p><p>虽然直接缓冲区使JVM可以进行高效的I/O操作，但它使用的内存是操作系统分配的，绕过了JVM堆栈，建立和销毁比堆栈上的缓冲区要更大的开销。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: DirectBuffer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 使用直接缓冲区完成文件的复制(内存映射文件)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: tEngSHe789</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectBuffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建管道</span></span><br><span class="line">        FileChannel in=FileChannel.open(Paths.get(<span class="string">"d://blog.md"</span>),StandardOpenOption.READ);</span><br><span class="line">        FileChannel out=FileChannel.open(Paths.get(<span class="string">"d://blog.md"</span>),StandardOpenOption.WRITE</span><br><span class="line">                        ,StandardOpenOption.READ,StandardOpenOption.CREATE);</span><br><span class="line">        <span class="comment">// 拿到将管道内容映射到内存的直接缓冲区映射文件（一个位置在硬盘的基于内存的缓冲区）</span></span><br><span class="line">        MappedByteBuffer inMappedByteBuffer = in.map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, in.size());</span><br><span class="line">        MappedByteBuffer outMappedByteBuffer = out.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, in.size());</span><br><span class="line">        <span class="comment">// 对直接缓冲区进行数据读写操作</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[inMappedByteBuffer.limit()];</span><br><span class="line">        inMappedByteBuffer.get(bytes);</span><br><span class="line">        outMappedByteBuffer.put(bytes);</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="直接缓冲区与非直接缓冲区的区别"><a href="#直接缓冲区与非直接缓冲区的区别" class="headerlink" title="直接缓冲区与非直接缓冲区的区别"></a>直接缓冲区与非直接缓冲区的区别</h5><ol><li>字节缓冲区要么是直接的，要么是非直接的。如果为直接字节缓冲区，则 Java 虚拟机会尽最大努力直接在此缓冲区上执行本机 I/O 操作。也就是说，在每次调用基础操作系统的一个本机 I/O 操作之前（或之后），虚拟机都会尽量避免将缓冲区的内容复制到中间缓冲区中（或从中间缓冲区中复制内容）。</li><li>直接字节缓冲区可以通过调用此类的 <code>allocateDirect()</code> 工厂方法来创建。此方法返回的缓冲区进行分配和取消分配所需成本通常高于非直接缓冲区。直接缓冲区的内容可以驻留在常规的垃圾回收堆之外，因此，它们对应用程序的内存需求量造成的影响可能并不明显。所以，建议将直接缓冲区主要分配给那些易受基础系统的本机 I/O 操作影响的大型、持久的缓冲区。一般情况下，最好仅在直接缓冲区能在程序性能方面带来明显好处时分配它们。</li><li>直接字节缓冲区还可以通过 <code>FileChannel</code> 的 <code>map()</code> 方法 将文件区域直接映射到内存中来创建。该方法返回<code>MappedByteBuffer</code> 。 Java 平台的实现有助于通过 JNI 从本机代码创建直接字节缓冲区。如果以上这些缓冲区中的某个缓冲区实例指的是不可访问的内存区域，则试图访问该区域不会更改该缓冲区的内容，并且将会在访问期间或稍后的某个时间导致抛出不确定的异常。</li><li>字节缓冲区是直接缓冲区还是非直接缓冲区可通过调用其 <code>isDirect()</code> 方法来确定。提供此方法是为了能够在性能关键型代码中执行显式缓冲区管理。</li></ol><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>通道是java.nio的第二个创新，表示提供 IO 设备(例如：文件、套接字)的直接连接。</p><p>若需要使用 NIO 系统，需要获取用于连接 IO 设备的通道以及用于容纳数据的缓冲区。然后操作缓冲区，对数据进行处理。这其中，Channel负责传输， Buffer 负责存储。</p><p>通道是由java.nio.channels 包定义的，Channel 表示 IO 源与目标打开的连接。Channel 类似于传统的“流”。只不过 Channel本身不能直接访问数据， <strong>Channel 只能与Buffer 进行交互</strong>。</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>java.nio.channels.Channel 接口：</p><ul><li>FileChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li><li>DatagramChannel</li></ul><p>与缓冲区不同，通道API主要由接口指定，不同操作系统上通道的实现会不一样</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>直接缓冲区与非直接缓冲区的栗子</p><h4 id="分散读取与聚集写入"><a href="#分散读取与聚集写入" class="headerlink" title="分散读取与聚集写入"></a>分散读取与聚集写入</h4><p>通道可以有选择地实现两个新的接口： <code>ScatteringByteChannel</code> 和 <code>GatheringByteChannel</code>。</p><p><img src="/2018/08/25/IO模型/1535700194601.png" alt="1535700194601"></p><p><code>ScatteringByteChannel</code> 有2个read方法，我们都叫她分散读取(scattering Reads)，分散读取中，通道依次填充每个缓冲区。填满一个缓冲区后，它就开始填充下一个。在某种意义上，缓冲区数组就像一个大缓冲区。</p><p><img src="/2018/08/25/IO模型/1535700216940.png" alt="1535700216940"></p><p><code>GatheringByteChannel</code>中有2个wirte方法，我们都叫她聚集写入(gathering Writes)，他可以将多个缓冲区的数据聚集到通道中</p><h5 id="分散读取与聚集写入的应用"><a href="#分散读取与聚集写入的应用" class="headerlink" title="分散读取与聚集写入的应用"></a>分散读取与聚集写入的应用</h5><p>分散读取/聚集写入对于将数据划分为几个部分很有用。例如，您可能在编写一个使用消息对象的网络应用程序，每一个消息被划分为固定长度的头部和固定长度的正文。您可以创建一个刚好可以容纳头部的缓冲区和另一个刚好可以容难正文的缓冲区。当您将它们放入一个数组中并使用分散读取来向它们读入消息时，头部和正文将整齐地划分到这两个缓冲区中。</p><p>我们从缓冲区所得到的方便性对于缓冲区数组同样有效。因为每一个缓冲区都跟踪自己还可以接受多少数据，所以分散读取会自动找到有空间接受数据的第一个缓冲区。在这个缓冲区填满后，它就会移动到下一个缓冲区。</p><h2 id="Python与NIO"><a href="#Python与NIO" class="headerlink" title="Python与NIO"></a>Python与NIO</h2><p>服务端（具体见注释）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">s=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">s.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8888</span>))</span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line">s.setblocking(<span class="keyword">False</span>) <span class="comment">#设置socket的接口为非阻塞</span></span><br><span class="line">conn_l=[] <span class="comment"># 存储和server的连接 的 连接</span></span><br><span class="line">del_l=[] <span class="comment"># 存储和和server的断开 的 连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 这个过程是不阻塞的</span></span><br><span class="line">        conn,addr=s.accept() <span class="comment"># 当没人连接的时候会报错，走exception（&lt;- py中是except）</span></span><br><span class="line">        conn_l.append(conn)</span><br><span class="line">    <span class="keyword">except</span> BlockingIOError:</span><br><span class="line">        print(conn_l)</span><br><span class="line">        <span class="keyword">for</span> conn <span class="keyword">in</span> conn_l:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data=conn.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                    del_l.append(conn)</span><br><span class="line">                <span class="comment"># 这个过程是不阻塞的</span></span><br><span class="line">                data=conn.recv(<span class="number">1024</span>) <span class="comment"># 不阻塞</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data: <span class="comment"># 如果拿不到data</span></span><br><span class="line">                    del_l.append(conn) <span class="comment"># 在废弃列表中添加conn</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                conn.send(data.upper())</span><br><span class="line">            <span class="keyword">except</span> BlockingIOError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">except</span> ConnectionResetError:</span><br><span class="line">                del_l.append(conn)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> conn <span class="keyword">in</span> del_l:</span><br><span class="line">            conn_l.remove(conn)</span><br><span class="line">            conn.close()</span><br><span class="line">        del_l=[]</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">c=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">c.connect((<span class="string">'127.0.0.1'</span>,<span class="number">8888</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    msg=input(<span class="string">'&gt;&gt;: '</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line">    c.send(msg.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    data=c.recv(<span class="number">1024</span>)</span><br><span class="line">    print(data.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h1 id="IO复用-IO-multiplexing"><a href="#IO复用-IO-multiplexing" class="headerlink" title="IO复用(IO multiplexing)"></a>IO复用(IO multiplexing)</h1><p>I/O多路复用实际上就是用select, poll, epoll监听多个io对象，当io对象有变化（有数据）的时候就通知用户进程。有些地方也称这种IO方式为<strong>事件驱动IO</strong>(event driven IO)。与多进程和多线程技术相比，I/O多路复用技术的最大优势是系统开销小，系统不必创建进程/线程，也不必维护这些进程/线程，从而大大减小了系统的开销。当然具体的可以看看这篇<a href="https://www.cnblogs.com/jeakeven/p/5435916.html" target="_blank" rel="noopener">博客</a>，现在先来看下I/O多路复用的流程：</p><p><img src="/2018/08/25/IO模型/1535201615305.png" alt="1535201615305"></p><p>（1）当用户进程调用了select，那么整个进程会被block；</p><p>（2）而同时，kernel会“监视”所有select负责的socket；</p><p>（3）当任何一个socket中的数据准备好了，select就会返回；</p><p>（4）这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</p><p>这个图和BIO的图其实并没有太大的不同，事实上还更差一些。因为这里需要使用两个系统调用(select和recvfrom)，而BIO只调用了一个系统调用(recvfrom)。但是，用select的优势在于它可以<strong>同时处理多个connection</strong>。</p><h2 id="JAVA实现IO复用"><a href="#JAVA实现IO复用" class="headerlink" title="JAVA实现IO复用"></a>JAVA实现IO复用</h2><p>这里我们使用的是java.nio下模块来完成I/O多路复用的例子。我用到的Selector（选择器），是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接。</p><h3 id="Selector的使用"><a href="#Selector的使用" class="headerlink" title="Selector的使用"></a>Selector的使用</h3><h4 id="Selector的创建"><a href="#Selector的创建" class="headerlink" title="Selector的创建"></a>Selector的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Selector selector = Selector.open();</span><br></pre></td></tr></table></figure><h4 id="向Selector注册通道"><a href="#向Selector注册通道" class="headerlink" title="向Selector注册通道"></a>向Selector注册通道</h4><p>为了将Channel和Selector配合使用，必须将channel注册到selector上。通过SelectableChannel.register()方法来实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">SelectionKey key = channel.register(selector,Selectionkey.OP_READ);</span><br></pre></td></tr></table></figure><p>register()方法的第二个参数是一个“interest集合”，意思是在通过Selector监听Channel时对什么事件感兴趣。可以监听四种不同类型的事件：Connect、Accept、Read、Write</p><p>通道触发了一个事件意思是该事件已经就绪。所以，某个channel成功连接到另一个服务器称为“连接就绪”。一个server socket channel准备好接收新进入的连接称为“接收就绪”。一个有数据可读的通道可以说是“读就绪”。等待写数据的通道可以说是“写就绪”。</p><p>这四种事件用SelectionKey的四个常量来表示：</p><ol><li>SelectionKey.OP_CONNECT可连接</li><li>SelectionKey.OP_ACCEPT可接受连接</li><li>SelectionKey.OP_READ可读</li><li>SelectionKey.OP_WRITE可写</li></ol><h4 id="SelectionKey"><a href="#SelectionKey" class="headerlink" title="SelectionKey"></a>SelectionKey</h4><p>当向Selector注册Channel时，register()方法会返回一个SelectionKey对象。它包含了：</p><ul><li>interest集合</li><li>ready集合</li><li>Channel</li><li>Selector</li><li>附加的对象（可选）</li></ul><h5 id="interest集合"><a href="#interest集合" class="headerlink" title="interest集合"></a>interest集合</h5><p>interest集合是你所选择的感兴趣的事件集合。可以通过SelectionKey读写interest集合，像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> interestSet = selectionKey.interestOps();</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isInterestedInAccept  = (interestSet &amp; SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT；</span><br><span class="line"><span class="keyword">boolean</span> isInterestedInConnect = interestSet &amp; SelectionKey.OP_CONNECT;</span><br><span class="line"><span class="keyword">boolean</span> isInterestedInRead    = interestSet &amp; SelectionKey.OP_READ;</span><br><span class="line"><span class="keyword">boolean</span> isInterestedInWrite   = interestSet &amp; SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure><p>可以看到，用“位与”操作interest 集合和给定的SelectionKey常量，可以确定某个确定的事件是否在interest 集合中。</p><h5 id="ready集合"><a href="#ready集合" class="headerlink" title="ready集合"></a>ready集合</h5><p>ready 集合是通道已经准备就绪的操作的集合。在一次选择(Selection)之后，你会首先访问这个ready set。Selection将在下一小节进行解释。可以这样访问ready集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> readySet = selectionKey.readyOps();</span><br></pre></td></tr></table></figure><p>可以用像检测interest集合那样的方法，来检测channel中什么事件或操作已经就绪。但是，也可以使用以下四个方法，它们都会返回一个布尔类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">selectionKey.isAcceptable();</span><br><span class="line">selectionKey.isConnectable();</span><br><span class="line">selectionKey.isReadable();</span><br><span class="line">selectionKey.isWritable();</span><br></pre></td></tr></table></figure><h4 id="从SelectionKey访问Channel和Selector"><a href="#从SelectionKey访问Channel和Selector" class="headerlink" title="从SelectionKey访问Channel和Selector"></a>从SelectionKey访问Channel和Selector</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Channel  channel  = selectionKey.channel();</span><br><span class="line">Selector selector = selectionKey.selector();</span><br></pre></td></tr></table></figure><h3 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: NIOServer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 服务端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: tEngSHe789</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务端Start...."</span>);</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel=ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">// 设置非阻塞</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 绑定连接</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">// 获取选择器</span></span><br><span class="line">        Selector selector=Selector.open();</span><br><span class="line">        <span class="comment">// 将通道注册到选择器</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        <span class="comment">// 轮调式获取选择“已经准备就绪”的事件</span></span><br><span class="line">        <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 获取当前选择器的左右已经准备就绪的监听事件（选择key）</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator=selector.selectedKeys().iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">                <span class="comment">// 获取准备就绪事件</span></span><br><span class="line">                SelectionKey selectionKey=iterator.next();</span><br><span class="line">                <span class="comment">// 判断具体是什么事件</span></span><br><span class="line">                <span class="keyword">if</span> (selectionKey.isAcceptable())&#123;<span class="comment">//如果是“接受就绪”</span></span><br><span class="line">                    SocketChannel socketChannel=serverSocketChannel.accept();<span class="comment">// 获取连接</span></span><br><span class="line">                    socketChannel.configureBlocking(<span class="keyword">false</span>); <span class="comment">// 设置非阻塞</span></span><br><span class="line">                    <span class="comment">//将该通道注册到服务器上</span></span><br><span class="line">                    socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (selectionKey.isReadable())&#123;<span class="comment">//如是“已经就绪”</span></span><br><span class="line">                    SocketChannel socketChannel= (SocketChannel) selectionKey.channel();<span class="comment">//获取连接</span></span><br><span class="line">                    <span class="comment">//读数据</span></span><br><span class="line">                    ByteBuffer buffer=ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                    <span class="comment">//分散读取</span></span><br><span class="line">                    len=socketChannel.read(buffer);</span><br><span class="line">                    <span class="keyword">while</span> (len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        buffer.flip();</span><br><span class="line">                        System.out.println(<span class="keyword">new</span> String(buffer.array(),<span class="number">0</span>,len));</span><br><span class="line">                        buffer.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: NIOClient</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: tEngSHe789</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户端Start...."</span>);</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        SocketChannel socketChannel=SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>,<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">// 设置SocketChannel接口为非阻塞</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//指定缓冲区大小</span></span><br><span class="line">        ByteBuffer buffer=ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String msg = scanner.next();</span><br><span class="line">            <span class="comment">// 存储</span></span><br><span class="line">            buffer.put((<span class="keyword">new</span> Date().toString()+<span class="string">"\n"</span>+msg).getBytes());</span><br><span class="line">            <span class="comment">// 翻转</span></span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="comment">// 聚集写入</span></span><br><span class="line">            socketChannel.write(buffer);</span><br><span class="line">            <span class="comment">// 释放</span></span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="python实现IO复用"><a href="#python实现IO复用" class="headerlink" title="python实现IO复用"></a>python实现IO复用</h2><p>对比java用的是Selector，可以帮我们在默认操作系统下选择最合适的select, poll, epoll这三种多路复合模型，python是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的<strong>任意一个进入读就绪状态</strong>，select()<strong>函数就可以返回</strong>。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"></span><br><span class="line">s=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">s.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">s.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8888</span>))</span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line">s.setblocking(<span class="keyword">False</span>) <span class="comment">#设置socket的接口为非阻塞</span></span><br><span class="line">read_l=[s,] <span class="comment"># 数据可读通道的列表</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="comment"># 监听的read_l中的socket对象内部如果有变化，那么这个对象就会在r_l</span></span><br><span class="line">    <span class="comment"># 第二个参数里有什么对象，w_l中就有什么对象</span></span><br><span class="line">    <span class="comment"># 第三个参数 如果这里的对象内部出错，那会把这些对象加到x_l中</span></span><br><span class="line">    <span class="comment"># 1 是超时时间</span></span><br><span class="line">    r_l,w_l,x_l=select.select(read_l,[],[],<span class="number">1</span>)</span><br><span class="line">    print(r_l)</span><br><span class="line">    <span class="keyword">for</span> ready_obj <span class="keyword">in</span> r_l:</span><br><span class="line">        <span class="keyword">if</span> ready_obj == s:</span><br><span class="line">            conn,addr=ready_obj.accept() <span class="comment">#此时的ready_obj等于s</span></span><br><span class="line">            read_l.append(conn)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data=ready_obj.recv(<span class="number">1024</span>) <span class="comment">#此时的ready_obj等于conn</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                    ready_obj.close()</span><br><span class="line">                    read_l.remove(ready_obj)</span><br><span class="line">                    <span class="keyword">raise</span> Exception(<span class="string">'连接断开'</span>)</span><br><span class="line">                ready_obj.send(data.upper())</span><br><span class="line">            <span class="keyword">except</span> ConnectionResetError:</span><br><span class="line">                ready_obj.close()</span><br><span class="line">                read_l.remove(ready_obj)</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">c=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">c.connect((<span class="string">'127.0.0.1'</span>,<span class="number">8888</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    msg=input(<span class="string">'&gt;&gt;&gt;: '</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line">    c.send(msg.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    data=c.recv(<span class="number">1024</span>)</span><br><span class="line">    print(data.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h1 id="AIO（asynchronous-io）"><a href="#AIO（asynchronous-io）" class="headerlink" title="AIO（asynchronous io）"></a>AIO（asynchronous io）</h1><p>真正的异步I/O很牛逼，流程大概如下：</p><p><img src="/2018/08/25/IO模型/1535201637209.png" alt="1535201637209"></p><p>（1）用户进程发起read操作之后，立刻就可以开始去做其它的事。</p><p>（2）而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。</p><p>（3）然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>Java中使用AIO需要用到java.nio.channels.AsynchronousChannelGroup和java.nio.channels.AsynchronousServerSocketChannel的包，由于实际项目鲜有人用，就不演示了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 回顾一下各个IO Model的比较，如图所示：</p><p><img src="/2018/08/25/IO模型/1535764374640.png" alt="1535764374640"></p><ul><li>blocking io ：阻塞型io，再熟悉不过，处理accept、read、write都会阻塞用户进程</li><li>non blocking io：当通过系统调用的时候，如果没有连接或者数据到达就直接返回一个错误，用户进程不阻塞但是不断的轮询。注意这个不是java nio框架中对应的网络模型</li><li>io multiplexing：io多路复用才是nio对应的网络io模型。该模型对于用户进程也是阻塞的，优点是可以同时支持多个connetciotn。前三种都属于同步模式，既然都是同步的，如果要做到看似非阻塞，那么就需要轮询机制。相对于上一种模型，这种只是将轮询从用户进程转移到了操作系统内核，通过调用select函数，不断轮询多个connection是否ready，如果有一种ready好的，就通过事件通知用户进程，用户进程再通过事件来处理。所以在java的nio中会看到一大堆事件处理。这种模型的阻塞不是在socket层面的阻塞，而是在调动select函数的阻塞。而且相对于blocking io，还多了一次select的系统调用，其实性能会更低，所以在低吞吐量下，这种io不见得比bio+线程池的模型优越。</li><li>sign driven：极少使用，不知道</li><li>async io ：java7时候开始升级，也成为nio2。实现了异步的io。前三种都是通过用户进程在主动获取（bio的阻塞，nbio的轮询和iomult的按事件获取），而aio交互很简单，用户进程调用后立即返回，用户进程不阻塞，内核当完成网络io和数据复制后，主动通知用户进程。前面说到的系统内核做的操作，除了等待网络io就绪数据到达内核，还有从系统内核复制用户空间去的过程，异步io这两者对于用户进程而言都是非阻塞的，而前三种，在数据从内核复制到用户空间这个过程，都是阻塞的。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>前言说的那本书</p><p>Ron Hitchens于2002年 著的《java nio》</p><p><a href="https://www.cnblogs.com/findumars/p/6361627.html" target="_blank" rel="noopener">findumars</a></p><p><a href="https://www.cnblogs.com/dongguacai/p/5770287.html" target="_blank" rel="noopener">冬瓜蔡</a></p><p><a href="https://www.cnblogs.com/otherside/p/5605471.html" target="_blank" rel="noopener">彼岸船夫 </a></p><p><a href="https://blog.csdn.net/qq_33804730/article/details/79171188" target="_blank" rel="noopener">NIO的/分散读取和聚集写入</a></p><p><a href="https://ifeve.com/selectors/" target="_blank" rel="noopener">并发编程网</a></p><p>感谢</p><h3 id="续1s时间"><a href="#续1s时间" class="headerlink" title="续1s时间"></a>续1s时间</h3><p>全片结束，觉得我写的不错？想要了解更多精彩新姿势？赶快打开我的👉个人<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">博客</a> 👈吧！</p><p>本文地址<a href="https://blog.tengshe789.tech/2018/08/25/IO%E6%A8%A1%E5%9E%8B/#more，部分觉得比较用心的会同步到掘金，简书，谢谢你那么可爱，还一直关注着我~❤😝" target="_blank" rel="noopener">https://blog.tengshe789.tech/2018/08/25/IO%E6%A8%A1%E5%9E%8B/#more，部分觉得比较用心的会同步到掘金，简书，谢谢你那么可爱，还一直关注着我~❤😝</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近爷爷生病，我一直在陪床。陪床空隙，偶而研究一会资料。前天刚好看了点《UNIX网络编程》，比较头大。现在我来整理一下所学所得，并用于个人备忘。如果有不对，请批评。&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.tengshe789.t
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
      <category term="python" scheme="https://tengshe789.github.io/tags/python/"/>
    
      <category term="操作系统" scheme="https://tengshe789.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>解释性语言&amp;编译性语言，动态&amp;静态语言?</title>
    <link href="https://tengshe789.github.io/2018/08/21/%E8%A7%A3%E9%87%8A%E6%80%A7%E8%AF%AD%E8%A8%80-%E7%BC%96%E8%AF%91%E6%80%A7%E8%AF%AD%E8%A8%80%EF%BC%8C%E5%8A%A8%E6%80%81-%E9%9D%99%E6%80%81%E8%AF%AD%E8%A8%80/"/>
    <id>https://tengshe789.github.io/2018/08/21/解释性语言-编译性语言，动态-静态语言/</id>
    <published>2018-08-21T13:16:10.000Z</published>
    <updated>2019-11-20T13:39:41.553Z</updated>
    
    <content type="html"><![CDATA[<p>你是不是每一次写完java，写完python，都有许些疑惑~</p><p>为什么每次新建一个python项目，JetBrains PyCharm 都会让你选一个解释器，什么是解释器呢？</p><p>为什么编写Java不需要解释器呢？今天就给你们带来答案~</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">https://blog.tengshe789.tech/</a></p><h2 id="编译型和解释型的区别"><a href="#编译型和解释型的区别" class="headerlink" title="编译型和解释型的区别"></a>编译型和解释型的区别</h2><h3 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h3><p><strong>先来看看编译型语言定义：</strong></p><blockquote><p>编译型语言首先是将源代码编译生成机器指令，再由机器运行机器码(二进制)。</p></blockquote><p>可以这么理解，编译型相当于用中英文词典（翻译器）将一本英文书一次性翻译<strong>（编译）</strong>成一本中文书。以后查看直接就是中文了。可想而知，以后读书<strong>（执行）</strong>会非常非常方便。</p><p>所以，由于程序执行<strong>速度快</strong>，同等条件下对系统要求较低，因此像开发操作系统、大型应用程序、数据库系统等时都采用它，像C/C++、Pascal/Object Pascal（Delphi）等都是编译语言</p><p>用c语言开发了程序后，需要通过编译器把程序编译成机器语言（即计算机识别的二进制文件，因为不同的操作系统计算机识别的二进制文件是不同的），所以c语言程序进行移植后，要重新编译。（如windows编译成ext文件，linux编译成erp文件）</p><h3 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h3><p><strong>再来看看解释型语言的定义：</strong></p><blockquote><p>解释型语言的源代码不是直接翻译成机器指令，而是先翻译成中间代码，再由解释器对中间代码进行解释运行。</p></blockquote><p>而解释型相当于用中英文词典<strong>（翻译器）</strong>将一本英文书读一段翻译一段<strong>（解释）</strong>中文。以后查看时还是需要重新翻译。这样效率会低一些，必须依赖解释器，但是跨平台性好。</p><p>所以，一些网页脚本、服务器脚本及辅助开发接口这样的对速度要求不高、对不同系统平台间的兼容性有一定要求的程序则通常使用解释性语言，如JavaScript、VBScript、Perl、Python、Ruby、MATLAB 等等</p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>编译型和解释型的定义是对立存在的，但也可以在一个语言中同时存在。</p><p>为什么我把 java 语言单独放出来呢？因为它同时兼有编译型和解释型特点。</p><p>整个流程如下：</p><p>我们编好源代码（.java 文件），编译生成字节码（.class 文件），再通过 JVM（java 虚拟机）运行生成机器指令，由机器运行机器码。<strong>注意，此处生成机器语言前的操作是解释型，每次运行都要重新解释。因此，此处表明 java 是解释型</strong>。</p><p>但是，部分 JVM（java 虚拟机）有一种 JIT（Just in time）机制，能够将部分已经解释翻译的常用机器指令保存。下次不需要解释，直接运行即可。<strong>此时 java 是编译型</strong>。</p><h2 id="动态语言和静态语言"><a href="#动态语言和静态语言" class="headerlink" title="动态语言和静态语言"></a>动态语言和静态语言</h2><p>我们常说的动态语言和静态语言，其实是指动态类型语言和静态类型语言。先来看看动态类型语言：</p><blockquote><p>动态类型语言，是指数据类型的检查是在运行时做的。用动态类型语言编程时，不用给变量指定数据类型，该语言会在你第一次赋值给变量时，在内部记录数据类型。</p></blockquote><p><strong>动态类型语言</strong>的优点是不需要写多种数据类型的代码，代码相对简洁一些，方便代码阅读。缺点是不方便调试，代码命名也容易混淆；</p><p>再来看看静态类型语言的定义：</p><blockquote><p>静态类型语言，是指数据类型的检查是在运行前（如编译阶段）做的。</p></blockquote><p><strong>静态类型语言</strong>的优点是方便调试，代码相对规范。缺点是需要写很多数据类型相关的代码，代码不够简洁。</p><h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2><p>结束 <br>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> 本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，缘分呢兄弟。赶快加个好友~  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你是不是每一次写完java，写完python，都有许些疑惑~&lt;/p&gt;
&lt;p&gt;为什么每次新建一个python项目，JetBrains PyCharm 都会让你选一个解释器，什么是解释器呢？&lt;/p&gt;
&lt;p&gt;为什么编写Java不需要解释器呢？今天就给你们带来答案~&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>一战中的制式步枪</title>
    <link href="https://tengshe789.github.io/2018/08/19/%E4%B8%80%E6%88%98%E4%B8%AD%E7%9A%84%E5%88%B6%E5%BC%8F%E6%AD%A5%E6%9E%AA/"/>
    <id>https://tengshe789.github.io/2018/08/19/一战中的制式步枪/</id>
    <published>2018-08-19T13:22:41.000Z</published>
    <updated>2019-11-20T13:39:40.744Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们不聊技术了，聊一聊枪支。我本人是个狂热的军事迷，而恰好最近找到一款游戏，是一战题材的，叫‘战地1’，原汁原味的一战武器的加入，让这个本来就很强势的第一人称射击游戏增添了独特魅力。废话不多说，今天我以这个游戏中的一战视角，来介绍以下一战中的制式武器。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h2 id="第一次世界大战"><a href="#第一次世界大战" class="headerlink" title="第一次世界大战"></a>第一次世界大战</h2><p>第一次世界大战（英语：World War I、First World War或Great War，简称WWI或WW1），简称一战，是在19世纪末20世纪初，资本主义国家向其终极阶段，即帝国主义过渡时产生的广泛的不可调和矛盾、亚洲，非洲，拉丁美洲殖民地和半殖民地基本上被列强瓜分完毕，新旧殖民主义矛盾激化、各帝国主义经济发展不平衡，秩序划分不对等的背景下，为重新瓜分世界和争夺全球霸权而爆发的一场世界级帝国主义战争。<br>战争过程主要是同盟国和协约国之间的战斗。</p><p>德意志帝国、奥匈帝国、奥斯曼帝国、保加利亚王国属同盟国阵营</p><p>大英帝国、法兰西第三共和国、俄罗斯帝国、意大利王国和美利坚合众国则属协约国阵营。</p><p>这场战争是欧洲历史上破坏性最强的战争之一。大约有6500万人参战，1000多万人丧生，2000万人受伤。战争造成了严重的经济损失。</p><h2 id="什么是制式武器"><a href="#什么是制式武器" class="headerlink" title="什么是制式武器"></a>什么是制式武器</h2><p>首先我这个题目叫‘一战中的制式步枪’，什么是制式步枪（武器）呢？制式武器即同一种兵器的各种技术参数相同的武器装备，并且经部队武器装备部门批准备案，有正式型号编号，正式批量列装部队使用的正规的标准武器。就像咱们中国PLA，步兵标配的95式突击步枪（Type 95），这个95式就是制式步枪。它的出现使得军警部队的武器管理，使用得以标准化，统一化。加强了武装部门的正规化。</p><h3 id="WWI制式步枪"><a href="#WWI制式步枪" class="headerlink" title="WWI制式步枪"></a>WWI制式步枪</h3><h4 id="Winchester-1895-Russian"><a href="#Winchester-1895-Russian" class="headerlink" title="Winchester 1895 (Russian)"></a>Winchester 1895 (Russian)</h4><p>温彻斯特M1894杠杆步枪由传奇性人物约翰·摩西·勃朗宁设计的M1894杠杆步枪，是美国历史上第一支使用无烟发射药枪弹，并且为狩猎而专门设计的杠杆步枪。</p><p>M1895步枪采用杠杆枪机式结构，其杠杆式枪机的基本原理与M1873步枪的相同，只是结构有所不同而已。M1873步枪通过扳机护圈杠杆的前后旋转，带动肘节摆动，从而带动枪机前后运动。而在M1895步枪上，扳机护圈杠杆与扳机座直接组成了肘节结构，其结构更为简单。M1895步枪的扳机座尾端固定在机匣上，其前端与扳机护圈杠杆中部绞接在一起，而扳机护圈杠杆上部与枪机前端绞接在一起，当扳机护圈杠杆摆动时，通过其上部带动枪机前后运动。另外，M1873步枪扳机护圈杠杆的旋转轴固定在机匣上，而M1895步枪的扳机护圈杠杆则没有固定的旋转轴，它的运动轨迹比较复杂，不是简单的旋转运动。前推扳机护圈杠杆时，其尾端先向前下方摆动，拉扳机座前端向下，使肘节结构弯曲。当扳机座前端向下摆动到一定位置时，扳机护圈杠杆前端便带动枪机向后。继续向下推扳机护圈杠杆，便使肘节结构进一步弯曲，扳机护圈杠杆上端带动枪机进一步向后，直至将其向后推到位。因此，扳机护圈杠杆既有旋转运动，又有上下方向的直线运动。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-35-30-022.png" alt="1895"></p><p>M1895步枪的特色表现在三个方面。</p><p>一是采用了盒式弹仓。这种弹仓比现在枪械上采用的固定式弹仓复杂得多。目前的固定式弹仓多采用螺旋弹簧 做托弹板簧，并直接置于托弹板之下，靠簧力将弹向上抬起。而M1895步枪采 用了当时常用的片簧做托弹板簧，其托弹板呈“V”形，上端卡在枪管下方的固定槽内，下方卡在托弹杆尾端的凹槽内，靠簧力驱动托弹杆逆时针旋转，带动托弹板向上运动，使弹仓内的枪弹进入待进膛位置。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-49-25-817.png" alt=""></p><p>其二，采用了闭锁楔铁。前推扳机护圈杠杆，其向前下方转动，使扳机座向下方摆动，扳机座前端钩住闭锁楔铁下端使之一起向下运动，闭锁楔铁上端离开枪机尾部的凹槽而使枪机开锁。继续前推扳机护圈杠杆，则带动枪机后退，并压倒击锤；后拉扳机护圈杠杆时，则先带动枪机复进。枪机复进到位时，继续后拉扳机护圈杠杆，其向后上方转动，带动扳机座向上摆动，推动闭锁楔铁向上，其上端进入枪机尾部的凹槽而使枪机闭锁。这个闭锁楔铁的设计使枪机闭锁更加确实，保证了射击时的安全性。<br>其三，抛壳挺兼作推弹齿。温彻斯特M1873及M1890步枪均依靠取弹器将弹壳抛出，但由于配合动作有时不太一致，使得抛壳力度不同，因而易出现问题。M1895步枪则专门设计了抛壳挺，从而解决了这一问题。在枪机前端面，抽壳钩在上，抛壳挺在下，由于抛壳挺突出于枪 机下缘，故其兼具推弹齿的功能。</p><p><img src="/2018/08/19/一战中的制式步枪/1534687524672.png" alt="1534687524672"></p><p>一战中W 1895为什么标注的国籍是Russian呢？</p><p>因为模型版的W 1895 中，.35 WCF，.405 WCF，.30-03和.30-06口径的用于美国体育市场， 销售额在30%-40%。 其他大部分是与俄罗斯帝国军方签订的合同中卖的。 1915年，俄罗斯急需小型武器，并与许多美国主要工厂接洽。 雷明顿和新英格兰西屋公司都签订了制造Mosin-Nagant步枪的合同，温彻斯特达成协议，用标准的俄罗斯军用7.62x54R弹药筒生产30万只1895型步枪。 与Mosin-Nagant命令不同，所有温彻斯特步枪都是在俄国革命之前交付的。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-49-17-463.png" alt=""></p><h3 id="Gewehr-M-95"><a href="#Gewehr-M-95" class="headerlink" title="Gewehr M.95"></a>Gewehr M.95</h3><p>Gewehr M1895 是标准后拉式枪机步枪，服务奥匈军队在第一次世界大战。除了其他一些东欧和巴尔干国家之外，这种武器大量制造，在停战后还与奥地利和匈牙利的继承国一起服役。</p><p>该武器采用革命性的直拉动作螺栓，使独特的武器具有较高的射速，补充了其良好的可靠性。通过一个5轮整体夹子（与德国Gewehr 98使用的剥离夹子相反），M1895最初用于圆头8x50mmR Mannlicher，并在第一次世界大战期间使用该弹药筒。第一次世界大战，步枪被转换成更强大的尖头“斯皮策”子弹，如8x56mmR。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-36-21-216.png" alt="Gewehr.95"></p><h3 id="Gew-98式"><a href="#Gew-98式" class="headerlink" title="Gew.98式"></a>Gew.98式</h3><p>98步枪，德国有两个98式，一个是Gew.98一个是Kar98， G98装备到35年，之后是K98。毛瑟98k卡宾枪是二战中德国狙击手的制式武器。为了避免在取下瞄准镜后不致失去抵抗能力，枪上还备有机械瞄具。在生产中，挑选最好的枪管用于装瞄准镜的步枪。这些步枪的扳机是经过修改的，其扳机力达1.8kg。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-35-40-611.png" alt=""></p><p>Gew.98式步枪为毛瑟步枪的改进型号，不仅吸收了早期毛瑟型号上的所有改进，主要特征是固定式双排弹仓和旋转后拉式枪机。弹仓为双排、固定式，其底板可以拆卸出来。装填时可以从顶部的抛壳口一发一发地装入，也可以通过弹夹一次装填满5发。每个桥夹装5发弹，足够装满一个弹仓，在机匣后桥上有机器加工出来的桥夹导槽。在装填后，当枪机关闭时，空的桥夹会被自动抛出。弹仓可以打开枪机清空或通过拆卸弹仓底板进行，但一般不推荐采用后一种方法。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-21-14-07-497.bmp" alt=""></p><h3 id="SMLE-MKIII"><a href="#SMLE-MKIII" class="headerlink" title="SMLE MKIII"></a>SMLE MKIII</h3><p>The Short Magazine Lee-Enfield Mk III，或简称为SMLE MkIII，是一种英式螺栓式步枪。Mark III是Lee-Enfield的演变，顾名思义它缩短了大约5英寸或13厘米，并于1907年推出。制造的复杂性意味着一个简化的变体，SMLE MkIII 于1915年推出。一个弹匣中有10发.303 British，它的容量是其他大多数国家步枪的两倍。挥舞着步枪的英国步兵也因“mad minute”而闻名，在此期间他们可以达到每分钟30发以上的速度。</p><p>这种武器在英联邦国家非常普遍，被加拿大，拉吉和澳新军团以及英国本身使用; 开发了许多变体，包括战地1942年出现的第4号。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-35-55-747.png" alt="SMLE MKIII"></p><h3 id="春田M1903"><a href="#春田M1903" class="headerlink" title="春田M1903"></a>春田M1903</h3><p>M1903春田步枪 (M1903 Springfield rifle)是一种旋转后拉式枪机步枪，由春田兵工厂生产，是美军在一战及二战的制式步枪，是春田兵工厂在毛瑟兵工厂的特许下研制的，旋转后拉式枪机仿自德国m1898，可以算是以毛瑟步枪为基础的变型枪。</p><p>M1903因为缩短了枪管，所以长度比毛瑟步枪短，拉机柄改为向下弯曲便于携行。由容量5发子弹的弹仓供弹，用5发分离式弹夹装弹。M1903步枪配用的M1906步枪弹（.30-06步枪弹）是在毛瑟式无底缘弹的基础上改进而成的，早期的M1903步枪还配有杆式刺刀，后改用了匕首型刺刀。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-36-41-656.png" alt="春田M1903"></p><p>第一次世界大战期间，当美国参战时，M1903步枪数量不足，美国将同样仿自德国毛瑟步枪枪机的一种恩菲尔德M1917命名为“M1917步枪”作补充装备，甚至一度在前线美国军队使用的M1917比M1903还多。一战结束后，美国军队只保留M1903作为制式步枪，M1917全部撤装作储备。<br>1938年，取代M1903步枪的半自动M1加兰德步枪产量不足，因此M1903步枪仍然是美国军队装备的主要步枪，在第二次世界大战中，美国军队仍然大量装备。剩余的M1903春田步枪被赋予了新的使命，包括改装成狙击步枪，狙击步枪版本加装光学瞄准镜，具有精度上的优势，而为不妨碍瞄准镜的使用，所以拆除了机械瞄具。<br>第二次世界大战期间，根据援助法案大量的M1903步枪装备中国军队，在中国抗战时期以及解放战争时期广泛使用。由于该枪外形、长短均与当时中国军队装备的中正式步枪（仿毛瑟1924）相似，被中国士兵称为“花旗中正式”。<br>M1903步枪成为美军制式装备100年后，仍然在美国军队中少量出现。并将枪身金属部件镀铬处理，配白色背带，供训练与检阅使用。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-52-19-720.png" alt=""></p><h3 id="Martini-Henry-马蒂尼-亨利步枪"><a href="#Martini-Henry-马蒂尼-亨利步枪" class="headerlink" title="Martini Henry 马蒂尼-亨利步枪"></a>Martini Henry 马蒂尼-亨利步枪</h3><p>纵观19世纪后期的军用武器，英国的马蒂尼-亨利步枪是不可不提的。它为英国向全世界扩张其帝国领土，发挥了非凡的作用。从冰雪覆盖的加拿大到位于撒哈拉沙漠边缘的苏丹，再到群山之中的阿富汗，到处都留下了它的足迹。历史上许多勇猛的尚武民族都被手持射程远、射速高的马蒂尼-亨利步枪的英国士兵镇压了。</p><p>马蒂尼-亨利步枪的传奇历史始于美国马萨诸塞州的枪炮商亨利·皮博迪。 1862年，皮博迪获得了后膛装填步枪的专利权，这种步枪采用起落式枪机，枪机下降时弹壳可以自动抛出，并且能够使下一发枪弹快速入膛。该枪采用简单的火枪式击锤击发方式而且必须手动待击。<br>1860年代末至1870年代初，这种后膛装填步枪受到了西班牙、加拿大、土耳其、罗马尼亚、新西兰和墨西哥等国的青睐，并购买了数万支。<br>1866年，一位居住在瑞士的奥地利籍设计师弗雷德里克·冯·马蒂尼修改了皮博迪的设计，用安装在枪机内部、由弹簧控制的击针代替了笨重的外置击锤，并且还重新设计了机匣、加固了抽壳钩。这些改进使得该枪的击发时间变得更短 (击发时间即为扣动扳机完成瞬间至底火发火的时间间隔)。<br>改进后的步枪不但比皮博迪的原型枪更坚固，而且在射速上也有很大提高。<br>但瑞士陆军还是决定采用旋转后拉式枪机的单发步枪，马蒂尼只得把他的设计提供给了其他国家。<br>1867年，英国陆军对外宣布要寻找一种步枪来替代其0.577英寸（14. 66mm）口径的斯奈德步枪。马蒂尼携带他的步枪参加了英军的试验，尽管有很多像亨利这样的知名枪炮商参与竞争，但他的步枪却技压群雄。1868年，坐落在恩菲尔德的英国皇家轻武器制造厂接到生产几支马蒂尼步枪用于进行进一步野外试验的命令。经过大量的野外试验，1871年7月3日，马蒂尼步枪被英军正式采用。由于该枪采用了亨利设计的带有膛线的枪管，因此英国陆军官方将其命名为马蒂尼-亨利MKⅠ步枪。<br>该枪是一种很实用的武器，盒子状的机匣使得扳机护圈位置向前了，并且杠杆一直延伸到枪托上。采用胡桃木枪托和护木，护木用两个套箍固定在枪身上，并且有一圆杆通过沟槽镶嵌在下护木的底部，枪管右侧安装了一把骑兵刺刀。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-36-55-815.png" alt="马蒂尼-亨利步枪"></p><p>马蒂尼-亨利MKⅠ步枪操作起来非常简便，射手只需向下拉动杠杆，就会完成如下的动作：击针缩进枪机的前部；<br>枪机回转，露出弹膛；扳机嵌入阻铁槽；该枪仅有的保险装置是位于机匣右侧的水滴状待击指示器，待击时其指在十点钟的位置上，击发后指在十二点钟的位置。机匣右侧顶部刻有V.R字样，即维多利亚王冠标志，其右下侧为军队制式标志。罗马数字Ⅰ刻在机匣右侧靠近制造商标志处。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-53-06-436.png" alt=""></p><p>马蒂尼-亨利步枪最初使用的枪弹口径为0.450英寸，采用博克赛式底火，卷制黄铜弹壳。后来，该枪弹改为采用几层带纸垫的卷制薄铜皮弹壳身并配以铁制弹壳底部的弹壳。</p><p>使用卷制黄铜皮弹壳的枪弹看起来很适用，但在实战中用薄材料制成的弹壳易于变形、撕裂、受潮，而且当武器连续发射温度较高时，薄铜皮易粘着在弹膛上，阻碍抽壳。这样士兵们只好强行从弹膛里撬出空弹壳，导致铁制弹壳底部撕裂，而卷制黄铜皮弹壳留在弹膛内，使得一支很好的步枪也无用武之地了。<br>1885年，为了对付群体犯罪，英国陆军发明了装填鹿弹的枪弹配备马蒂尼-亨利步枪使用。它是一种装有11个小球的带有博克赛式底火的枪弹，直径为7mm，内装黑火药。此外，为了防止弹内小球相互碰撞发出响声，损坏金属薄片的弹壳，弹壳中的空隙用骨粉填充。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-53-00-279.png" alt=""></p><h3 id="FusilModele1886-勒贝尔M1886"><a href="#FusilModele1886-勒贝尔M1886" class="headerlink" title="FusilModèle1886 勒贝尔M1886"></a>FusilModèle1886 勒贝尔M1886</h3><p>勒贝尔M1886（法语：FusilModèle1886）或勒贝尔步枪（法语：FusilLebel）是法国于1886年推出的手动枪机式步枪，由尼古拉斯.勒贝尔上校研制。该枪运用了由保罗.维埃那开发的火药B，亦是史上第一种最成功的无烟火药枪械。勒贝尔步枪的出现意味着那些使用黑火药的枪械已过时，各国亦开始改为专注于研制和采购发射无烟火药的枪械。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-37-06-868.png" alt=""></p><p>勒贝尔步枪发射8×50毫米的全全属外壳步枪子弹，载弹量为8发，并以内置弹仓供弹。除此之外，它还可配备一种长针型的重剑式刺刀以应付白刃战。在1887年，勒贝尔步枪被法国军队列装为制式步枪，并参与了多次对外战争，当中更包括第一次世界大战及第二次世界大战。<br>在一战期间，法军曾打算以Mle1917半自动步枪大量取代勒贝尔步枪。然而，士兵们却普遍认为此枪过于笨重和太长，因此并不容易在战壕内操作和保养。基于这些问题，法军一直都未能找到合适的替代品以取代勒贝尔步枪。而在1936年推出的MAS36步枪亦因生产进度太慢并不能满足军队，所以直至法国被纳粹德国占领之前，勒贝尔步枪仍旧为法军的主力步枪。当中有少量的步枪更被纳粹德军缴获使用，并以Gewehr301(f)的名义在军中服役。<br>直至1920年停产前，勒贝尔步枪一共被法国的国营兵工厂生产了约2,880,000支。而在二战过后的一些冲突中仍能找到勒贝尔步枪的身影。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-53-36-183.png" alt=""></p><h3 id="莫辛-纳甘步枪"><a href="#莫辛-纳甘步枪" class="headerlink" title="莫辛-纳甘步枪"></a>莫辛-纳甘步枪</h3><p>莫辛-纳甘步枪（莫辛纳干系列俄文Винтовка Мосина，英文Mosin-Nagant,又称莫辛-纳干），即M1891莫辛-纳甘步枪，在俄国被称为“Vintovka Mosina”（莫辛步枪），是在俄国政府委托下在1880年代后期至1890年代早期研制的步枪。<br>该枪由俄国军队在1891年正式采用，定型为1891型3线口径(7.62x54mmR)步枪。M1891步枪在招标过程中出现了争议，有两个设计能够进入官方评审的最后阶段，一个是俄国陆军上尉谢尔盖·伊凡诺维奇·莫辛（Sergei Ivanovich Mosin）的样枪，另一个是比利时的艾米尔·纳甘和李昂·纳甘两兄弟（Emil Nagant和Leon Nagant）设计的样枪。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-37-18-225.png" alt="莫辛-纳甘步枪"></p><h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><p>莫辛出生于1849年5月5日，12岁时进入一家军事学院并在那里参了军，在1867年他进入莫斯科Alexandrovskoye军事中学（Alexandrovskoye Military High School），在1870年离开军事中学时，他为了能够调去炮兵部门而转入开依洛夫斯科伊炮兵学院（Mikhailovskoye Artillery Academy）。他在1875年毕业后被调到图拉兵工厂。莫辛当上武器设计师后的第一个工作就是对伯丹II步枪的改进，莫辛-纳甘步枪算是他的第二个设计，虽然定型的莫辛-纳甘步枪并没有完全采用他的设计。莫辛是在1883年开始设计连发步枪的设计工作，他在1884年和1885年分别提供了几种内置弹仓供弹的步枪设计给负责招标的委员会，最初的设计是10.6mm口径。但莫辛的努力成果没有受到俄罗斯军队的重视。<br>在1886年法国采用8mm口径M1886勒贝尔步枪后（这是第一种采用无烟火药的小口径枪弹的军用武器），此举在世界各国引起了一场使用无烟发射药小口径枪弹（相对之前的弹药）的轻武器军备变革，在1887年至1889年间，大多数欧洲国家的军队都采用了类似的武器，俄国政府也决定采用一种类似的新型连发步枪，代替现役的伯丹步枪（类似于英国马蒂尼-亨利步枪的黑火药枪弹单发后装枪）。为此俄罗斯政府组织了一个委员会，从现有的毛瑟、勒贝尔、李-梅特福、曼利夏、施密特-鲁宾和克拉格-约根森等设计中进行选择。莫辛也接受委托设计了一种5发单排弹仓的7.62mm口径步枪参与招标。根据古老的俄罗斯度量衡称为3线口径【注：liniya，英文为line，旧俄罗斯度量衡，1线等于0.1英寸或2.54mm，因此，3线等于7.62mm或0.3英寸】。而比利时武器设计师李昂·纳甘则向俄罗斯军队提交了一种3.5线口径（8.89mm）步枪和500发枪弹进行测试。<br>莫辛纳干1891步枪早期型<br>莫辛纳干1891步枪早期型<br>所有参与投标的武器都在1890年至1891年间由俄罗斯军队进行测试，俄罗斯军队偏爱纳甘的设计。原本对纳甘的设计有利，但出于俄罗斯国家尊严的考虑，政府对莫辛的步枪很感兴趣。由于政府和军队的意见分歧，互不相让，最后委员会用了折衷的方法：把这两种设计合并在一种步枪上，结果是把纳甘兄弟设计的供弹系统装在莫辛设计的步枪上，因此这种步枪系统被称为莫辛-纳干步枪。而参与竞争的双方都获得补偿：纳甘兄弟得到酬金（后来纳甘兄弟设计的M1895手枪也被俄罗斯军队采用），而莫辛则晋升成上校并被任命为谢斯特罗列茨克兵工厂的主管，继续改进和生产这种步枪，莫辛上校于1902年2月8日去世，安葬在图拉。在1960年，苏联设立了一个S.I.莫辛特别奖，奖励各个防务企业系统内的专家。<br>莫辛-纳甘步枪被采用时俄国的轻武器企业还没有做好生产准备，所以第一批M1891莫辛-纳甘步枪是法国的夏特罗轻武器厂生产的。莫辛-纳甘步枪是第一次世界大战中俄国军队的主要装备。在第一次世界大战期间，外国的承包商再一次被用来生产这种步枪，当时俄国非常缺乏步枪，所以与两家美国公司签订生产合同，但这批步枪由于1917年的十月革命而没有交给后来的苏维埃政权，在美国用于训练和民间销售。<br>M1891步枪最初有三种型号：步兵步枪、龙骑兵步枪和哥萨克步枪，步兵步枪就是标准型长步枪，后两种是配发给骑兵部队使用的骑枪（卡宾枪）。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-55-36-242.png" alt=""></p><h4 id="结构特点"><a href="#结构特点" class="headerlink" title="结构特点"></a>结构特点</h4><p>莫辛-纳甘是最早的无烟发射药军用步枪之一，枪声清脆, 有如水珠溅落, 因此我们中国人为莫辛-纳甘起了一个颇具诗意的绰号”水连珠”。莫辛-纳甘系列步枪与毛瑟步枪系列、李-恩菲尔德步枪系列等其他同时代同类军用步枪相比，其枪机设计显得较为复杂，它的设计粗糙而且过时，整体的操作感觉也比这些步枪笨拙。但莫辛-纳甘步枪的优点是易于生产和使用简单可靠——这相对于工业基础低、士兵教育程度低的苏/俄军队来说是极其重要的，尤其是恶劣的战争时期包需提高武器产量以满足前线需要，而大量补充的战斗人员往往训练时间不足。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-55-39-549.png" alt=""></p><p>莫辛-纳甘步枪是一种旋转后拉式枪机、弹仓式供弹的手动步枪，是俄罗斯军队采用的第一种无烟发射药步枪。它采用整体式的弹仓，通过机匣顶部的抛壳口单发或用弹夹装填。弹仓位于枪托下的扳机护圈前方，弹仓容弹量5发，有铰链式底盖，可打开底盖以便清空弹仓或清洁维护。由于是单排设计而没有抱弹口，因此弹仓口部有一个隔断面器，上膛时隔开第二发弹，避免出现上双弹的故障。在早期的枪型中，这个装置也兼具抛壳挺的作用，但自M1891/30型开始，以后的枪型都增加了一个独立的抛壳挺。枪膛内有4条右旋转膛线。当枪机闭锁时，回转式枪机前面的两个闭锁凸笋呈水平状态。步枪是击针式击发，击针在打开枪机的过程中进入待发状态。手动保险装置是在枪机尾部凸出的一个“小帽”，向后拉时会锁住击针，而向前推时会解脱保险状态，操作时不太方便而且费力。水平伸出的拉机柄力臂较短，因此操作时需要花较大的力气，而且比起下弯式拉机柄在携行方面时较不方便，而下弯式拉机柄只有狙击型才有。从步枪上分解出枪机时不需要专门工具，只要拉开枪机，然后扣下板机就能取出枪机。在没有工具的条件下还可以进一步分解其他几个主要部件。早期的棱形刺刀的截面为矩形，后改为一字螺丝起子形，并在分解步枪时充当分解工具。早期的刺刀是可拆卸的四棱刺刀通过用管状插座套在枪口上，后期为不可卸的折叠式，而且刺刀座兼作准星座。枪托通常用桦木。</p><p><img src="/2018/08/19/一战中的制式步枪/6159252dd42a28344c98d8095bb5c9ea15cebff2.jpg" alt="img"></p><h4 id="弹药"><a href="#弹药" class="headerlink" title="弹药"></a>弹药</h4><p>与M1891步枪一起还有一种新的小口径枪弹被采用（确实是那个年代里的小口径枪弹），直到今天，7.62×54mmR枪弹在俄国军队服役已经超过了一个世纪。该枪弹采用突底缘锥形弹壳，突底缘弹壳的设计在19世纪末也已经开始显得开始过时了，但却适合基础较低的俄罗斯轻武器工业，因为突底缘弹壳对弹膛尺寸的要求相对宽松一点，这样在机器加工时允许有较大的生产公差，既节省了工时又节约了钱。M1891式枪弹的弹头是重210格令、铜镍合金被甲、铅芯的钝圆头形弹头，在德国采用了尖头弹后，俄罗斯也开始研制尖头弹，经过广泛测试后，在1908年采用了一种重148格令、铜镍被甲的铅芯尖头弹（战争时期采用覆铜钢被甲）。在二战结束后，苏联的制式步枪先后采用了中间威力型枪弹和5.45mm小口径步枪弹，但直到现在M1908式枪弹系列仍然被用作机枪和狙击步枪的弹药。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-55-41-642.png" alt=""></p><h3 id="三八式歩兵铳"><a href="#三八式歩兵铳" class="headerlink" title="三八式歩兵铳"></a>三八式歩兵铳</h3><p>八式步枪（日语：三八式歩兵铳；さんぱちしきほへいじゅう，英文：Sanpachi-shiki hohei-ju）为手动步枪，日本陆军于日俄战争后1907年正式采用为制式武器，三八式步枪是第二次世界大战中日本法西斯陆、海军最主要、最基本的武器，一直使用到二战结束（日本战败），用了整整40年。<br>三八式步枪在中国一向俗称为三八大盖，由于其枪机上有一个随枪机连动的防尘盖以及机匣上刻有“三八式”字样而得名。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-37-35-897.png" alt=""></p><h4 id="历史-1"><a href="#历史-1" class="headerlink" title="历史"></a>历史</h4><p>三八式步枪的原型是三十年式步枪和三五式海军步枪。三十年式步枪仿造自德国毛瑟步枪，设计师是有坂成章大佐，以取代从甲午战争以来，以法国M1874步枪仿造但是不可靠也打不准的村田枪。 这两种步枪也因其发明者有坂成章而得名有坂步枪。<br>有坂在设计三十年式步枪时起初设定了三种口径作为研发方向：6毫米、6.5毫米以及7毫米。三十年式步枪（三十年式歩兵铳）于1897年进行制式化生产，并于1903年完成日本全军更换整装。日本陆军换发三十年式步枪后，日本海军陆战队也跟着换枪，有坂成章将设计案转将给部属南部麒次郎上尉负责进行改进。南部麒次郎只进行了小改良，将表尺改为直立式，并且加上枪机盖，并命名为三五式海军步枪（三十五年式海军铳）。<br>1904年至1905年日军在中国东北战场上使用的三十年式步枪表露出有一种细小的沙尘进入操作机关内，导致操作不良，三十年式步枪另外有根很容易折断的撞针。上述的情形在日俄战争后有人提出讨论与进行改善，这时候已经升任小石川炮兵工厂研究所所长的南部麒次郎因此将枪机重新进行简化，同时在枪机表面增加了一个随枪机连动的防尘盖。然而增加防尘盖的立意虽然良好，不过却又为操作时增加了独特的金属噪音。其他改进包括在准星两侧增加护翼，三八式步枪机械瞄准具早期采用V型缺口照门，后期采用觇孔式照门。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-56-23-046.png" alt=""></p><p>南部很快地完成三十式步枪的改良后，于明治四十年（1907年）5月开始制式化在东京小石川炮兵工厂进行生产。虽然正式的制式化量产从1907年开始，不过南部麒次郎将新改良开发的步枪仍然以明治天皇年号第三十八年（1905年）命名；明治41年3月开始，新式的三八式歩枪逐渐成为部队的标准配备；到了明治43年（1910年），部队中的三十年式步枪就全面被三八式步枪取代了。</p><h4 id="结构特点-1"><a href="#结构特点-1" class="headerlink" title="结构特点"></a>结构特点</h4><p>三八式步枪重3.73千克，加上30年式刺刀为4.1千克。枪身全长127.6厘米，再加上30式单刃刺刀后就可达166.3厘米，该枪一大特征就是它的长度。<br>三八式步枪的机匣制作公差小，表面经过防腐处理，枪机在机匣内运行顺畅，机匣上面有两个排气小孔，保证射击时的安全，枪机上方是截面为随着枪机前后滑动的“n”型的防尘盖，防尘盖上有开口供直式拉机柄伸出，枪机尾部有圆帽型的转动保险装置。<br>枪机组件的设计其部件数量比毛瑟枪还少3个零件，仅有5个零件，是当年旋转后拉式枪机步枪中结构简单的，提高可靠性和减低维护保障难度，不过零件外形复杂增加了加工难度。<br>三八式步枪的弹仓镶嵌在枪身内，容量5发子弹，三八式步枪的弹仓还有空仓提示功能，当弹仓内最后一发枪弹射出后，枪机后拉到位时托弹板就会顶住枪机头无法向前运动提醒射手装弹。<br>三八式步枪的枪托加工方式与的一般式步枪枪托加工方式不同，一般式步枪的枪托是用一整块木料切削而成，三八式步枪的枪托是用两块木料拼接而成的，此种方式虽然日久容易开裂但可节省木材。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-56-16-228.png" alt=""></p><table><thead><tr><th>三八式步枪参考数据</th><th></th></tr></thead><tbody><tr><td>类别</td><td>旋转后拉式枪机，弹仓供弹</td></tr><tr><td>口径</td><td>6.5毫米</td></tr><tr><td>全枪长</td><td>1275毫米</td></tr><tr><td>枪管长度</td><td>797毫米</td></tr><tr><td>加装刺刀总长</td><td>接近1700毫米</td></tr><tr><td>全枪重</td><td>4.1千克</td></tr><tr><td>弹匣容弹量</td><td>5发</td></tr><tr><td>射程</td><td>460米</td></tr><tr><td>弹药</td><td>6.5×50mm 步枪弹</td></tr><tr><td>初速</td><td>765米/秒</td></tr></tbody></table><h3 id="卡爾卡諾M91-38"><a href="#卡爾卡諾M91-38" class="headerlink" title="卡爾卡諾M91/38"></a>卡爾卡諾M91/38</h3><p>卡尔卡诺是过去意大利常用的手动枪机操作式一系列军用步枪和卡宾枪，最初于1891年推出时，发射的是6.5×52毫米曼利彻-卡尔卡诺口径无缘式步枪子弹（Cartuccia Modello 1895）。这枝步枪是由首席技师萨尔瓦多·卡尔卡诺在都灵军兵工厂于1890年研发，并且称为M91。它先后取代了以往的10.35×47毫米RVetterli-维塔利步枪和卡宾枪以，在1892年到1945年之间生产。在第一次世界大战期间的大多数意大利部队和第二次世界大战中的意大利以及德国军队之中一些部队里，采用了M91的步枪（fucile, sing.；fucili, pl.）和卡宾枪（moschetto, sing.；moschetti, pl.）各两种的型号。在过程中，步枪也被芬兰于冬季战争中使用，以后又在叙利亚、利比亚、突尼斯和阿尔及利亚这些国家战后的各种冲突中被正规和非正规部队使用。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-37-47-677.png" alt="卡爾卡諾M91/38"></p><p>虽然这种步枪经常被称为“曼利彻-卡尔卡诺”（特别是在美国的说法），但不论是该命名还是“毛瑟-帕拉维西尼”（Mauser-Parravicino）也不是正确的。该枪在意大利的正式名称是Modello 1891，或是M91（“il novantuno”）。该枪的弹匣系统使用整体漏夹式弹夹条来装填，虽然最初是由费迪南德·曼利彻研发并获得了专利，但事实上卡尔卡诺步枪的弹夹条的实际形状和设计是由德国1888式委员会步枪所得出的。</p><p>直到1938年，所有的M91步枪和卡宾枪都改为发射的是6.5×52毫米曼利彻-卡尔卡诺口径无缘式Modello 1895步枪子弹，采用重量为160格令的圆头金属弹壳子弹，视乎枪管长度而令枪口初速在609.6—755 米／秒（2,000—2,477.03 英尺／秒）之间。由于采用渐进膛线（膛线越接近枪口缠距越短，效果是弹头转速越来越快），该枪精度良好。不过，至少有一个轻武器的权威指出，一些批号的6.5×52 毫米军用弹药装载的是并非一致的火药类型，经常将不同的火药类型和弹药批号混合并且制作成为单一的弹药（可能是出于战时成本控制的原因，亦可能是生产混乱所导致）。[1]在经过修改的步枪弹药上混用火药类型和弹药批号的做法为普遍其他国家的兵工厂所极力避免的事，因为这种粗劣手法通常会导致子弹初速不同和子弹与目标过度分散。</p><p>战争海报中的妇女手中的就是一把卡尔卡诺m1938折叠刺刀型：</p><p><img src="/2018/08/19/一战中的制式步枪/257e852f07082838f137e094be99a9014c08f17d.jpg" alt="战争海报中的妇女手中的就是一把卡尔卡诺m1938折叠刺刀型"></p><h3 id="罗斯Mk-3"><a href="#罗斯Mk-3" class="headerlink" title="罗斯Mk-3"></a>罗斯Mk-3</h3><p>罗斯Mk-3是加拿大远征军的武器，第一支罗斯步枪出现于1896年，它在风和日丽的加拿大表现很好，以精度而闻名，它的设计者罗斯爵士是一个神射手，它对自己的枪要求很高，要有优秀的精度和快速的射速，而且严格控制公差，于是这把枪采用了直拉柄设计，与传统的手拉旋转式步枪步枪，这把枪仅仅需要一前一后就可以完成抛壳，退弹，闭锁的步骤，射速较当时的步枪更快</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-38-00-214.png" alt="罗斯Mk-3"></p><h3 id="M1917-Enfield"><a href="#M1917-Enfield" class="headerlink" title="M1917 Enfield"></a>M1917 Enfield</h3><p>恩菲尔德M1917（M1917 Enfield，又名P17、P1917或Pattern 1917）是“美国恩菲尔德”（American Enfield）于1917至1918年间生产的.30-06口径手动步枪，装备一战时期的美国军队，美国当时命名为United States Rifle, cal .30, Model of 1917。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-20-38-09-586.png" alt="M1917 Enfield"></p><h4 id="历史-2"><a href="#历史-2" class="headerlink" title="历史"></a>历史</h4><p>当英国加入一战时，其盟友美国急需本土生产的步枪作军备，当时的温彻斯特及雷明登获选并生产M1914步枪（P14）。其后，美国参战后需要更多步枪，美国军械署提出采用.30-06口俓弹药的新型步枪M1917（P17），并由位于康乃狄克州纽黑文的温彻斯特工厂及位于康乃迪克州Eddystone和纽约Ilion的雷明登工厂生产，而专用的M1917刺刀由其他多间小厂生产。 </p><p>M1917及M1903春田步枪作为一战时美军的主要制式步枪服役。在1918年11月11日，约75%的美国远征军（American Expeditionary Force）都装备了M1917。停战后，美军把M1917作储备储起。<br>在二战开始初期，美国把储备起来的M1917重新改造，并作训练用途及通过租借法案向多个国家作出援助（包括英国、菲律宾、法国及中国），这批M1917步枪作喷沙及烘磷酸盐处理，部份更改用桦木制的护木，其中送交英国的国土防卫军（British Home Guard）的M1917印有红色记号以避免士兵装上P14的弹药。</p><p><img src="/2018/08/19/一战中的制式步枪/bf1-19-21-05-48-076.png" alt="M1917 Enfield"></p><h4 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h4><p>M1917与李-恩菲尔德同由位于英国恩菲尔德的英国皇家轻兵器工厂生产，但李-恩菲尔德（如SMLE）采用.303 British口俓弹药，而M1917采用毛瑟98枪机及美国的.30-06弹药，由于.30-06弹药的直径较细，因此内置弹仓可放6发子弹，但弹夹仍然只有5发。<br>由于两战之间储备过剩，有些枪匠以M1917的枪机装上雷明登M30系列上作运动步枪发售，约3000把7毫米口径的M1917在1930年卖给洪都拉斯。</p><h3 id="1-59-inch-Breech-Loading-Vickers-Q-F-Gun-Mk-II"><a href="#1-59-inch-Breech-Loading-Vickers-Q-F-Gun-Mk-II" class="headerlink" title="1.59-inch Breech-Loading Vickers Q.F. Gun, Mk II"></a>1.59-inch Breech-Loading Vickers Q.F. Gun, Mk II</h3><p>1.59-inch Breech-Loading Vickers Q.F. Gun, Mk II是英国设计在第一次世界大战的轻火炮（超重型狙击枪）。最初的目的是用于堑壕战，而是对飞机的空对空和空对地使用进行了测试。虽然它发射炮弹并且无法发射火箭弹，但它被广泛但误导地称为“ 维克斯 - 克雷福德火箭炮 ”。</p><p>（游戏中未出现，无图）</p><h3 id="Mauser-1918-T-Gewehr"><a href="#Mauser-1918-T-Gewehr" class="headerlink" title="Mauser 1918 T-Gewehr"></a>Mauser 1918 T-Gewehr</h3><p>毛瑟13毫米反坦克步枪（德语：Tankgewehr M1918，通常简写T-Gewehr M1918）是世界上第一个反坦克步枪，它设计用于破坏装甲目标。生产了大约15,800个。</p><p>M1918和真人比你就会发现它非常非常大！</p><p><img src="/2018/08/19/一战中的制式步枪/f64bd0d3572c11dfea79a28d6b2762d0f603c202.jpg" alt="M1918和真人比你就会发现它非常非常大"></p><p>这把来自黑科技合集体第二帝国的T-Gewehr M1918 反坦克步枪当时让英军坦克部队躲在角落瑟瑟发抖，在条件允许的情况下甚至可以轻松穿透100m外的MK-IV坦克的防护装甲，同时这把武器只是比普通的毛瑟步枪稍微大一点，所以一个人也可以拿着到处走，只是比其他人会缓慢一些。 </p><p><img src="/2018/08/19/一战中的制式步枪/6641752c11dfa9ecce864bb96ad0f703908fc102.jpg" alt="T-Gewehr M1918"></p><h4 id="历史-3"><a href="#历史-3" class="headerlink" title="历史"></a>历史</h4><p>在第一次世界大战期间，静态堑壕战的开始出现了使用装甲板进行人身防御的兴起，以及开发和使用穿甲弹药来对抗这种情况。为此，英国和德国都使用高能步枪，例如来自非洲殖民地的大象枪。英国人在1916年9月的Flers-Courcelette战役中首次使用装甲战车（坦克），随后是法国人。到1917年6月，德国陆军面对马克四世坦克，发现标准穿甲7.92毫米K子弹不再有效。这促使德国人开发出一种大口径和高速步枪作为反坦克武器。该毛瑟公司回应与13毫米T-格韦尔并开始批量生产的内卡河畔奥伯恩多夫于1918年五月关闭进行颁发的生产线专门提出反坦克分队的第一项。</p><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>该步枪是一种单发螺栓动作步枪，使用改进的毛瑟动作，手动将圆形物装入腔室。武器有一个手枪式握把和两脚架，但没有减少后坐力的方法，例如柔软的臀部或枪口制动器。这可能会导致重复射击射手的问题。在铁的景点是由前片和后切线的，在100米的增量从100米到500米毕业。这支步枪由两名持枪手和弹药的机组人员操作持票人，他们都受过训练，可以开火。由于反冲的巨大钝力，它被设计成在静止位置拍摄，无论是俯卧还是从沟内。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.forgottenweapons.com/rifles/winchester-1895-russian/" target="_blank" rel="noopener">Winchester 1895 (Russian)</a></p><p><a href="http://battlefield.wikia.com/wiki/Gewehr_M._95" target="_blank" rel="noopener">Gewehr M.95</a></p><p><a href="https://tieba.baidu.com/p/4111204618?red_tag=2660865922" target="_blank" rel="noopener">卡尔卡诺</a></p><p><a href="https://en.wikipedia.org/wiki/1.59-inch_Breech-Loading_Vickers_Q.F._Gun,_Mk_II" target="_blank" rel="noopener">1.59-inch Breech-Loading Vickers Q.F. Gun, Mk II</a></p><p><a href="https://en.wikipedia.org/wiki/Mauser_1918_T-Gewehr" target="_blank" rel="noopener">Mauser 1918 T-Gewehr</a></p><p>结束 <br>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我们不聊技术了，聊一聊枪支。我本人是个狂热的军事迷，而恰好最近找到一款游戏，是一战题材的，叫‘战地1’，原汁原味的一战武器的加入，让这个本来就很强势的第一人称射击游戏增添了独特魅力。废话不多说，今天我以这个游戏中的一战视角，来介绍以下一战中的制式武器。&lt;/p&gt;
&lt;p&gt;想
      
    
    </summary>
    
    
      <category term="军事" scheme="https://tengshe789.github.io/tags/%E5%86%9B%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>python-常用模块</title>
    <link href="https://tengshe789.github.io/2018/08/19/python-%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    <id>https://tengshe789.github.io/2018/08/19/python-常用模块/</id>
    <published>2018-08-19T08:12:18.000Z</published>
    <updated>2019-11-20T13:39:40.737Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习python全栈相关的内容，部分知识点着实需要记忆，索性写个blog记录一下。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h3 id="什么是模块"><a href="#什么是模块" class="headerlink" title="什么是模块"></a>什么是模块</h3><p>一个模块就是一个包含了python定义和声明的文件，文件名就是模块名字加上<code>.py</code>的后缀。 </p><h2 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h2><h3 id="collections模块"><a href="#collections模块" class="headerlink" title="collections模块"></a>collections模块</h3><p>在内置数据类型（dict、list、set、tuple）的基础上，collections模块还提供了几个额外的数据类型：Counter、deque、defaultdict、namedtuple和OrderedDict等。</p><h4 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h4><p>生成可以使用名字来访问元素内容的tuple</p><p>使用这个可以很方便的表示一个点的二维坐标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Point = namedtuple(<span class="string">'Point'</span>,[<span class="string">'x'</span>,<span class="string">'y'</span>]) <span class="comment">#namedtuple('名称', [属性list])</span></span><br><span class="line">p = Point(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(p.x)</span><br><span class="line">print(p.y)</span><br></pre></td></tr></table></figure><h4 id="deque"><a href="#deque" class="headerlink" title="deque:"></a>deque:</h4><p>deque是为了高效实现插入和删除操作的双向列表，适合用于队列和栈</p><p>它可以实现添加操作<code>append()</code> 和删除操作<code>pop()</code>，往头部添加操作<code>appendleft()</code>往头部删除<code>popleft()</code></p><h4 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h4><p>Counter类的目的是用来跟踪值出现的次数。</p><p>它是一个无序的容器类型，<strong>以字典的键值对形式存储</strong>，其中元素作为key，其计数作为value。计数值可以是任意的Interger（包括0和负数）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">c = Counter(&#123;<span class="number">1</span>:<span class="string">'p'</span>,<span class="number">2</span>:<span class="string">'y'</span>&#125;)</span><br><span class="line"><span class="comment"># 访问 当所访问的键不存在时，返回0，而不是KeyError；否则返回它的计数。</span></span><br><span class="line">c[<span class="number">1</span>] <span class="comment"># p</span></span><br></pre></td></tr></table></figure><h4 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h4><p>有序字典</p><h4 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h4><p>带有默认值的字典</p><p>有如下值集合 [11,22,33,44,55,66,77,88,99,90…]，将所有大于 66 的值保存至字典的第一个key中，将小于 66 的值保存至第二个key的值中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">values = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">90</span>]</span><br><span class="line">defaultdict = defaultdict(list)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> values:</span><br><span class="line">    <span class="keyword">if</span> value &gt; <span class="number">66</span>:</span><br><span class="line">        defaultdict[<span class="string">'k1'</span>].append(value)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        defaultdict[<span class="string">'k2'</span>].append(value)</span><br></pre></td></tr></table></figure><h3 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h3><p>在Python中，通常有这三种方式来表示时间：时间戳、元组(struct_time)、格式化的时间字符串：</p><p>(1)时间戳(timestamp) ：通常来说，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量。我们运行“type(time.time())”，返回的是float类型。</p><p>(2)格式化的时间字符串(Format String)： ‘1999-12-06’</p><p>python中时间日期格式化符号：</p><p>%y 两位数的年份表示（00-99）<br>%Y 四位数的年份表示（000-9999）<br>%m 月份（01-12）<br>%d 月内中的一天（0-31）<br>%H 24小时制小时数（0-23）<br>%I 12小时制小时数（01-12）<br>%M 分钟数（00=59）<br>%S 秒（00-59）<br>%a 本地简化星期名称<br>%A 本地完整星期名称<br>%b 本地简化的月份名称<br>%B 本地完整的月份名称<br>%c 本地相应的日期表示和时间表示<br>%j 年内的一天（001-366）<br>%p 本地A.M.或P.M.的等价符<br>%U 一年中的星期数（00-53）星期天为星期的开始<br>%w 星期（0-6），星期天为星期的开始<br>%W 一年中的星期数（00-53）星期一为星期的开始<br>%x 本地相应的日期表示<br>%X 本地相应的时间表示<br>%Z 当前时区的名称<br>%% %号本身</p><p>(3)元组(struct_time) ：struct_time元组共有9个元素共九个元素:(年，月，日，时，分，秒，一年中第几周，一年中第几天等）</p><table><thead><tr><th>索引（Index）</th><th>属性（Attribute）</th><th>值（Values）</th></tr></thead><tbody><tr><td>0</td><td>tm_year（年）</td><td>比如2011</td></tr><tr><td>1</td><td>tm_mon（月）</td><td>1 - 12</td></tr><tr><td>2</td><td>tm_mday（日）</td><td>1 - 31</td></tr><tr><td>3</td><td>tm_hour（时）</td><td>0 - 23</td></tr><tr><td>4</td><td>tm_min（分）</td><td>0 - 59</td></tr><tr><td>5</td><td>tm_sec（秒）</td><td>0 - 60</td></tr><tr><td>6</td><td>tm_wday（weekday）</td><td>0 - 6（0表示周一）</td></tr><tr><td>7</td><td>tm_yday（一年中的第几天）</td><td>1 - 366</td></tr><tr><td>8</td><td>tm_isdst（是否是夏令时）</td><td>默认为0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入时间模块</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># (线程)推迟指定的时间运行。单位为秒。</span></span><br><span class="line">secs = <span class="number">0.1</span></span><br><span class="line">time.sleep(secs)</span><br><span class="line"><span class="comment"># 时间戳</span></span><br><span class="line">time.time()</span><br><span class="line"><span class="comment"># 时间字符串</span></span><br><span class="line">time.strftime(<span class="string">"%Y-%m-%d %X"</span>)</span><br><span class="line">&gt;&gt;&gt;time.strftime(<span class="string">"%Y-%m-%d %H-%M-%S"</span>)</span><br><span class="line"><span class="comment"># 时间元组:localtime将一个时间戳转换为当前时区的struct_time</span></span><br><span class="line">time.localtime()</span><br><span class="line">time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">8</span>, tm_mday=<span class="number">19</span>,tm_hour=<span class="number">13</span>, tm_min=<span class="number">59</span>, tm_sec=<span class="number">37</span>,tm_wday=<span class="number">0</span>, tm_yday=<span class="number">205</span>, tm_isdst=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h3><p>常用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#随机小数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.random()      <span class="comment"># 大于0且小于1之间的小数</span></span><br><span class="line"><span class="number">0.7664338663654585</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.uniform(<span class="number">1</span>,<span class="number">3</span>) <span class="comment">#大于1小于3的小数</span></span><br><span class="line"><span class="number">1.6270147180533838</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#随机整数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">5</span>)  <span class="comment"># 大于等于1且小于等于5之间的整数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>) <span class="comment"># 大于等于1且小于10之间的奇数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#随机选择一个返回</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice([<span class="number">1</span>,<span class="string">'23'</span>,[<span class="number">4</span>,<span class="number">5</span>]])  <span class="comment"># #1或者23或者[4,5]</span></span><br><span class="line"><span class="comment">#随机选择多个返回，返回的个数为函数的第二个参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.sample([<span class="number">1</span>,<span class="string">'23'</span>,[<span class="number">4</span>,<span class="number">5</span>]],<span class="number">2</span>) <span class="comment"># #列表元素任意2个组合</span></span><br><span class="line">[[<span class="number">4</span>, <span class="number">5</span>], <span class="string">'23'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#打乱列表顺序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>item=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(item) <span class="comment"># 打乱次序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>item</span><br><span class="line">[<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(item)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>item</span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>一个简单的生成验证码功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 随机生成6位验证码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Identifying_code</span><span class="params">()</span>:</span></span><br><span class="line">    code = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        num=random.randint(<span class="number">0</span>,<span class="number">9</span>) <span class="comment"># 大于等于0且小于等于9之间的整数</span></span><br><span class="line">        alf=chr(random.randint(<span class="number">65</span>,<span class="number">90</span>)) <span class="comment"># 随机大写字母，数字对应阿斯克码</span></span><br><span class="line">        add=random.choice([num,alf]) <span class="comment">#随机选择一个返回</span></span><br><span class="line">        code=<span class="string">""</span>.join([code,str(add)])</span><br><span class="line">    <span class="keyword">return</span> code</span><br></pre></td></tr></table></figure><h3 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h3><h4 id="常用和不常用的方法"><a href="#常用和不常用的方法" class="headerlink" title="常用和不常用的方法"></a>常用和不常用的方法</h4><p><code>os.getcwd()</code>获取当前工作目录，即当前python脚本工作的目录路径<br><code>os.chdir(&quot;dirname&quot;)</code>  改变当前脚本工作目录；相当于shell下cd<br><code>os.curdir</code>返回当前目录: (‘.’)<br><code>os.pardir</code> 获取当前目录的父目录字符串名：(‘..’)<br><code>os.makedirs(&#39;dirname1/dirname2&#39;)</code>可生成多层递归目录<br><code>os.removedirs(&#39;dirname1&#39;)</code> 若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推<br><code>os.mkdir(&#39;dirname&#39;)</code>   生成单级目录；相当于shell中mkdir dirname<br><code>os.rmdir(&#39;dirname&#39;)</code>  删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname<br><code>os.listdir(&#39;dirname&#39;)</code>   列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印<br><code>os.remove()</code> 删除一个文件<br><code>os.rename(&quot;oldname&quot;,&quot;newname&quot;)</code>重命名文件/目录<br><code>os.stat(&#39;path/filename&#39;)</code> 获取文件/目录信息<br><code>os.sep</code>    输出操作系统特定的路径分隔符，win下为”\“,Linux下为”/“<br><code>os.linesep</code>  输出当前平台使用的行终止符，win下为”\t\n”,Linux下为”\n”<br><code>os.pathsep</code>    输出用于分割文件路径的字符串 win下为;,Linux下为:<br><code>os.name</code>   输出字符串指示当前使用平台。win-&gt;’nt’; Linux-&gt;’posix’<br><code>os.system(&quot;bash command&quot;)</code>  运行shell命令，直接显示<br><code>os.popen(&quot;bash command).read()</code>  运行shell命令，获取执行结果<br><code>os.environ</code> 获取系统环境变量</p><p><strong>os.path</strong><br><code>os.path.abspath(path)</code> 返回path规范化的绝对路径 os.path.split(path) 将path分割成目录和文件名二元组返回 <code>os.path.dirname(path)</code>返回path的目录。其实就是os.path.split(path)的第一个元素 </p><p><code>os.path.basename(path)</code> 返回path最后的文件名。如何path以/或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素<br><code>os.path.exists(path)</code> 如果path存在，返回True；如果path不存在，返回False<br><code>os.path.isabs(path)</code> 如果path是绝对路径，返回True<br><code>os.path.isfile(path)</code>  如果path是一个存在的文件，返回True。否则返回False<br><code>os.path.isdir(path)</code> 如果path是一个存在的目录，则返回True。否则返回False<br><code>os.path.join(path1[, path2[, ...]])</code> 将多个路径组合后返回，第一个绝对路径之前的参数将被忽略<br><code>os.path.getatime(path)</code>  返回path所指向的文件或者目录的最后访问时间<br><code>os.path.getmtime(path)</code>  返回path所指向的文件或者目录的最后修改时间<br><code>os.path.getsize(path)</code> 返回path的大小</p><h3 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h3><p>sys模块是与python解释器交互的一个接口</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p> <code>sys.argv</code>           命令行参数List，第一个元素是程序本身路径<br> <code>sys.exit(n)</code>        退出程序，正常退出时exit(0),错误退出sys.exit(1)<br> <code>sys.version</code>        获取Python解释程序的版本信息<br> <code>sys.path</code>           返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值<br> <code>sys.platform</code>       返回操作系统平台名称</p><h3 id="序列化模块"><a href="#序列化模块" class="headerlink" title="序列化模块"></a>序列化模块</h3><p>用于序列化的两个模块</p><ul><li>json，用于字符串 和 python数据类型间进行转换</li><li>pickle，用于python特有的类型 和 python的数据类型间进行转换</li></ul><h4 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h4><p>loads和dumps</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">dic = &#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>,<span class="string">'k3'</span>:<span class="string">'v3'</span>&#125;</span><br><span class="line">str_dic = json.dumps(dic)  <span class="comment">#序列化：将一个字典转换成一个字符串</span></span><br><span class="line">print(type(str_dic),str_dic)  <span class="comment">#&lt;class 'str'&gt; &#123;"k3": "v3", "k1": "v1", "k2": "v2"&#125;</span></span><br><span class="line"><span class="comment">#注意，json转换完的字符串类型的字典中的字符串是由""表示的</span></span><br><span class="line"></span><br><span class="line">dic2 = json.loads(str_dic)  <span class="comment">#反序列化：将一个字符串格式的字典转换成一个字典</span></span><br><span class="line"><span class="comment">#注意，要用json的loads功能处理的字符串类型的字典中的字符串必须由""表示</span></span><br><span class="line">print(type(dic2),dic2)  <span class="comment">#&lt;class 'dict'&gt; &#123;'k1': 'v1', 'k2': 'v2', 'k3': 'v3'&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list_dic = [<span class="number">1</span>,[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],<span class="number">3</span>,&#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>&#125;]</span><br><span class="line">str_dic = json.dumps(list_dic) <span class="comment">#也可以处理嵌套的数据类型 </span></span><br><span class="line">print(type(str_dic),str_dic) <span class="comment">#&lt;class 'str'&gt; [1, ["a", "b", "c"], 3, &#123;"k1": "v1", "k2": "v2"&#125;]</span></span><br><span class="line">list_dic2 = json.loads(str_dic)</span><br><span class="line">print(type(list_dic2),list_dic2) <span class="comment">#&lt;class 'list'&gt; [1, ['a', 'b', 'c'], 3, &#123;'k1': 'v1', 'k2': 'v2'&#125;]</span></span><br></pre></td></tr></table></figure><p>load和dump</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">f = open(<span class="string">'json_file'</span>,<span class="string">'w'</span>)</span><br><span class="line">dic = &#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>,<span class="string">'k3'</span>:<span class="string">'v3'</span>&#125;</span><br><span class="line">json.dump(dic,f)  <span class="comment">#dump方法接收一个文件句柄，直接将字典转换成json字符串写入文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'json_file'</span>)</span><br><span class="line">dic2 = json.load(f)  <span class="comment">#load方法接收一个文件句柄，直接将文件中的json字符串转换成数据结构返回</span></span><br><span class="line">f.close()</span><br><span class="line">print(type(dic2),dic2)</span><br></pre></td></tr></table></figure><h4 id="shelve"><a href="#shelve" class="headerlink" title="shelve"></a>shelve</h4><p>shelve也是python提供给我们的序列化工具，比pickle用起来更简单一些。 shelve只提供给我们一个open方法，是用key来访问的，使用起来和字典类似。</p><h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.findall(<span class="string">'s'</span>, <span class="string">'sadsadsa ssadsadsa sdadsadasd'</span>)  <span class="comment"># 返回所有满足匹配条件的结果,放在列表里</span></span><br><span class="line">print(ret) <span class="comment">#结果 : ['s', 's', 's', 's', 's', 's', 's', 's', 's', 's']</span></span><br><span class="line"></span><br><span class="line">ret = re.search(<span class="string">'s'</span>, <span class="string">'sadsadsa ssadsadsa sdadsadasd'</span>).group()</span><br><span class="line">print(ret) <span class="comment"># 结果 : s</span></span><br><span class="line"><span class="comment"># 函数会在字符串内查找模式匹配,只到找到第一个匹配然后返回一个包含匹配信息的对象,该对象可以</span></span><br><span class="line"><span class="comment"># 通过调用group()方法得到匹配的字符串,如果字符串没有匹配，则返回None。</span></span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">'a'</span>, <span class="string">'abc'</span>).group()  <span class="comment"># 同search,不过尽在字符串开始处进行匹配</span></span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment">#结果 : 'a'</span></span><br><span class="line"></span><br><span class="line">ret = re.split(<span class="string">'[ab]'</span>, <span class="string">'abcd'</span>)  <span class="comment"># 先按'a'分割得到''和'bcd',在对''和'bcd'分别按'b'分割</span></span><br><span class="line">print(ret)  <span class="comment"># ['', '', 'cd']</span></span><br><span class="line"></span><br><span class="line">ret = re.sub(<span class="string">'\d'</span>, <span class="string">'H'</span>, <span class="string">'teng she 789'</span>, <span class="number">1</span>)<span class="comment">#将数字替换成'H'，参数1表示只替换1个</span></span><br><span class="line">print(ret) <span class="comment"># teng she H89</span></span><br><span class="line"></span><br><span class="line">ret = re.subn(<span class="string">'\d'</span>, <span class="string">'H'</span>, <span class="string">'teng she 789'</span>)<span class="comment">#将数字替换成'H'，返回元组(替换的结果,替换了多少次)</span></span><br><span class="line">print(ret) <span class="comment">#('teng she HHH', 3)</span></span><br><span class="line"></span><br><span class="line">obj = re.compile(<span class="string">'\d&#123;3&#125;'</span>)  <span class="comment">#将正则表达式编译成为一个 正则表达式对象，规则要匹配的是3个数字</span></span><br><span class="line">ret = obj.search(<span class="string">'abc123eeee'</span>) <span class="comment">#正则表达式对象调用search，参数为待匹配的字符串</span></span><br><span class="line">print(ret.group())  <span class="comment">#结果 ： 123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.finditer(<span class="string">'\d'</span>, <span class="string">'ds3sy4784a'</span>)   <span class="comment">#finditer返回一个存放匹配结果的迭代器</span></span><br><span class="line">print(ret)  <span class="comment"># &lt;callable_iterator object at 0x000001B84AADC7F0&gt;</span></span><br><span class="line">print(next(ret).group())  <span class="comment">#查看第一个结果 3</span></span><br><span class="line">print(next(ret).group())  <span class="comment">#查看第二个结果 4</span></span><br><span class="line">print([i.group() <span class="keyword">for</span> i <span class="keyword">in</span> ret])  <span class="comment">#查看剩余的左右结果 ['7', '8', '4']</span></span><br></pre></td></tr></table></figure><h3 id="hashlib模块"><a href="#hashlib模块" class="headerlink" title="hashlib模块"></a>hashlib模块</h3><p>Python的hashlib提供了常见的hash算法</p><p>我们以常见的摘要算法MD5为例，计算出一个字符串的MD5值： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">'how to use md5 in python hashlib?'</span>.encode(<span class="string">"gb2312"</span>))</span><br><span class="line">print(md5.hexdigest())</span><br></pre></td></tr></table></figure><p>计算结果如下：<br>d26a53750bc40b38b65a520292f69306</p><h3 id="configparser模块"><a href="#configparser模块" class="headerlink" title="configparser模块"></a>configparser模块</h3><p>该模块适用于配置文件的格式与windows ini文件类似，可以包含一个或多个节（section），每个节可以有多个参数（键=值）。</p><h3 id="logging模块"><a href="#logging模块" class="headerlink" title="logging模块"></a>logging模块</h3><p>默认情况下Python的logging模块将日志打印到了标准输出中，且只显示了大于等于WARNING级别的日志，这说明默认的日志级别设置为WARNING（日志级别等级CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG），默认的日志格式为日志级别：Logger名称：用户输出消息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging  </span><br><span class="line">logging.debug(<span class="string">'debug message'</span>)  </span><br><span class="line">logging.info(<span class="string">'info message'</span>)  </span><br><span class="line">logging.warning(<span class="string">'warning message'</span>)  </span><br><span class="line">logging.error(<span class="string">'error message'</span>)  </span><br><span class="line">logging.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学习python全栈相关的内容，部分知识点着实需要记忆，索性写个blog记录一下。&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.tengshe789.tech/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://tengshe789.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>应用软件装在C盘里会让系统变慢么？</title>
    <link href="https://tengshe789.github.io/2018/08/16/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6%E8%A3%85%E5%9C%A8C%E7%9B%98%E9%87%8C%E4%BC%9A%E8%AE%A9%E7%B3%BB%E7%BB%9F%E5%8F%98%E6%85%A2%E4%B9%88%EF%BC%9F/"/>
    <id>https://tengshe789.github.io/2018/08/16/应用软件装在C盘里会让系统变慢么？/</id>
    <published>2018-08-16T11:31:27.000Z</published>
    <updated>2019-11-20T13:39:41.268Z</updated>
    
    <content type="html"><![CDATA[<p>8012年了，🌏还在转，但是好多顽固的人🧠不转了，所以今天就有了“应用软件装在C盘里会让系统变慢么”这个话题。</p><h3 id="为啥人们有把软件装在C盘之外的习惯？"><a href="#为啥人们有把软件装在C盘之外的习惯？" class="headerlink" title="为啥人们有把软件装在C盘之外的习惯？"></a>为啥人们有把软件装在C盘之外的习惯？</h3><p>这真的是一个远古时代遗留下来的习惯。</p><p>过去的电脑的硬件配置可不如现在的这么好，当时的硬盘可能只有10G，内存则可能只有128M，把10G的硬盘划为C盘，装进去一个系统，剩下的空间就不太多了，所以就有了把软件放在别的磁盘里面的习惯</p><p>再加上过去的电脑性能比较差，技术落后，慢慢就有把软件装在c盘会卡这种误区</p><h3 id="应用软件装在C盘里会让系统变慢么？"><a href="#应用软件装在C盘里会让系统变慢么？" class="headerlink" title="应用软件装在C盘里会让系统变慢么？"></a>应用软件装在C盘里会让系统变慢么？</h3><p>不会的，兄弟，大曼。</p><p>现在大部分人用的机械硬盘HDD是这样的👇</p><p><img src="/2018/08/16/应用软件装在C盘里会让系统变慢么？/0fae02e21e8919383d2bf56fe5a18dba.jpg" alt="img"> </p><p> 硬盘最核心的部件是像光盘那样的磁盘和连着光盘的磁头</p><p>其中，磁盘是用来存放数据的，磁头是用来读取数据的。</p><p>再说说系统分区，正常的方法分区的话，C盘在磁盘盘片上的位置应该是靠近外圈的，外圈因为周长比较大，这就导致了磁头在相同时间内，读取的数据的性能也很高。</p><p>所以，<strong>对机械硬盘来说，把应用软件装在C盘，非但不会让系统变卡，反而会让应用软件运行得更快。</strong> </p><p>还有很多小伙伴用固态硬盘SSD，把应用软件装在哪个分区运行速度都差不多。 </p><h3 id="如何让笔记本开机不再卡顿"><a href="#如何让笔记本开机不再卡顿" class="headerlink" title="如何让笔记本开机不再卡顿"></a>如何让笔记本开机不再卡顿</h3><p>请看这里<a href="https://blog.tengshe789.tech/2018/08/16/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%BC%80%E6%9C%BA%E4%B8%8D%E5%9C%A8%E5%8D%A1%E9%A1%BF/#more" target="_blank" rel="noopener">https://blog.tengshe789.tech/2018/08/16/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%BC%80%E6%9C%BA%E4%B8%8D%E5%9C%A8%E5%8D%A1%E9%A1%BF/#more</a></p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;8012年了，🌏还在转，但是好多顽固的人🧠不转了，所以今天就有了“应用软件装在C盘里会让系统变慢么”这个话题。&lt;/p&gt;
&lt;h3 id=&quot;为啥人们有把软件装在C盘之外的习惯？&quot;&gt;&lt;a href=&quot;#为啥人们有把软件装在C盘之外的习惯？&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="硬件" scheme="https://tengshe789.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>如何让笔记本开机不再卡顿</title>
    <link href="https://tengshe789.github.io/2018/08/16/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%BC%80%E6%9C%BA%E4%B8%8D%E5%9C%A8%E5%8D%A1%E9%A1%BF/"/>
    <id>https://tengshe789.github.io/2018/08/16/如何让开机不在卡顿/</id>
    <published>2018-08-16T11:09:58.000Z</published>
    <updated>2019-11-20T13:39:41.256Z</updated>
    
    <content type="html"><![CDATA[<p>最近老有小伙伴QQ私聊我：“然哥然哥，我电脑卡，怎么办？”</p><p>我就回复，还能怎么办啊，百度去</p><p>然后对面又来话了，“然哥然哥，我不会搜，咋办啊？”</p><p>我：</p><p><img src="/2018/08/16/如何让开机不在卡顿/1534417908608.png" alt="1534417908608"></p><p>那么几天我就分享一下，我设置win10 PC的小窍门</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h3 id="降低显示效果"><a href="#降低显示效果" class="headerlink" title="降低显示效果"></a>降低显示效果</h3><p>首先，右键单击我的电脑，选择属性，找到高级系统设置，进入后切换选项卡到高级，在视觉效果中，选中“调整为最佳性能”，然后点击应用。</p><p><img src="/2018/08/16/如何让开机不在卡顿/1534418046279.png" alt="1534418046279"></p><h3 id="删除系统遗留的无用文件"><a href="#删除系统遗留的无用文件" class="headerlink" title="删除系统遗留的无用文件"></a>删除系统遗留的无用文件</h3><p>然后，在开始菜单输入cmd，选择命令提示符，进入后输入命令<code>rd C:windows.old /s</code>，删除系统遗留的无用文件，增加C盘空间。关于C盘的空间，我建议至少要保留20%的容量（并且不小于10GB），用来给系统交换文件使用。 </p><p><img src="/2018/08/16/如何让开机不在卡顿/1534418288792.png" alt="1534418288792"></p><h3 id="取消Win10的启动画面"><a href="#取消Win10的启动画面" class="headerlink" title="取消Win10的启动画面"></a>取消Win10的启动画面</h3><p> 在开始菜单输入<code>msconfig</code>，</p><p><img src="/2018/08/16/如何让开机不在卡顿/1534418333759.png" alt="1534418333759"></p><p>然后切换选项卡到引导，勾选“无GUI引导”就可以了 </p><p><img src="/2018/08/16/如何让开机不在卡顿/1534418382192.png" alt="1534418382192"></p><h3 id="禁用随系统启动时加载的服务"><a href="#禁用随系统启动时加载的服务" class="headerlink" title="禁用随系统启动时加载的服务"></a>禁用随系统启动时加载的服务</h3><p>还是在刚才的<code>msconfig</code>系统配置中，切换到服务选项卡，这时所有随系统启动的加载服务都会列表显示，先勾选“隐藏所有Microsoft服务”，然后查看列表中剩余的加载服务项，把你认为不需要的应用服务取消勾选即可</p><p><img src="/2018/08/16/如何让开机不在卡顿/1534418479791.png" alt="1534418479791"></p><h3 id="最有效的办法"><a href="#最有效的办法" class="headerlink" title="最有效的办法"></a>最有效的办法</h3><p>骚年，换个SSD吧</p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> </p><p>现在百度win10优化，还有很多小技巧，我就不一一列举了，详情请看看百度第一条<a href="https://jingyan.baidu.com/article/c843ea0ba3d01377931e4a3d.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/c843ea0ba3d01377931e4a3d.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近老有小伙伴QQ私聊我：“然哥然哥，我电脑卡，怎么办？”&lt;/p&gt;
&lt;p&gt;我就回复，还能怎么办啊，百度去&lt;/p&gt;
&lt;p&gt;然后对面又来话了，“然哥然哥，我不会搜，咋办啊？”&lt;/p&gt;
&lt;p&gt;我：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/08/16/如何让开机不在卡顿/15
      
    
    </summary>
    
    
      <category term="Windows10" scheme="https://tengshe789.github.io/tags/Windows10/"/>
    
      <category term="窍门" scheme="https://tengshe789.github.io/tags/%E7%AA%8D%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>论自动下载Bing背景的小技巧</title>
    <link href="https://tengshe789.github.io/2018/08/16/%E8%87%AA%E5%8A%A8%E4%B8%8B%E8%BD%BDBing%E8%83%8C%E6%99%AF/"/>
    <id>https://tengshe789.github.io/2018/08/16/自动下载Bing背景/</id>
    <published>2018-08-16T10:43:42.000Z</published>
    <updated>2019-11-20T13:39:41.543Z</updated>
    
    <content type="html"><![CDATA[<p>Bing，兄弟们懂吧🤠虽然Bing的搜索引擎还差点意思，不过每次启动它的时候，总是被它的背景震撼到，甚至很多人都把它当作美图网</p><p><img src="/2018/08/16/自动下载Bing背景/1534416347191.png" alt="1534416347191"> </p><p>诺，就是这种背景，每天都会换1张，还不重复</p><p>是不是想要把它设置成壁纸？每次都要自己手动操作对懒癌患者实在是不够友好，既然现在什么都讲究AI，咱们也就来点智能化的Bing壁纸下载操作吧。 </p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a>。</p><h3 id="第一步–coding"><a href="#第一步–coding" class="headerlink" title="第一步–coding"></a>第一步–coding</h3><p>先准备一个txt，将下列代码粘贴进去</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="built_in">Split-Path</span> -Parent <span class="variable">$MyInvocation</span>.MyCommand.Definition</span><br><span class="line"></span><br><span class="line">cd <span class="variable">$x</span></span><br><span class="line"></span><br><span class="line">mkdir images</span><br><span class="line"></span><br><span class="line">cd images</span><br><span class="line"></span><br><span class="line">mkdir jsons</span><br><span class="line"></span><br><span class="line">cd jsons</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="string">"http://www.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=10"</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$time</span> = <span class="built_in">Get-Date</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="built_in">Invoke-WebRequest</span> <span class="variable">$url</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span>.Content | <span class="built_in">Out-File</span> <span class="variable">$time</span>.DayOfYear</span><br><span class="line"></span><br><span class="line"><span class="variable">$decode</span> = <span class="built_in">ConvertFrom-Json</span>(<span class="variable">$data</span>)</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line"><span class="variable">$range</span> = <span class="number">1</span>..<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$count</span> = <span class="variable">$range</span>.Count</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> <span class="nomarkup">-lt</span> <span class="variable">$count</span>; <span class="variable">$i</span>++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$temp</span> = <span class="variable">$decode</span>.images.Get(<span class="variable">$i</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$urlsplit</span> = -Join(<span class="string">"http://www.bing.com"</span>,<span class="variable">$temp</span>.url)</span><br><span class="line"></span><br><span class="line">echo <span class="variable">$urlsplit</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="variable">$urlsplit</span> -OutFile (<span class="variable">$temp</span>.hsh + <span class="string">".jpg"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo ok!</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>然后将文件后缀名改成<code>.ps1</code>，存放到预先找到的壁纸文件夹中。 </p><h3 id="第二步–running"><a href="#第二步–running" class="headerlink" title="第二步–running"></a>第二步–running</h3><p>用鼠标右键选择“使用PowerShell运行”，它就会自动生成个名为“images”的文件夹，下载最近几天显示的8张Bing壁纸。 </p><p><img src="/2018/08/16/自动下载Bing背景/1534416669261.png" alt="1534416669261"></p><p>效果就是这样：</p><p><img src="/2018/08/16/自动下载Bing背景/1534416736052.png" alt="1534416736052"></p><h4 id="出错怎么办？–exception"><a href="#出错怎么办？–exception" class="headerlink" title="出错怎么办？–exception"></a>出错怎么办？–exception</h4><p>注意了，那些已经不用IE浏览器的小伙伴，在使用代码前一定要把IE的启动设置选项优先完成了，不然铁定会报错的。</p><h3 id="第三步–自动化"><a href="#第三步–自动化" class="headerlink" title="第三步–自动化"></a>第三步–自动化</h3><p>要是觉得每天都要手动一下下非常麻烦，还有个全套自动化下载的方式，按照上面的方法把下面做成<code>.ps1</code>文件。 </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="built_in">Split-Path</span> -Parent <span class="variable">$MyInvocation</span>.MyCommand.Definition</span><br><span class="line"></span><br><span class="line">cd <span class="variable">$x</span></span><br><span class="line"></span><br><span class="line">mkdir images</span><br><span class="line"></span><br><span class="line">cd images</span><br><span class="line"></span><br><span class="line">mkdir jsons</span><br><span class="line"></span><br><span class="line">cd jsons</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="string">"http://www.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=10"</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$time</span> = <span class="built_in">Get-Date</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="built_in">Invoke-WebRequest</span> <span class="variable">$url</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span>.Content | <span class="built_in">Out-File</span> <span class="variable">$time</span>.DayOfYear</span><br><span class="line"></span><br><span class="line"><span class="variable">$decode</span> = <span class="built_in">ConvertFrom-Json</span>(<span class="variable">$data</span>)</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line"><span class="variable">$temp</span> = <span class="variable">$decode</span>.images.Get(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$urlsplit</span> = -Join(<span class="string">"http://www.bing.com"</span>,<span class="variable">$temp</span>.url)</span><br><span class="line"></span><br><span class="line">echo <span class="variable">$urlsplit</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="variable">$urlsplit</span> -OutFile (<span class="variable">$temp</span>.hsh + <span class="string">".jpg"</span>)</span><br><span class="line"></span><br><span class="line">echo ok!</span><br></pre></td></tr></table></figure><p>然后进入“控制面板-管理工具-任务计划程序”，选择右侧的“创建任务”。 </p><p><img src="/2018/08/16/自动下载Bing背景/1534417104262.png" alt="1534417104262"></p><p>切换到“操作”选项卡下，点击“新建”， </p><p><img src="/2018/08/16/自动下载Bing背景/1534417241512.png" alt="1534417241512"></p><p>在“程序或脚本”一栏中，填入下面这行内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe</span><br></pre></td></tr></table></figure><p>“添加参数（可选）”内，大家则需要把脚本的保存路径填进去。</p><p><img src="/2018/08/16/自动下载Bing背景/1534417253558.png" alt="1534417253558"></p><p>点击确定后，切换到“触发器”选项卡，同样点击新建，选择“每天”，点击确定，保存任务。 </p><p><img src="/2018/08/16/自动下载Bing背景/1534417283593.png" alt="1534417283593"></p><p>这样每天固定的时间点就会自动下载一张必应壁纸了，久而久之，壁纸库不就有了么？</p><h3 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h3><p>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> 本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，<strong>缘分呢</strong>兄弟。赶快加个好友，咱们两个想个号码， 买个彩票，先挣他个几百万😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Bing，兄弟们懂吧🤠虽然Bing的搜索引擎还差点意思，不过每次启动它的时候，总是被它的背景震撼到，甚至很多人都把它当作美图网&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/08/16/自动下载Bing背景/1534416347191.png&quot; alt=&quot;15344163
      
    
    </summary>
    
    
      <category term="Windows10" scheme="https://tengshe789.github.io/tags/Windows10/"/>
    
      <category term="窍门" scheme="https://tengshe789.github.io/tags/%E7%AA%8D%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>学好分布式架构=2=-通信协议HTTP</title>
    <link href="https://tengshe789.github.io/2018/08/16/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%8B%E6%88%91%E5%AF%B9%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AEHTTP%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://tengshe789.github.io/2018/08/16/分享一下我对通信协议HTTP的理解/</id>
    <published>2018-08-16T07:11:39.000Z</published>
    <updated>2019-11-20T13:39:41.190Z</updated>
    
    <content type="html"><![CDATA[<p>我为什么不断的更新博客呢？这是一次很好的提升机会。  平时解决问题的时候可能考虑进度问题没有更深刻地去理解，但是在写博客的时候，你会不知不觉中对一些内容进行思考，并有可能和评论者一起深入，这些都是难得的机会。 </p><p>可能有人会问我，我为什么不断的更新博客呢？</p><p>我觉得吧，<strong>这是一次很好的提升机会</strong>。  平时解决问题的时候可能考虑进度问题没有更深刻地去理解，但是在写博客的时候，我会不知不觉中对一些内容进行思考，可以更深入的理解问题。在学习的过程中，不断的总结，不断的思考，不断记忆，慢慢知识就巩固了。</p><p>我是一个比较慢热的人，希望我可以用这个方式不断提高自己~</p><p>共同加油！</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h2 id="HTTP协议是什么？"><a href="#HTTP协议是什么？" class="headerlink" title="HTTP协议是什么？"></a>HTTP协议是什么？</h2><p>HTTP协议（HyperText Transfer Protocol，超文本传输协议）:是客户端浏览器或其他程序与Web服务器之间的应用层通信协议 ，是基于请求/响应范式的。</p><p>一个客户机与服务器建立连接后，发送一个请求给服务器，请求方式的格式为，统一资源标识符、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。</p><p>服务器接到请求后，给予相应的响应信息，其格式为一个状态行包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。</p><ol><li><p>它在客户端和服务器端请求和相应</p><p>RT</p></li></ol><p><img src="/2018/08/16/分享一下我对通信协议HTTP的理解/0.png" alt="img"></p><ol start="2"><li>传输资源</li></ol><p>通过html传输 ：文本、word、avi电影、其他资源</p><ol start="3"><li>传输的媒体类型</li></ol><p>服务端向浏览器传输MIME类型的文件，浏览器拿到MIME类型的文件，就可以解析了 。  譬如text/html、 image/jpeg 、application/xml，json格式，都属于MIME类型</p><ol start="4"><li>URI和URL</li></ol><p>要了解http的传输，首先要知道传输的对象是什么。</p><p>URI:web服务器中某个资源的名字。  譬如index.html</p><p>URL:网络资源描述 </p><p>举个栗子：</p><pre><code>( http://)[resume.tengshe789.tech][:80]/java/index.html[?query-string] #location</code></pre><p>这时个典型的url，url里面是什么意思呢？</p><p>  schema(协议): http/https/ftp.</p><p>  host: web服务器的ip地址或者域名</p><p>  port: 服务端端口， http默认访问的端口是80</p><p>  path: 资源访问路径#location</p><p>  query-string: 查询参数[?query-string]</p><ol start="5"><li>方法</li></ol><p>每个请求都会携带GET/PUT/DELETE/POST/HEAD这样的一个方法，服务器拿到方法就知道自己该做什么了。</p><p>那java中有doGet()doPost()方法，有什么区别呢？</p><p>doGet：GET方法会把名值对追加在请求的URL后面。因为URL对字符数目有限制，进而限制了用在客户端请求的参数值的数目。并且请求中的参数值是可见的，因此，敏感信息不能用这种方式传递。 </p><p>doPOST：POST方法通过把请求参数值放在请求体中来克服GET方法的限制，因此，可以发送的参数的数目是没有限制的。最后，通过POST请求传递的敏感信息对外部客户端是不可见的。 </p><table><thead><tr><th>方法</th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>缓存</td><td>能被缓存</td><td>不能缓存</td></tr><tr><td>编码类型</td><td>application/x-www-form-urlencoded</td><td>application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。</td></tr><tr><td>对数据长度的限制</td><td>是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）</td><td>无限制。</td></tr><tr><td>对数据类型的限制</td><td>只允许 ASCII 字符</td><td>没有限制。也允许二进制数据。</td></tr><tr><td>安全性</td><td>与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET</td><td>POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td>可见性</td><td>数据在 URL 中对所有人都是可见的。</td><td>数据不会显示在 URL 中。</td></tr></tbody></table><h3 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h3><p>http交换与传输的数据单元是报文。报文由从客户机到服务器的请求和从服务器到客户机的响应构成。</p><p>应答报文格式如下：</p><p>状态行 － 通用信息头 － 响应头 － 实体头 － 报文主体</p><p>状态码元由3位数字组成，表示请求是否被理解或被满足。原因分析是对原文的状态码作简短的描述，状态码用来支持自动操作，而原因分析用来供用户使用。客户机无需用来检查或显示语法。有关通用信息头，响应头和实体头方面的具体内容可以参照相关文件。</p><h4 id="request"><a href="#request" class="headerlink" title="request"></a>request</h4><p>request报文格式如下：</p><p>请求行 － 通用信息头 － 请求头 － 实体头 － 报文主体</p><p>request消息结构包含三部分： （起始行、首部字段、主体） </p><p>下面抓包验证，抓包使用的是<code>Charles</code>这个软件。</p><p><img src="/2018/08/16/分享一下我对通信协议HTTP的理解/1.png" alt="img"></p><p><img src="/2018/08/16/分享一下我对通信协议HTTP的理解/2.png" alt="img"></p><p>如图所示，起始行： METHOD /path / http/version-number</p><p>首部字段： 头信息Header-Name:value</p><p>主体 返回内容optional request body</p><p>请求行以方法字段开始，后面分别是 URL 字段和 HTTP 协议版本字段，并以 CRLF 结尾。SP 是分隔符。除了在最后的 CRLF 序列中 CF 和 LF 是必需的之外，其他都可以不要。有关通用信息头，请求头和实体头方面的具体内容可以参照相关文件。</p><h4 id="response"><a href="#response" class="headerlink" title="response"></a>response</h4><p>response报文格式如下：</p><p>状态行 － 通用信息头 － 响应头 － 实体头 － 报文主体</p><p>第一部分 包括 协议版本http/version-number   状态status code message</p><p>第二部分 头信息header-name:value</p><p>第三部分 body</p><p><img src="/2018/08/16/分享一下我对通信协议HTTP的理解/3.png" alt="img。"></p><p>状态码元由3位数字组成，表示请求是否被理解或被满足。原因分析是对原文的状态码作简短的描述，状态码用来支持自动操作，而原因分析用来供用户使用。客户机无需用来检查或显示语法。有关通用信息头，响应头和实体头方面的具体内容可以参照相关文件。</p><h4 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h4><p>http/1.1版本的协议里面定义了五种类型的状态码：</p><p>1XX    提示信息</p><p>2XX    成功</p><p>3XX    重定向</p><p>4XX    客户端错误</p><p>5XX    服务器端的错误 </p><table><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td>100 Continue</td><td>服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。</td></tr><tr><td>101 Switching Protocols</td><td>服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td></tr></tbody></table><table><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td>200 OK</td><td>请求成功（其后是对GET和POST请求的应答文档。）</td></tr><tr><td>201 Created</td><td>请求被创建完成，同时新的资源被创建。</td></tr><tr><td>202 Accepted</td><td>供处理的请求已被接受，但是处理未完成。</td></tr><tr><td>203 Non-authoritative Information</td><td>文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。</td></tr><tr><td>204 No Content</td><td>没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td></tr><tr><td>205 Reset Content</td><td>没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td></tr><tr><td>206 Partial Content</td><td>客户发送了一个带有Range头的GET请求，服务器完成了它。</td></tr></tbody></table><table><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td>300 Multiple Choices</td><td>多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td></tr><tr><td>301 Moved Permanently</td><td>所请求的页面已经转移至新的url。</td></tr><tr><td>302 Found</td><td>所请求的页面已经临时转移至新的url。</td></tr><tr><td>303 See Other</td><td>所请求的页面可在别的url下被找到。</td></tr><tr><td>304 Not Modified</td><td>未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td></tr><tr><td>305 Use Proxy</td><td>客户请求的文档应该通过Location头所指明的代理服务器提取。</td></tr><tr><td>306 <em>Unused</em></td><td>此代码被用于前一版本。目前已不再使用，但是代码依然被保留。</td></tr><tr><td>307 Temporary Redirect</td><td>被请求的页面已经临时移至新的url。</td></tr></tbody></table><table><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td>400 Bad Request</td><td>服务器未能理解请求。</td></tr><tr><td>401 Unauthorized</td><td>被请求的页面需要用户名和密码。</td></tr><tr><td>401.1</td><td>登录失败。</td></tr><tr><td>401.2</td><td>服务器配置导致登录失败。</td></tr><tr><td>401.3</td><td>由于 ACL 对资源的限制而未获得授权。</td></tr><tr><td>401.4</td><td>筛选器授权失败。</td></tr><tr><td>401.5</td><td>ISAPI/CGI 应用程序授权失败。</td></tr><tr><td>401.7</td><td>访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。</td></tr><tr><td>402 Payment Required</td><td>此代码尚无法使用。</td></tr><tr><td>403 Forbidden</td><td>对被请求页面的访问被禁止。</td></tr><tr><td>403.1</td><td>执行访问被禁止。</td></tr><tr><td>403.2</td><td>读访问被禁止。</td></tr><tr><td>403.3</td><td>写访问被禁止。</td></tr><tr><td>403.4</td><td>要求 SSL。</td></tr><tr><td>403.5</td><td>要求 SSL 128。</td></tr><tr><td>403.6</td><td>IP 地址被拒绝。</td></tr><tr><td>403.7</td><td>要求客户端证书。</td></tr><tr><td>403.8</td><td>站点访问被拒绝。</td></tr><tr><td>403.9</td><td>用户数过多。</td></tr><tr><td>403.10</td><td>配置无效。</td></tr><tr><td>403.11</td><td>密码更改。</td></tr><tr><td>403.12</td><td>拒绝访问映射表。</td></tr><tr><td>403.13</td><td>客户端证书被吊销。</td></tr><tr><td>403.14</td><td>拒绝目录列表。</td></tr><tr><td>403.15</td><td>超出客户端访问许可。</td></tr><tr><td>403.16</td><td>客户端证书不受信任或无效。</td></tr><tr><td>403.17</td><td>客户端证书已过期或尚未生效。</td></tr><tr><td>403.18</td><td>在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。</td></tr><tr><td>403.19</td><td>不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。</td></tr><tr><td>403.20</td><td>Passport 登录失败。这个错误代码为 IIS 6.0 所专用。</td></tr><tr><td>404 Not Found</td><td>服务器无法找到被请求的页面。</td></tr><tr><td>404.0</td><td>（无）–没有找到文件或目录。</td></tr><tr><td>404.1</td><td>无法在所请求的端口上访问 Web 站点。</td></tr><tr><td>404.2</td><td>Web 服务扩展锁定策略阻止本请求。</td></tr><tr><td>404.3</td><td>MIME 映射策略阻止本请求。</td></tr><tr><td>405 Method Not Allowed</td><td>请求中指定的方法不被允许。</td></tr><tr><td>406 Not Acceptable</td><td>服务器生成的响应无法被客户端所接受。</td></tr><tr><td>407 Proxy Authentication Required</td><td>用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td></tr><tr><td>408 Request Timeout</td><td>请求超出了服务器的等待时间。</td></tr><tr><td>409 Conflict</td><td>由于冲突，请求无法被完成。</td></tr><tr><td>410 Gone</td><td>被请求的页面不可用。</td></tr><tr><td>411 Length Required</td><td>“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td></tr><tr><td>412 Precondition Failed</td><td>请求中的前提条件被服务器评估为失败。</td></tr><tr><td>413 Request Entity Too Large</td><td>由于所请求的实体的太大，服务器不会接受请求。</td></tr><tr><td>414 Request-url Too Long</td><td>由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。</td></tr><tr><td>415 Unsupported Media Type</td><td>由于媒介类型不被支持，服务器不会接受请求。</td></tr><tr><td>416 Requested Range Not Satisfiable</td><td>服务器不能满足客户在请求中指定的Range头。</td></tr><tr><td>417 Expectation Failed</td><td>执行失败。</td></tr><tr><td>423</td><td>锁定的错误。</td></tr></tbody></table><table><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td>500 Internal Server Error</td><td>请求未完成。服务器遇到不可预知的情况。</td></tr><tr><td>500.12</td><td>应用程序正忙于在 Web 服务器上重新启动。</td></tr><tr><td>500.13</td><td>Web 服务器太忙。</td></tr><tr><td>500.15</td><td>不允许直接请求 Global.asa。</td></tr><tr><td>500.16</td><td>UNC 授权凭据不正确。这个错误代码为 IIS 6.0 所专用。</td></tr><tr><td>500.18</td><td>URL 授权存储不能打开。这个错误代码为 IIS 6.0 所专用。</td></tr><tr><td>500.100</td><td>内部 ASP 错误。</td></tr><tr><td>501 Not Implemented</td><td>请求未完成。服务器不支持所请求的功能。</td></tr><tr><td>502 Bad Gateway</td><td>请求未完成。服务器从上游服务器收到一个无效的响应。</td></tr><tr><td>502.1</td><td>CGI 应用程序超时。　·</td></tr><tr><td>502.2</td><td>CGI 应用程序出错。</td></tr><tr><td>503 Service Unavailable</td><td>请求未完成。服务器临时过载或当机。</td></tr><tr><td>504 Gateway Timeout</td><td>网关超时。</td></tr><tr><td>505 HTTP Version Not Supported</td><td>服务器不支持请求中指明的HTTP协议版本。</td></tr></tbody></table><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>作用有三，减少客户端请求频率，增加客户端响应速度，减少冗余数据的传输</p><p>下图是谷歌浏览器调试模式界面，在header栏中清晰的显示了缓存的最大保持时间</p><p> <img src="/2018/08/16/分享一下我对通信协议HTTP的理解/4.png" alt="4.png"></p><h3 id="HTTP协议的特点"><a href="#HTTP协议的特点" class="headerlink" title="HTTP协议的特点"></a>HTTP协议的特点</h3><ol><li>无状态（每次请求都是独立的）</li></ol><p>通过cookie+session的机制，完成它的无状态特点</p><ol start="2"><li>多次请求</li><li>基于TCP协议</li></ol><h3 id="协议版本号"><a href="#协议版本号" class="headerlink" title="协议版本号"></a>协议版本号</h3><h4 id="Http1-1和Http1-0的区别"><a href="#Http1-1和Http1-0的区别" class="headerlink" title="Http1.1和Http1.0的区别"></a>Http1.1和Http1.0的区别</h4><ol><li>HTTP/1.0协议使用非持久连接,即在非持久连接下,一个tcp连接只传输一个Web对象；</li><li>HTTP/1.1默认使用持久连接(然而,HTTP/1.1协议的客户机和服务器可以配置成使用非持久连接)。</li></ol><h4 id="HTTP2-0与HTTP1-0的区别"><a href="#HTTP2-0与HTTP1-0的区别" class="headerlink" title="HTTP2.0与HTTP1.0的区别"></a>HTTP2.0与HTTP1.0的区别</h4><ol><li><p>HTTP2.0的多路复用</p><p> 浏览器对同一域名下的并发连接数量有限制，一般为6个，HTTP1中的Keep-Alive用于长连接而不必重新建立连接，然而keep-alive必须等本次请求彻底完成后才能发送下一个请求，而HTTP2的请求与响应以二进制帧的形式交错进行，只需建立一次连接，即一轮三次握手，实现多路复用。</p></li><li><p>HTTP2.0压缩消息头</p><p> HTTP1的消息头很大冗余，而HTTP2.0利用HPACK对消息头进行压缩传输，假设将常用的请求GET/index.html用1表示，POST/index.html用2表示，即是将消息头中的不同的部分分别用不用的索引进行表示，且会用哈夫曼编码压缩字符串，最后封装成frame。索引表分为动态索引和静态索引，动态索引表在客户端和服务器端共同维护，静态索引采用硬编码形式。</p></li><li><p>HTTP2.0服务端推送</p><p> HTTP2.0中服务器会主动将资源推送给客户端，例如把js和css文件主动推送给客户端而不用客户端解析HTML后请求再响应。</p></li></ol><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTP请求过程中，客户端与服务器之间没有任何身份确认的过程，数据全部明文传输，“裸奔”在互联网上，所以很容易遭到黑客的攻击劫持让系统瘫痪，当客户端发送请求很容易被黑客截获，如果黑客冒充目标服务器，则可返回任意信息给客户端，不被客户端所察觉，我们经常会听到“劫持”一词，所以使用直接使用HTTP传输是有风险的。 </p><p>HTTPS协议（HyperText Transfer Protocol over Secure Socket Layer）：可以理解为HTTP+SSL/TLS，即HTTP下加入SSL层，HTTPS的安全基础是 SSL，因此加密的详细内容就需要SSL，用于安全的HTTP数据传输。  </p><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><ol><li>网警公司的SSL3.0 </li></ol><blockquote><pre><code>SSL（Secure Socket Layer，安全套接字层）：1994年为网景所研发，SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。 </code></pre></blockquote><ol start="2"><li>ISOC这个组织  在SSL的基础上发布了升级版本 TLS1.2</li></ol><blockquote><p>  TLS（Transport Layer Security，传输层安全）：其前身是SSL，它最初的几个版本（SSL 1.0、SSL 2.0、SSL 3.0）由网景公司开发，1999年从3.1 开始被IETF标准化并改名，发展至今已经有 TLS 1.0、TLS 1.1、TLS 1.2 三个版本。SSL3.0和TLS1.0由于存在安全漏洞，已经很少被使用到。目前使用最广泛的是TLS 1.1、TLS 1.2。 </p></blockquote><h3 id="HTTPS的工作原理"><a href="#HTTPS的工作原理" class="headerlink" title="HTTPS的工作原理"></a>HTTPS的工作原理</h3><p>假设A要给B发“我爱你”</p><p><img src="/2018/08/16/分享一下我对通信协议HTTP的理解/5.png" alt="HTTPS的工作原理1"></p><h4 id="对称加解密"><a href="#对称加解密" class="headerlink" title="对称加解密"></a>对称加解密</h4><p>如果使用对称加解密</p><p>B有密钥，可以进行相应的解密。由于密钥是公开的，所有的客户端都可以拿到，如图：</p><p><img src="/2018/08/16/分享一下我对通信协议HTTP的理解/6.png" alt="img"></p><p>若，针对不同的客户端使用不同的密钥</p><p><img src="/2018/08/16/分享一下我对通信协议HTTP的理解/7.png" alt="img"></p><p>又会出现协商问题：由于没有公共的密钥了，服务端要给每个客户端发密钥，但协商过程是没有加密的，所以还会出现被截断的问题</p><h4 id="非对称加解密"><a href="#非对称加解密" class="headerlink" title="非对称加解密"></a>非对称加解密</h4><p>非对称：公钥和私钥的概念 </p><p><img src="/2018/08/16/分享一下我对通信协议HTTP的理解/8.png" alt="img"></p><p>那么问题就来了： 客户端如何拿到公钥？</p><p>方案：</p><ol><li>服务器端把公钥发送给每一个客户端</li><li>服务器端把公钥放到远程服务器，客户端可以请求到</li><li><p>让浏览器保存所有的公钥（不现实）</p><p>结论： <strong>公钥被调包的问题按照上面的方案，永远存在</strong>。</p></li></ol><p><img src="/2018/08/16/分享一下我对通信协议HTTP的理解/9.png" alt="img"></p><h4 id="第三方机构与数字证书"><a href="#第三方机构与数字证书" class="headerlink" title="第三方机构与数字证书"></a>第三方机构与数字证书</h4><p>这时候出现了通过第三方机构，使用第三方机构的私钥对我们需要传输的公钥进行加密。</p><p>数字证书是一个经证书授权中心数字签名的包含公开密钥拥有者信息以及公开密钥的文件。 </p><p>数字证书里面包含的内容：</p><p>公司信息、网站信息、数字证书的算法、公钥</p><p>连接过程</p><p><img src="/2018/08/16/分享一下我对通信协议HTTP的理解/10.png" alt="img"></p><p> 如何查看公钥？浏览器有入口直接打开。<img src="/2018/08/16/分享一下我对通信协议HTTP的理解/11.png" alt="1532596718384"></p><p><code>Charles</code>也可以更改添加SSL</p><p><img src="/2018/08/16/分享一下我对通信协议HTTP的理解/12.png" alt="1532596877173"></p><h3 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h3><ol><li><p>客户端发起一个https请求</p><p>a)    客户端支持的加密方式</p><p>b)   客户端生成的随机数（第一个随机数）</p></li><li><p>服务端收到请求后，拿到随机数，返回</p><p>a)    证书（颁发机构（CA）、证书内容本身的数字签名（使用第三方机构的私钥加密）、证书持有者的公钥、证书签名用到的hash算法）</p><p>b)   生成一个随机数，返回给客户端（第二个随机数）</p></li><li><p>客户端拿到证书以后做验证</p><p>a)    根据颁发机构找到本地的跟证书</p><p>b)   根据CA得到根证书的公钥，通过公钥对数字签名解密，得到证书的内容摘要 A</p><p>c)    用证书提供的算法对证书内容进行摘要，得到摘要 B</p><p>d)   通过A和B的对比，也就是验证数字签名</p></li><li><p>验证通过以后，生成一个随机数（第三个随机数），通过证书内的公钥对这个随机数加密，发送给服务器端</p></li><li><p>（随机数1+2+3）通过对称加密得到一个密钥。（会话密钥）</p></li><li><p>通过会话密钥对内容进行对称加密传输</p></li></ol><h3 id="HTTPS的优点"><a href="#HTTPS的优点" class="headerlink" title="HTTPS的优点"></a>HTTPS的优点</h3><p>1、SEO方面</p><p>谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</p><p>2、安全性</p><p>尽管HTTPS并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，主要有以下几个好处：</p><p>（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p><p>（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p><p>（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p><h3 id="HTTPS的缺点"><a href="#HTTPS的缺点" class="headerlink" title="HTTPS的缺点"></a>HTTPS的缺点</h3><p>（1）SSL证书费用很高，以及其在服务器上的部署、更新维护非常繁琐</p><p>（2）HTTPS降低用户访问速度（多次握手）</p><p>（3）网站改用HTTPS以后，由HTTP跳转到HTTPS的方式增加了用户访问耗时（多数网站采用302跳转）</p><p>（4）HTTPS涉及到的安全算法会消耗CPU资源，需要增加大量机器（https访问)</p><p>（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。</p><h3 id="http与https的区别"><a href="#http与https的区别" class="headerlink" title="http与https的区别"></a>http与https的区别</h3><p>HTTP的URL以 http://开头，而HTTPS的URL以https://开头。</p><p>HTTP是不安全的，而HTTPS是安全的。</p><p>HTTP标准端口是80 ，而HTTPS的标准端口是443。</p><p>在OSI网络模型中，HTTP工作于应用层，而HTTPS工作在传输层。</p><p>HTTP无需加密，而HTTPS对传输的数据进行加密。</p><p>HTTP无需证书，而HTTPS需要认证证书。</p><h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><p>REST  ：表述性状态转移</p><p>RESTful是使用WEB标准来做一些准则和约束。</p><h3 id="RESTful的基本概念："><a href="#RESTful的基本概念：" class="headerlink" title="RESTful的基本概念："></a>RESTful的基本概念：</h3><ol><li><p>在REST中，一切的内容都被认为是一种<strong>资源</strong></p></li><li><p>每个资源都由URI唯一标识</p></li><li><p>使用统一的接口处理资源请求（POST/GET/PUT/DELETE/HEAD）</p></li><li><p>无状态</p></li></ol><h3 id="资源和URI"><a href="#资源和URI" class="headerlink" title="资源和URI"></a>资源和URI</h3><ol><li><p>[/]表示资源的层级关系</p></li><li><p>？过滤资源</p></li><li><p>使用_或者-让URI的可读性更好</p></li></ol><h3 id="统一接口"><a href="#统一接口" class="headerlink" title="统一接口"></a>统一接口</h3><p> GET  获取某个资源。 幂等</p><p> POST 创建一个新的资源</p><p> PUT 替换某个已有的资源（更新操作） ， 幂等</p><p> DELETE 删除某个资源</p><p> PATCH/HEAD 更新部分资源</p><h3 id="资源表述"><a href="#资源表述" class="headerlink" title="资源表述"></a>资源表述</h3><p>客户端通过HTTP获取资源</p><p>MIME 类型（）</p><p>accept: text/xml   html文件</p><p>Content-Type告诉客户端资源的表述形式</p><h3 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h3><p> 超媒体即应用状态引擎</p><h3 id="状态转移"><a href="#状态转移" class="headerlink" title="状态转移"></a>状态转移</h3><p>服务器端不应该保存客户端状态。</p><p>应用状态-  &gt;服务器端不保存应用状态</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://baike.baidu.com/item/http/243074" target="_blank" rel="noopener">百度百科</a></p><p>感谢！</p><p>结束 <br>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> 本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，缘分呢兄弟。赶快加个好友~  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我为什么不断的更新博客呢？这是一次很好的提升机会。  平时解决问题的时候可能考虑进度问题没有更深刻地去理解，但是在写博客的时候，你会不知不觉中对一些内容进行思考，并有可能和评论者一起深入，这些都是难得的机会。 &lt;/p&gt;
&lt;p&gt;可能有人会问我，我为什么不断的更新博客呢？&lt;/p
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="学好分布式架构" scheme="https://tengshe789.github.io/tags/%E5%AD%A6%E5%A5%BD%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
      <category term="网络" scheme="https://tengshe789.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>学好分布式架构=3=-分布式事务</title>
    <link href="https://tengshe789.github.io/2018/08/16/%E5%AD%A6%E5%A5%BD%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>https://tengshe789.github.io/2018/08/16/学好分布式架构-分布式事务/</id>
    <published>2018-08-16T04:05:30.000Z</published>
    <updated>2019-11-20T13:39:41.261Z</updated>
    
    <content type="html"><![CDATA[<p>这是第五期文章。这一期我们聊聊分布式事务</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h3 id="数据库单机事务"><a href="#数据库单机事务" class="headerlink" title="数据库单机事务"></a>数据库单机事务</h3><p>要了解分布式事务，首先要明白什么是“事务”。。</p><p>可以参考事务的定义：</p><blockquote><p>事务时数据库运行中的一个逻辑工作单元，工作单元内的一系列SQL命令具有原子性操作的特点，这些命令要么完全成功运行，要么完全撤销或者不执行，如果时后者，则表现为数据库内的最终数据没有发生改变。</p></blockquote><p>数据库事务满足4个要求：</p><ol><li>原子性：事务必须时原子工作单元，对其进行数据修改，要么全都执行，要么都不执行</li><li>一致性：事务在完成时，必须使所有数据都保持一致的状态，事务结束时，所有内部数据结构都必须时正确的</li><li>隔离性：由并发事务做出的修改必须和其他并发事务所做的修改隔离</li><li>持久性：事务完成后，对系统的影响时永久的</li></ol><p>这其中原子性，需要记录操作过程和对应结果，以便于回退；而隔离性，需要产生锁；这两种要求，导致数据库事务执行代价要远高于非事务性操作</p><h4 id="MySQL执行事务"><a href="#MySQL执行事务" class="headerlink" title="MySQL执行事务"></a>MySQL执行事务</h4><p>在MySQL里，事务相关的日志为redo和undo两个文件，redo log记录事务修改后的数据，undo log记录事务前的数据</p><p>下面时MySQL执行事务的简化流程：</p><ol><li>先记录undo/redo log ，确保日志写入硬盘</li><li>更新数据记录，缓存操作并异步刷新硬盘</li><li>commit事务操作。先清理undo信息，然后释放锁资源，在redo中写入commit操作，刷新后确保redo完成并存在硬盘中，这样可以保证数据库的完整性和一致性。</li></ol><p>可以看到，很多操作，譬如写日志以防回滚，都是在写commit之前完成的。commit指令在事务中所占时间非常少，这就时事务的一个重要特点。</p><h3 id="X-OpenDTP事务模型"><a href="#X-OpenDTP事务模型" class="headerlink" title="X/OpenDTP事务模型"></a>X/OpenDTP事务模型</h3><p>分布式事务中，一个事务内的SQL往往操作很多数据库，也要保证事务的4个要求。所以就有X/OpenDTP这个规范了</p><p>X/Open DTP 定义了三个角色： AP，TM，RM</p><ul><li>AP(Application Program)：也就是应用程序，可以理解为使用DTP的程序，我们crud的代码就是这个</li><li>RM(Resource Manager)：资源管理器，这里可以理解为一个DBMS系统，或者消息服务器管理系统，应用程序通过资源管理器对资源进行控制。资源必须实现XA定义的接口</li><li>TM(Transaction Manager)：事务管理器，负责协调和管理事务，提供给AP应用程序编程接口以及管理资源管理器</li></ul><p>其中，AP 可以和TM 以及 RM 通信，TM 和 RM 互相之间可以通信，DTP模型里面定义了XA接口，TM 和 RM 通过XA接口进行双向通信，例如:TM通知RM提交事务或者回滚事务，RM把提交结果通知给TM。AP和RM之间则通过RM提供的Native API 进行资源控制，这个没有进行约API和规范，各个厂商自己实现自己的资源控制，比如Oracle自己的数据库驱动程序。</p><p><img src="/2018/08/16/学好分布式架构-分布式事务/\2012101111283859.jpg" alt="img"> </p><p>其中在DTP定了以下几个概念：</p><p>事务：一个事务是一个完整的工作单元，由多个独立的计算任务组成，这多个任务在逻辑上是原子的。</p><p>全局事务：对于一次性操作多个资源管理器的事务，就是全局事务</p><p>分支事务：在全局事务中，某一个资源管理器有自己独立的任务，这些任务的集合作为这个资源管理器的分支任务</p><p>控制线程：用来表示一个工作线程，主要是关联AP,TM,RM三者的一个线程，也就是事务上下文环境。简单的说，就是需要标识一个全局事务以及分支事务的关系。</p><h4 id="两阶段提交协议"><a href="#两阶段提交协议" class="headerlink" title="两阶段提交协议"></a>两阶段提交协议</h4><p>下面说说这个模型中最著名的二阶段提交协议</p><p>当一个分布式事务所设计的SQL都执行完成，打了RM最后提交事务的时候，为了避免分布式系统所固有的不可靠性导致提交事务失败，TM这时候会走二阶段提交协议</p><p><strong>两阶段提交协议</strong>：如果一个事务管理器管理着多个资源管理器，如果控制全局事务和分支事务，在DTP里面说明两阶段提交的协议</p><p>第一阶段：发起投票表决</p><p>通知所有RM先完成事务提交涉及的复杂准备工作，譬如上文提到的redo日志，尽量把提交过程中所有消耗时间的工作提前完成，确保后面事务100%成功</p><p>第二阶段：正式提交</p><p>TM将第一阶段的结果进行决策，即提交或取消事务。当且仅当所有参与的RM同意提交时，TM才通知所有RM正式提交事务，否则则取消事务。</p><p>下面引用参考文献的一幅图，详细演示了正常情况下的两阶段提交，</p><p><img src="/2018/08/16/学好分布式架构-分布式事务/2012101113135081.jpg" alt="img"></p><p>如果第一阶段某一个资源预提交失败，第二阶段就回滚第一阶段已经预提交成功的资源</p><p><img src="/2018/08/16/学好分布式架构-分布式事务/2012101113140066.jpg" alt="img"></p><p> 以上是比较正常的情况，但是由于RM有权利自己根据情况提交或者回滚自己的分支事务（官方说法是：<strong>Heuristic Decision</strong>）那三么就可能出现以下种情况：</p><p>1 在TM通知RM提交事务之前，RM分支事务已经提交</p><p><img src="/2018/08/16/学好分布式架构-分布式事务/2012101112573888.jpg" alt="img"></p><p>2 在TM通知RM提交事务之前，RM分支事务全部回滚</p><p><img src="/2018/08/16/学好分布式架构-分布式事务/2012101112574795.jpg" alt="img"></p><p>3 在TM通知RM提交事务之前，RM分支事务部分回滚</p><p><img src="/2018/08/16/学好分布式架构-分布式事务/2012101112575470.jpg" alt="img"></p><h3 id="互联网中的分布式事务解决方案"><a href="#互联网中的分布式事务解决方案" class="headerlink" title="互联网中的分布式事务解决方案"></a>互联网中的分布式事务解决方案</h3><p>下面介绍三种互联网中的分布式事务解决方案</p><h4 id="第一种：不用分布式"><a href="#第一种：不用分布式" class="headerlink" title="第一种：不用分布式"></a>第一种：不用分布式</h4><p>这个方案时将一个业务流程中需要在一个事务中执行多个相关业务接口包装到一个事务中，从而避免分布式事务。</p><h4 id="第二种：eBay方案"><a href="#第二种：eBay方案" class="headerlink" title="第二种：eBay方案"></a>第二种：eBay方案</h4><h4 id="第三种：-支付宝DTS框架"><a href="#第三种：-支付宝DTS框架" class="headerlink" title="第三种： 支付宝DTS框架"></a>第三种： 支付宝DTS框架</h4><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.cnblogs.com/aigongsi/archive/2012/10/11/2718313.html" target="_blank" rel="noopener">X/Open DTP(X/Open Distributed Transaction Processing Reference Model) </a></p><p>感谢</p><p>结束 <br>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> 本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，<strong>缘分呢</strong>兄弟。赶快加个好友，咱们两个想个号码， 买个彩票，先挣他个几百万😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是第五期文章。这一期我们聊聊分布式事务&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.tengshe789.tech/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的博客&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;数据库单
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="学好分布式架构" scheme="https://tengshe789.github.io/tags/%E5%AD%A6%E5%A5%BD%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>学好分布式架构=1=-TCP/IP</title>
    <link href="https://tengshe789.github.io/2018/08/16/%E6%88%91%E8%A6%81%E5%AD%A6%E5%A5%BD%E5%88%86%E5%B8%83%E5%BC%8F-TCP-IP/"/>
    <id>https://tengshe789.github.io/2018/08/16/我要学好分布式-TCP-IP/</id>
    <published>2018-08-15T23:10:25.000Z</published>
    <updated>2019-11-20T13:39:41.390Z</updated>
    
    <content type="html"><![CDATA[<p>分布式与网络互联尤为密切，而TCP/IP（传输控制协议/互联网络协议）是网络中最基本的协议。TCP/IP结合DNS、路由相关的协议最终实现的了网络的任意两点的数据通信问题。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a>。</p><h3 id="协议怎么分层的呢？"><a href="#协议怎么分层的呢？" class="headerlink" title="协议怎么分层的呢？"></a>协议怎么分层的呢？</h3><p>提到协议分层，我们很容易联想到ISO-OSI的七层协议经典架构，但是TCP/IP协议族的结构则稍有不同。 </p><table><thead><tr><th>OSI七层网络模型</th><th>TCP/IP四层概念模型</th><th>对应网络协议</th></tr></thead><tbody><tr><td>应用层（Application）</td><td>应用层</td><td>HTTP、TFTP, FTP, NFS, WAIS、SMTP</td></tr><tr><td>表示层（Presentation）</td><td>Telnet, Rlogin, SNMP, Gopher</td><td></td></tr><tr><td>会话层（Session）</td><td>SMTP, DNS</td><td></td></tr><tr><td>传输层（Transport）</td><td>传输层</td><td>TCP, UDP</td></tr><tr><td>网络层（Network）</td><td>网络层</td><td>IP, ICMP, ARP, RARP, AKP, UUCP</td></tr><tr><td>数据链路层（Data Link）</td><td>数据链路层</td><td>FDDI, Ethernet, Arpanet, PDN, SLIP, PPP</td></tr><tr><td>物理层（Physical）</td><td>IEEE 802.1A, IEEE 802.2到IEEE 802.11</td></tr></tbody></table><p>TCP/IP协议族按照层次由上到下，层层包装。</p><p><img src="/2018/08/16/我要学好分布式-TCP-IP/微信图片_20180908211733.jpg" alt="img"></p><p>最上面的就是应用层了，这里面有http，ftp,等等我们熟悉的协议。</p><p>第二层则是传输层，著名的TCP和UDP协议就在这个层次，我们熟知的网页大部分是由TCP传输的，而玩的游戏大部分是由UDP传输的。</p><p>第三层是网络层，IP协议就在这里，它负责对数据加上IP地址和其他的数据以确定传输的目标。</p><p>第四层是叫数据链路层，这个层次为待传送的数据加入一个以太网协议头，并进行CRC编码，为最后的数据传输做准备。</p><p>TCP/IP四层协议与OSI七层网络模型层层相对，结构分明。</p><h3 id="协议是什么样子的呢？"><a href="#协议是什么样子的呢？" class="headerlink" title="协议是什么样子的呢？"></a>协议是什么样子的呢？</h3><p>打开cmd（本人windows平台），输入运行<code>ipconfig/all</code></p><p><img src="/2018/08/16/我要学好分布式-TCP-IP/1534376209389.png" alt="ipconfig/all"></p><p>这里就可以清楚的显示出来我PC的各种网路信息，甚至我PC几个网卡都能看的一清二楚。</p><h3 id="传输过程"><a href="#传输过程" class="headerlink" title="传输过程"></a>传输过程</h3><h4 id="本地传输"><a href="#本地传输" class="headerlink" title="本地传输"></a>本地传输</h4><p>如果我们浏览网页，通常会在浏览器地址栏中打上3个w和网站的名字，就譬如打开百度需要输入WWW.BAIDU.COM，这个名字就叫域名。我们的浏览器会发现url中网站的域名，然后查找本地的host文件，根据host文件查找响应的dns服务器ip地址，用UDP协议向dns服务器发送dns查询命令，dns服务器获取到查询命令并从缓存或者数据库中查询改域名对应主机的ip地址，再将这个ip地址发到你浏览器上。</p><p>有点绕口，实际你可以使用cmd的<code>nslookup</code>来跟踪这个过程。</p><p><img src="/2018/08/16/我要学好分布式-TCP-IP/1534377034171.png" alt="nslookup"></p><p>我们看到，使用多次命令查询，得到的ip结果总是不一样的。这是因为dns有负载均衡机制，服务器会查询并返回多个ip地址，每次查询返回的ip地址可能有所不同。</p><p>接着往下说，当我们浏览器获知这个ip地址的时候，就向这个ip地址的80端口（HTTP标准端口是80 ，而HTTPS的标准端口是443）发起TCP连接，但其实这个ip地址并不是计算机所在的局域网，而是一个广域网地址，所以子网的网关就需要通过路由转发了</p><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>互联网是由很多相互隔离的小网络无限延伸而成的一个大网络，路由器负责将多个网络连接，并交换路由表信息来确定一个IP报文要经过哪个路由器的哪个端口发给哪个互联的子网。</p><p>为了防止一个数据包在发送过程中形成死循环，ip包中的TTL字段每经过路由器转发一次，就会-1。当TTL为0时则被丢弃，认为网络不可达，一般默认的最大TTL是30</p><p>同样我们可以使用tracert来跟踪这个过程。tacert是根据ICMP协议来确定一个ip报文到达目标地址所经过的路由器节点</p><p><img src="/2018/08/16/我要学好分布式-TCP-IP/1534378012831.png" alt="1534378012831"></p><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><p>socket时一个ip地址与端口的组合，是计算机的远程通信接口，本地一个socket与远程socket连接的过程，就是三次握手的过程。</p><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><p><img src="/2018/08/16/我要学好分布式-TCP-IP/1159846-20170605223656153-365910138.png" alt="img"> </p><p>第一次握手：客户端发送syn包(SYN = 1，序列号seq = x，SYN报文段不能携带数据，但要消耗一个初始序号)到服务器，并进入SYN_SEND状态，等待服务器确认。</p><p>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（SYN=1 ACK=1 seq=y，同样消耗一个序号），即SYN+ACK包，此时服务器进入SYN_RECV状态。</p><p>第三次握手：客户端收到服务器的SYN＋ACK包 ，向服务器发送确认包ACK(ACK = 1 seq = x + 1 ack = y + 1，ACK报文段可以携带数据，但如果不携带数据则不消耗序号，这种情况下，下一个数据报文段的序号仍是seq=x+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</p><blockquote><p>各个状态名称与含义<br>CLOSED: 表示初始状态。<br>LISTEN: 服务器端处于监听状态，可以接受连接。<br>SYN_RECV: 当收到客户端的ACK报文后，服务器会进入到ESTABLISHED状态。<br>SYN_SENT: 当客户端发送SYN报文，随即它会进入到了SYN_SENT状态，并等待服务端的发送三次握手中的第2个报文。<br>ESTABLISHED：表示连接已经建立了。</p></blockquote><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p><img src="/2018/08/16/我要学好分布式-TCP-IP/1159846-20170605225514606-1138877138.png" alt="img"> </p><p>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。</p><p>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。</p><p>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</p><p>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</p><blockquote><p> 各个状态名称与含义</p><p>FIN-WAIT-1：等待远程TCP的连接中断请求。</p><p>FIN-WAIT-2：从远程TCP等待连接中断请求。</p><p>CLOSE-WAIT：等待从本地用户发来的连接中断请求。 </p><p>CLOSING：等待远程TCP对连接中断的确认。</p><p>LAST-ACK：等待原来发向远程TCP的连接中断请求的确认； </p><p>TIME-WAIT：等待足够的时间以确保远程TCP接收到连接中断请求的确认</p></blockquote><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="常见端口"><a href="#常见端口" class="headerlink" title="常见端口"></a>常见端口</h4><blockquote><p>FTP 21</p><p>telnet 23</p><p>域名服务器 53</p><p>POP3 110</p><p>MySQL 3306</p><p>POP-2 109</p><p>SNMP 161</p><p>SSH 22</p><p>SMTP 25</p><p>HTTP 80</p><p>NTP 123</p><p>shell或者cmd 514</p><p>SQL Server 1433</p></blockquote><p>结束 <br>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> 本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，<strong>缘分呢</strong>兄弟。赶快加个好友，咱们两个想个号码， 买个彩票，先挣他个几百万😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分布式与网络互联尤为密切，而TCP/IP（传输控制协议/互联网络协议）是网络中最基本的协议。TCP/IP结合DNS、路由相关的协议最终实现的了网络的任意两点的数据通信问题。&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.tengshe7
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="学好分布式架构" scheme="https://tengshe789.github.io/tags/%E5%AD%A6%E5%A5%BD%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
      <category term="网络" scheme="https://tengshe789.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>收到一个令我悲伤的消息</title>
    <link href="https://tengshe789.github.io/2018/08/06/%E6%94%B6%E5%88%B0%E4%B8%80%E4%B8%AA%E4%BB%A4%E6%88%91%E6%82%B2%E4%BC%A4%E7%9A%84%E6%B6%88%E6%81%AF/"/>
    <id>https://tengshe789.github.io/2018/08/06/收到一个令我悲伤的消息/</id>
    <published>2018-08-06T09:02:28.000Z</published>
    <updated>2019-11-20T13:39:41.532Z</updated>
    
    <content type="html"><![CDATA[<p>我的该死的VPS提供商又要破pao产lu了，气死我也。最近的vps服务都不能用了，MySQL一连一个失败。后来他们给我发了一封邮件</p><p>👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇</p><p><img src="/2018/08/06/收到一个令我悲伤的消息/1533546896065.png" alt="1533546896065"></p><p>👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆</p><p>大概意思是他们完了，要把机器服务转给我的另一个老东家NFHosting，对，没错。就是给我提供上一个博客服务的数据中心。</p><p>该死的，我上一个博客的数据至今没找回来！</p><p>行吧，我已经无所谓了。就当考验我的运维水平了，搭建个RabbitMQ，MySQL，redis，阿帕奇，对这种单核VPS，不就一上午么？我干还不行么？</p><p>于是乎，我按照他们的流程回复了邮件。</p><p><img src="/2018/08/06/收到一个令我悲伤的消息/1533547252189.png" alt="1533547252189"></p><p>然后，就没有然后了。这家公司的工程师没一个理我的🙃</p><p>不能自甘堕落啊！我心中燃气了雄凶大火！</p><p>于是乎，绝望的发了个repost</p><p><img src="/2018/08/06/收到一个令我悲伤的消息/1533547176317.png" alt="1533547176317"></p><p>希望神与我同在吧。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我的该死的VPS提供商又要破pao产lu了，气死我也。最近的vps服务都不能用了，MySQL一连一个失败。后来他们给我发了一封邮件&lt;/p&gt;
&lt;p&gt;👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇
      
    
    </summary>
    
    
      <category term="日常" scheme="https://tengshe789.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>不要懒惰，加油</title>
    <link href="https://tengshe789.github.io/2018/08/04/%E5%8A%A0%E6%B2%B9/"/>
    <id>https://tengshe789.github.io/2018/08/04/加油/</id>
    <published>2018-08-04T14:30:11.000Z</published>
    <updated>2019-11-20T13:39:41.235Z</updated>
    
    <content type="html"><![CDATA[<p>最近母亲要去朝鲜旅游，心系母亲，有点略微浮躁。好久没持续学习了，罪过罪过。</p><p>用山本耀司的话给自己打鸡血：</p><blockquote><p>我从不相信什么懒洋洋的自由，我向往的自由是通过勤奋和努力实现更广阔的人生，那样的自由才是珍贵的、有价值的。我相信一万小时定律，我从来不相信天上掉馅饼的灵感和坐等的成就。做一个自由又自律的人，靠势必实现的决心认真地活着。</p></blockquote><p>没有绝对正确的事情，你能做的就是更加努力，这样才能让一切变得都是最好的安排！自己啊，一定要加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近母亲要去朝鲜旅游，心系母亲，有点略微浮躁。好久没持续学习了，罪过罪过。&lt;/p&gt;
&lt;p&gt;用山本耀司的话给自己打鸡血：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我从不相信什么懒洋洋的自由，我向往的自由是通过勤奋和努力实现更广阔的人生，那样的自由才是珍贵的、有价值的。我相信一
      
    
    </summary>
    
    
      <category term="日常" scheme="https://tengshe789.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="生活" scheme="https://tengshe789.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="吐槽" scheme="https://tengshe789.github.io/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>这是一篇优雅的Springboot2.0使用手册</title>
    <link href="https://tengshe789.github.io/2018/08/04/springboot/"/>
    <id>https://tengshe789.github.io/2018/08/04/springboot/</id>
    <published>2018-08-04T13:58:47.000Z</published>
    <updated>2021-06-06T09:10:07.894Z</updated>
    
    <content type="html"><![CDATA[<p>最近再研究springboot的原理😋颇有收获，现在让我分享一下springboot如何使用吧~</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h2 id="啥是Springboot"><a href="#啥是Springboot" class="headerlink" title="啥是Springboot"></a>啥是Springboot</h2><p>和书上理解的不同，我认为Springboot是一个优秀的快速搭建框架，他通过maven继承方式添加依赖来整合很多第三方工具，可以避免各种麻烦的配置，有各种内嵌容器简化Web项目，还能避免依赖的干扰，它内置tomcat，jetty容器，使用的是java app运行程序，而不是传统的用把war放在tomcat等容器中运行</p><h3 id="和JFinal的区别"><a href="#和JFinal的区别" class="headerlink" title="和JFinal的区别"></a>和JFinal的区别</h3><p>JFinal是国人出品的一个web + orm 框架 ，<a href="http://www.jfinal.com/" target="_blank" rel="noopener">JFinal</a>，优点是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展。核心就是极致简洁。他没有商业机构的支持，所以宣传不到位，少有人知。</p><p>Springboot相比与JFinal最大的优点就是支持的功能非常多，可以非常方便的将spring的各种框架如springframework , spring-mvc, spring-security, spring-data-jpa, spring-cache等等集成起来进行自动化配置 ，而且生态 比较好，很多产品都对Springboot做出一定支持。</p><h3 id="与Springcloud的区别"><a href="#与Springcloud的区别" class="headerlink" title="与Springcloud的区别"></a>与Springcloud的区别</h3><p>可以这么理解，Springboot里面包含了Springcloud，Springcloud只是Springboot里面的一个组件而已。</p><p>Springcloud提供了相当完整的微服务架构。而微服务架构，本质来说就是分布式架构，意味着你要将原来是一个整体的项目拆分成一个个的小型项目，然后利用某种机制将其联合起来，例如服务治理、通信框架等基础设施。</p><h3 id="SpringBoot和SpringMVC区别"><a href="#SpringBoot和SpringMVC区别" class="headerlink" title="SpringBoot和SpringMVC区别"></a>SpringBoot和SpringMVC区别</h3><p>SpringBoot的Web组件，默认集成的是SpringMVC框架。</p><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><p>要往下看的话，注意了👇</p><ul><li>Springboot 2.x 要求 JDK 1.8 环境及以上版本。另外，Springboot  2.x 只兼容 Spring Framework 5.0 及以上版本。</li><li>为 Springboot 2.x 提供了相关依赖构建工具是 Maven，版本需要 3.2 及以上版本。使用 Gradle 则需要 1.12 及以上版本。</li><li>建议用IntelliJ IDEA IntelliJ IDEA （简称 IDEA）</li></ul><h3 id="建立项目"><a href="#建立项目" class="headerlink" title="建立项目"></a>建立项目</h3><p>我已经好久没用Eclipse了，要知道Eclipse是创建一个maven项目在引入Springboot依赖创建的。</p><p>下面我分享一下用IDEA创建Springboot的方法。</p><p><img src="/2018/08/04/springboot/1.png" alt="1533536250534"></p><p>很简单，在这个界面里面就可以创建Springboot了。接下来在添加一些组件。</p><p><img src="/2018/08/04/springboot/2.png" alt="1533536423232"></p><p>大功告成！</p><h3 id="写一个DEMO"><a href="#写一个DEMO" class="headerlink" title="写一个DEMO"></a>写一个DEMO</h3><p>这里用我写的一个秒杀项目作为参考栗子。<a href="https://github.com/tengshe789/-miaosha" target="_blank" rel="noopener">秒杀商城</a></p><p>创建一个conntroller包，编写一个样列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tengshe789.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来在他<strong>同级包</strong>或者<strong>上一级的包</strong>内，创建一个主方法<code>MainApplication</code>。方法内容;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="comment">//@ComponentScan("cn.tengshe789.controller")</span></span><br><span class="line"><span class="comment">//@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器输入<a href="http://127.0.0.1:8080/demo/hello/，就可以启动了！" target="_blank" rel="noopener">http://127.0.0.1:8080/demo/hello/，就可以启动了！</a></p><h4 id="SpringApplication-run"><a href="#SpringApplication-run" class="headerlink" title="SpringApplication.run"></a>SpringApplication.<em>run</em></h4><p>Springboot将他标识为启动类，用它启动Springboot项目</p><h3 id="基础注解解释"><a href="#基础注解解释" class="headerlink" title="基础注解解释"></a>基础注解解释</h3><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><p>在上加上RestController 表示修饰该Controller所有的方法返回JSON格式,直接可以编写Restful接口。就相当于<code>@Controller</code>+<code>@ResponseBody</code>这种实现</p><h4 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h4><p>用在启动Springboot中，相当于<code>@ComponentScan</code>+<code>@EnableAutoConfiguration</code>+<code>@Configuration</code></p><h4 id="ComponentScan-“cn-tengshe789-controller”"><a href="#ComponentScan-“cn-tengshe789-controller”" class="headerlink" title="@ComponentScan(“cn.tengshe789.controller”)"></a>@ComponentScan(“cn.tengshe789.controller”)</h4><p>控制器扫包范围。</p><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><p>他让 Spring Boot 根据咱应用所声明的依赖来对 Spring 框架进行自动配置。意思是，创建项目时添加的spring-boot-starter-web添加了Tomcat和Spring MVC，所以auto-configuration将假定你正在开发一个web应用并相应地对Spring进行设置。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>规则：</p><p>1、名用大写比较规范</p><p>2、=两边别打空格</p><p>3、名值对写完后别打分号</p><h4 id="自定义参数"><a href="#自定义参数" class="headerlink" title="自定义参数"></a>自定义参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=tengshe789</span><br></pre></td></tr></table></figure><h4 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=pre</span><br><span class="line"></span><br><span class="line">application-dev.properties：开发环境</span><br><span class="line">application-test.properties：测试环境</span><br><span class="line">application-prod.properties：生产环境</span><br></pre></td></tr></table></figure><h4 id="修改端口号"><a href="#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.port=8888 </span><br><span class="line">server.context-path=/tengshe789</span><br></pre></td></tr></table></figure><h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><p>规则：</p><ol><li>使用空格 Space 缩进表示分层，不同层次之间的缩进可以使用不同的空格数目，但是同层元素一定左对齐，即前面空格数目相同（不能使用 Tab，各个系统 Tab对应的 Space 数目可能不同，导致层次混乱）</li><li>‘#’表示注释，只能单行注释，从#开始处到行尾</li><li>破折号后面跟一个空格（a dash and space）表示列表</li><li>用冒号和空格表示键值对 key: value</li><li>简单数据（scalars，标量数据）可以不使用引号括起来，包括字符串数据。用单引号或者双引号括起来的被当作字符串数据，在单引号或双引号中使用C风格的转义字符</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span>  <span class="number">8080</span></span><br><span class="line"><span class="attr">  context-path:</span> <span class="string">/springboot</span></span><br></pre></td></tr></table></figure><h3 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h3><p>Springboot官方不推荐xml，略</p><h2 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h2><p>一个项目用Springboot，十有八九就是用于Web开发。首先让我们看看Springboot怎么快速开发Web把</p><h3 id="如何访问静态资源"><a href="#如何访问静态资源" class="headerlink" title="如何访问静态资源"></a>如何访问静态资源</h3><p>请在resources目录下创建static文件夹，在该位置放置一个静态资源。</p><p>目录：src/main/resources/static</p><p><img src="/2018/08/04/springboot/3.png" alt="1533537772267"></p><p>启动程序后，尝试访问<a href="http://localhost:8080/img.xxx/。就可以访问了。" target="_blank" rel="noopener">http://localhost:8080/img.xxx/。就可以访问了。</a></p><h3 id="关于渲染Web页面"><a href="#关于渲染Web页面" class="headerlink" title="关于渲染Web页面"></a>关于渲染Web页面</h3><p>在之前的快速使用的示例中，我们都是通过添加<code>@RestController</code>来处理请求，所以返回的内容为<code>json</code>对象。那么如果需要渲染html页面的时候，要如何实现呢？</p><h4 id="模板引擎方法"><a href="#模板引擎方法" class="headerlink" title="模板引擎方法"></a>模板引擎方法</h4><p>Springboot依然可以实现动态HTML，并且提供了多种模板引擎的默认配置支持，Springboot官方文档有如下推荐的模板引擎：</p><p>·         Thymeleaf</p><p>·         FreeMarker</p><p>·         Velocity</p><p>·         Groovy</p><p>·         Mustache</p><p>Springboot官方建议避免使用JSP，若一定要使用JSP将无法实现Spring Boot的多种特性。</p><p>在Springboot中，默认的模板配置路径都时：src/main/resources/templates。当然也可以修改这个路径，具体如何修改，可在各模板引擎的配置属性中查询并修改。</p><h3 id="Thymeleaf（胸腺）"><a href="#Thymeleaf（胸腺）" class="headerlink" title="Thymeleaf（胸腺）"></a>Thymeleaf（胸腺）</h3><p>这里还是用我写的一个秒杀项目作为参考栗子。<a href="https://github.com/tengshe789/-miaosha" target="_blank" rel="noopener">秒杀商城</a></p><h4 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><p>在<code>application.properties</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#thymeleaf</span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line">spring.thymeleaf.suffix=.html</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">spring.thymeleaf.servlet.content-type=text/html</span><br><span class="line">spring.thymeleaf.enabled=true</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line"># 一代填 spring.thymeleaf.mode=HTML5</span><br><span class="line">spring.thymeleaf.mode=HTML</span><br></pre></td></tr></table></figure><h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><p>在src/main/resources/创建一个templates文件夹,新网页后缀为*.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/to_list"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model,MiaoshaUser user)</span> </span>&#123;</span><br><span class="line">   model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">   <span class="comment">//查询商品列表</span></span><br><span class="line">   List&lt;GoodsVo&gt; goodsList = goodsService.listGoodsVo();</span><br><span class="line">   model.addAttribute(<span class="string">"goodsList"</span>, goodsList);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"goods_list"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h4><p>这里注意Thymeleaf语法，Thymeleaf很像HTML，不同之处在标签加了一个th前缀</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>商品列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jquery --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/jquery.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>秒杀商品列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span> <span class="attr">id</span>=<span class="string">"goodslist"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>商品图片<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>商品原价<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>秒杀价<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>库存数量<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>  <span class="attr">th:each</span>=<span class="string">"goods,goodsStat : $&#123;goodsList&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;goods.goodsName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;$&#123;goods.goodsImg&#125;&#125;"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;goods.goodsPrice&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;goods.miaoshaPrice&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;goods.stockCount&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"'/goods_detail.htm?goodsId='+$&#123;goods.id&#125;"</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Freemarker-自由标记"><a href="#Freemarker-自由标记" class="headerlink" title="Freemarker(自由标记)"></a>Freemarker(自由标记)</h3><h4 id="POM-1"><a href="#POM-1" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h4><p>在<code>application.properties</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#Freemarker</span><br><span class="line">spring.freemarker.allow-request-override=false</span><br><span class="line">spring.freemarker.cache=true</span><br><span class="line">spring.freemarker.check-template-location=true</span><br><span class="line">spring.freemarker.charset=UTF-8</span><br><span class="line">spring.freemarker.content-type=text/html</span><br><span class="line">spring.freemarker.expose-request-attributes=false</span><br><span class="line">spring.freemarker.expose-session-attributes=false</span><br><span class="line">spring.freemarker.expose-spring-macro-helpers=false</span><br><span class="line">#spring.freemarker.prefix=</span><br><span class="line">#spring.freemarker.request-context-attribute=</span><br><span class="line">#spring.freemarker.settings.*=</span><br><span class="line">spring.freemarker.suffix=.ftl</span><br><span class="line">spring.freemarker.template-loader-path=classpath:/templates/</span><br><span class="line">#comma-separated list</span><br><span class="line">#spring.freemarker.view-names= # whitelist of view names that can be resolved</span><br></pre></td></tr></table></figure><h4 id="后台-1"><a href="#后台-1" class="headerlink" title="后台"></a>后台</h4><p>在src/main/resources/创建一个templates文件夹,新网页后缀为*.ftl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/freemarkerIndex"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Map&lt;String, Object&gt; result)</span> </span>&#123;</span><br><span class="line">result.put(<span class="string">"nickname"</span>, <span class="string">"tEngSHe789"</span>);</span><br><span class="line">        result.put(<span class="string">"old"</span>, <span class="string">"18"</span>);</span><br><span class="line">result.put(<span class="string">"my Blog"</span>, <span class="string">"HTTPS://blog.tengshe789.tech/"</span>);</span><br><span class="line">List&lt;String&gt; listResult = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">listResult.add(<span class="string">"guanyu"</span>);</span><br><span class="line">listResult.add(<span class="string">"zhugeliang"</span>);</span><br><span class="line">result.put(<span class="string">"listResult"</span>, listResult);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前台-1"><a href="#前台-1" class="headerlink" title="前台"></a>前台</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  $&#123;nickname&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">old</span>==<span class="string">"18"</span>&gt;</span></span><br><span class="line">            太假了吧哥们</span><br><span class="line">      <span class="tag">&lt;<span class="name">#elseif</span> <span class="attr">old</span>==<span class="string">"21"</span>&gt;</span></span><br><span class="line">            你是真的21岁</span><br><span class="line">     <span class="tag">&lt;<span class="name">#else</span>&gt;</span></span><br><span class="line">        其他      </span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">#if</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">#list</span> <span class="attr">userlist</span> <span class="attr">as</span> <span class="attr">user</span>&gt;</span></span><br><span class="line">   $&#123;user&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><p>不建议用Springboot整合JSP，要的话一定要为war类型，否则会找不到页面.,而且不要把JSP页面存放在resources// jsp 不能被访问到</p><h4 id="POM-2"><a href="#POM-2" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringBoot web 核心组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringBoot 外部tomcat支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件-3"><a href="#配置文件-3" class="headerlink" title="配置文件"></a>配置文件</h4><p>在<code>application.properties</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.view.prefix=/WEB-INF/jsp/</span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure><h4 id="后台-2"><a href="#后台-2" class="headerlink" title="后台"></a>后台</h4><p>在src/main/resources/创建一个templates文件夹,新网页后缀为*.jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前台-2"><a href="#前台-2" class="headerlink" title="前台"></a>前台</h3><p>略略略😝</p><h2 id="面向流编程"><a href="#面向流编程" class="headerlink" title="面向流编程"></a>面向流编程</h2><p>要了解 WebFlux ,首先了解下什么是Reactive响应式(反应式、异步、面向流)编程 ，他是一种新的编程风格，其特点是异步或并发、事件驱动、推送PUSH机制以及观察者模式的衍生。reactive应用(响应式应用)允许开发人员构建事件驱动（event-driven），可扩展性，弹性的反应系统：提供高度敏感的实时的用户体验感觉，可伸缩性和弹性的应用程序栈的支持，随时可以部署在多核和云计算架构。</p><h3 id="Spring-Webflux"><a href="#Spring-Webflux" class="headerlink" title="Spring Webflux"></a>Spring Webflux</h3><p>Spring Boot Webflux 就是基于 Reactor 实现的。Spring Boot 2.0 包括一个新的 spring-webflux 模块。该模块包含对响应式 HTTP 和 WebSocket 客户端的支持，以及对 REST，HTML 和 WebSocket 交互等程序的支持。一般来说，Spring MVC 用于同步处理，Spring Webflux 用于异步处理。 </p><p>Spring Boot Webflux 有两种编程模型实现，一种类似 Spring MVC 注解方式，另一种是使用其功能性端点方式。 </p><p><img src="/2018/08/04/springboot/8.jpg" alt="img"> </p><p>WebFlux 支持的容器有 Tomcat、Jetty（Non-Blocking IO API） ，也可以像 Netty 和 Undertow 的本身就支持异步容器。在容器中 Spring WebFlux 会将输入流适配成 Mono 或者 Flux 格式进行统一处理。 </p><h4 id="POM-3"><a href="#POM-3" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="官方实例"><a href="#官方实例" class="headerlink" title="官方实例"></a>官方实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PersonRepository repository;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonController</span><span class="params">(PersonRepository repository)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.repository = repository;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/person"</span>)</span><br><span class="line">    <span class="function">Mono&lt;Void&gt; <span class="title">create</span><span class="params">(@RequestBody Publisher&lt;Person&gt; personStream)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.repository.save(personStream).then();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/person"</span>)</span><br><span class="line">    <span class="function">Flux&lt;Person&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.repository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/person/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">Mono&lt;Person&gt; <span class="title">findById</span><span class="params">(@PathVariable String id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.repository.findOne(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h4><p>Spring Boot 2.0 这里有两条不同的线分别是：</p><ol><li>Spring Web MVC -&gt; Spring Data</li><li>Spring WebFlux -&gt; Spring Data Reactive</li></ol><p>如果使用 Spring Data Reactive ，原来的 Spring 针对 Spring Data （JDBC等）的事务管理会不起作用。因为原来的 Spring 事务管理（Spring Data JPA）都是基于 ThreadLocal 传递事务的，其本质是基于 阻塞 IO 模型，不是异步的。</p><p>但 Reactive 是要求异步的，不同线程里面 ThreadLocal 肯定取不到值了。自然，我们得想想如何在使用 Reactive 编程是做到事务，有一种方式是 回调 方式，一直传递 <code>conn ：newTransaction(conn -&gt;{})</code></p><p>因为每次操作数据库也是异步的，所以 connection 在 Reactive 编程中无法靠 ThreadLocal 传递了，只能放在参数上面传递。虽然会有一定的代码侵入行。进一步，也可以 kotlin 协程，去做到透明的事务管理，即把 conn 放到 协程的局部变量中去。<br>那 Spring Data Reactive Repositories 不支持 MySQL，进一步也不支持 MySQL 事务，怎么办？</p><p>答案是，这个问题其实和第一个问题也相关。 为啥不支持 MySQL，即 JDBC 不支持。大家可以看到 JDBC 是所属 Spring Data 的。所以可以等待 Spring Data Reactive Repositories 升级 IO 模型，去支持 MySQL。也可以和上面也讲到了，如何使用 Reactive 编程支持事务。</p><p>如果应用只能使用不强依赖数据事务，依旧使用 MySQL ，可以使用下面的实现，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CityService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取城市信息列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;City&gt; <span class="title">findAllCity</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据城市 ID,查询城市信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">City <span class="title">findCityById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增城市信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> city</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">saveCity</span><span class="params">(City city)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新城市信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> city</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">updateCity</span><span class="params">(City city)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据城市 ID,删除城市信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">deleteCity</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体案例在我参考博主的<a href="https://github.com/JeffLi1993/springboot-learning-example" target="_blank" rel="noopener"> Github</a> </p><h4 id="路由器类-Router"><a href="#路由器类-Router" class="headerlink" title="路由器类 Router"></a>路由器类 Router</h4><p>创建一个 Route 类来定义 RESTful HTTP 路由 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>请参考<a href="https://gitbook.cn/gitchat/activity/59e09f788c3a1a4f21a5b445" target="_blank" rel="noopener">聊聊 Spring Boot 2.x 那些事儿</a></p><h3 id="Async"><a href="#Async" class="headerlink" title="@Async"></a>@Async</h3><p>需要执行异步方法时，在方法上加上<code>@Async</code>之后，底层使用多线程技术 。启动加上需要<code>@EnableAsync</code> </p><h2 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h2><h3 id="整合JdbcTemplate"><a href="#整合JdbcTemplate" class="headerlink" title="整合JdbcTemplate"></a>整合JdbcTemplate</h3><p>使用这个需要spring-boot-starter-parent版本要在1.5以上</p><h4 id="POM-4"><a href="#POM-4" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件-4"><a href="#配置文件-4" class="headerlink" title="配置文件"></a>配置文件</h4><p>在<code>application.properties</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># jdbc模板</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><h4 id="后台-3"><a href="#后台-3" class="headerlink" title="后台"></a>后台</h4><p>创建一个Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">jdbcTemplate.update(<span class="string">"insert into users values(null,?,?);"</span>, name, age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h3><p>这里用我写的一个秒杀项目作为参考栗子。<a href="https://github.com/tengshe789/-miaosha" target="_blank" rel="noopener">秒杀商城</a></p><h4 id="POM-5"><a href="#POM-5" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件-5"><a href="#配置文件-5" class="headerlink" title="配置文件"></a>配置文件</h4><p>在<code>application.properties</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#mybatis</span><br><span class="line">mybatis.type-aliases-package=cn.tengshe789.domain</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case=true</span><br><span class="line">mybatis.configuration.default-fetch-size=100</span><br><span class="line">mybatis.configuration.default-statement-timeout=3000</span><br><span class="line">mybatis.mapperLocations = classpath:cn/tengshe789/dao/*.xml</span><br></pre></td></tr></table></figure><h4 id="后台-4"><a href="#后台-4" class="headerlink" title="后台"></a>后台</h4><p>创建一个Dao（Mapper 代码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select g.*,mg.stock_count, mg.start_date, mg.end_date,mg.miaosha_price from miaosha_goods mg left join goods g on mg.goods_id = g.id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;GoodsVo&gt; <span class="title">listGoodsVo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    GoodsDao goodsDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 展示商品列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;GoodsVo&gt; <span class="title">listGoodsVo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> goodsDao.listGoodsVo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mybatis整合分页插件PageHelper"><a href="#Mybatis整合分页插件PageHelper" class="headerlink" title="Mybatis整合分页插件PageHelper"></a>Mybatis整合分页插件PageHelper</h3><p>PageHelper 是一款好用的开源免费的 Mybatis 第三方物理分页插件</p><h4 id="POM-6"><a href="#POM-6" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件-6"><a href="#配置文件-6" class="headerlink" title="配置文件"></a>配置文件</h4><p>在<code>application.properties</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 配置日志</span><br><span class="line">logging.level.cn.tengshe789.dao=DEBUG</span><br><span class="line"># Pagehelper</span><br><span class="line">pagehelper.helperDialect=mysql</span><br><span class="line">pagehelper.reasonable=true</span><br><span class="line">pagehelper.supportMethodsArguments=true</span><br><span class="line">pagehelper.params=count=countSql</span><br><span class="line">pagehelper.page-size-zero=true</span><br></pre></td></tr></table></figure><p>或者在<code>application.yml</code>中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 与mybatis整合</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  config-location:</span> <span class="attr">classpath:mybatis.xml</span></span><br><span class="line"><span class="attr">  mapper-locations:</span></span><br><span class="line"><span class="attr">  - classpath:</span><span class="string">cn/tengshe789/dao/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页配置</span></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line"><span class="attr">  helper-dialect:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">  reasonable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  support-methods-arguments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  params:</span> <span class="string">count=countSql</span></span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="实体层面"><a href="#实体层面" class="headerlink" title="实体层面"></a>实体层面</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT * FROM USERS "</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * page 当前页数&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * size 当前展示的数据&lt;br&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageInfo&lt;User&gt; <span class="title">findUserList</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 开启分页插件,放在查询语句上面</span></span><br><span class="line">PageHelper.startPage(page, size);</span><br><span class="line">List&lt;User&gt; listUser = userDao.findUserList();</span><br><span class="line"><span class="comment">// 封装分页之后的数据</span></span><br><span class="line">PageInfo&lt;User&gt; pageInfoUser = <span class="keyword">new</span> PageInfo&lt;User&gt;(listUser);</span><br><span class="line"><span class="keyword">return</span> pageInfoUser;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整合SpringJPA"><a href="#整合SpringJPA" class="headerlink" title="整合SpringJPA"></a>整合SpringJPA</h3><p>spring-data-jpa三个步骤：</p><ol><li>声明持久层的接口，该接口继承 Repository（或Repository的子接口，其中定义了一些常用的增删改查，以及分页相关的方法）。</li><li>在接口中声明需要的业务方法。Spring Data 将根据给定的策略生成实现代码。</li><li>在 Spring 配置文件中增加一行声明，让 Spring 为声明的接口创建代理对象。配置了 <a href="jpa:repositories" target="_blank" rel="noopener">jpa:repositories</a> 后，Spring 初始化容器时将会扫描 base-package 指定的包目录及其子目录，为继承 Repository 或其子接口的接口创建代理对象，并将代理对象注册为 Spring Bean，业务层便可以通过 Spring 自动封装的特性来直接使用该对象。</li></ol><p>详情：<a href="http://projects.spring.io/spring-data-jpa/" target="_blank" rel="noopener">JPA官方网站</a></p><h4 id="POM-7"><a href="#POM-7" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件-7"><a href="#配置文件-7" class="headerlink" title="配置文件"></a>配置文件</h4><p>Springboot 默认使用hibernate作为JPA的实现 。需要在<code>application.properties</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># hibernate</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/test?useSSL=false</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.tomcat.max-active=100</span><br><span class="line">spring.datasource.tomcat.max-idle=200</span><br><span class="line">spring.datasource.tomcat.initialSize=20</span><br><span class="line">spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect</span><br></pre></td></tr></table></figure><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><h5 id="Domain"><a href="#Domain" class="headerlink" title="Domain"></a>Domain</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"name"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"age"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  注解的意思：</p><p><code>@Entity</code>会被spring扫描并加载，</p><p><code>@Id</code>注解在主键上</p><p><code>@Column name=&quot;call_phone&quot;</code> 指该字段对应的数据库的字段名，如果相同就不需要定义。数据库下划线间隔和代码中的驼峰法视为相同，如数据库字段create_time等价于Java类中的createTime，因此不需要用@Column注解。</p><h5 id="Dao层-1"><a href="#Dao层-1" class="headerlink" title="Dao层"></a>Dao层</h5><p>此时需要继承Repository接口~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/jpaFindUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">jpaIndex</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">Optional&lt;User&gt; userOptional = userDao.findById(user.getId());</span><br><span class="line">User result = userOptional.get();</span><br><span class="line"><span class="keyword">return</span> reusltUser == <span class="keyword">null</span> ? <span class="string">"没有查询到数据"</span> : result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多数据源"><a href="#多数据源" class="headerlink" title="多数据源"></a>多数据源</h3><p>很多公司都会使用多数据库，一个数据库存放共同的配置或文件，另一个数据库是放垂直业务的数据。所以说需要一个项目中有多个数据源</p><p>这玩意原理很简单，根据不同包名，加载不同数据源。</p><h4 id="配置文件-8"><a href="#配置文件-8" class="headerlink" title="配置文件"></a>配置文件</h4><p>在<code>application.properties</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># datasource1</span><br><span class="line">spring.datasource.test1.driver-class-name = com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.test1.jdbc-url =jdbc:mysql://localhost:3306/test01?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.test1.username = root</span><br><span class="line">spring.datasource.test1.password = 123456</span><br><span class="line"># datasource2</span><br><span class="line">spring.datasource.test2.driver-class-name = com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.test2.jdbc-url =jdbc:mysql://localhost:3306/test02?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.test2.username = root</span><br><span class="line">spring.datasource.test2.password = 123456</span><br></pre></td></tr></table></figure><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><h5 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h5><p>数据库1的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DataSource01</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 注册到springboot容器中</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"tech.tengshe789.test01"</span>, sqlSessionFactoryRef = <span class="string">"test1SqlSessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSource1Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@methodDesc</span>: 功能描述:(配置test1数据库)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: tEngSHe789</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"test1DataSource"</span>)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.test1"</span>)</span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">testDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@methodDesc</span>: 功能描述:(test1 sql会话工厂)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"test1SqlSessionFactory"</span>)</span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">testSqlSessionFactory</span><span class="params">(@Qualifier(<span class="string">"test1DataSource"</span>)</span> DataSource dataSource)</span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">bean.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">//加载mapper（不需要）</span></span><br><span class="line">bean.setMapperLocations(</span><br><span class="line"> <span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">"classpath:mybatis/mapper/test1/*.xml"</span>));</span><br><span class="line"><span class="keyword">return</span> bean.getObject();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@methodDesc</span>: 功能描述:(test1 事物管理)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"test1TransactionManager"</span>)</span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">testTransactionManager</span><span class="params">(@Qualifier(<span class="string">"test1DataSource"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"test1SqlSessionTemplate"</span>)</span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">testSqlSessionTemplate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@Qualifier(<span class="string">"test1SqlSessionFactory"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库2的同理。</p><h5 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">User1Dao</span> </span>&#123;</span><br><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into users values(null,#&#123;name&#125;,#&#123;age&#125;);"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span> Integer age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>在多数据源的情况下，使用<code>@Transactional</code>注解时，应该指定事务管理者<code>@Transactional(transactionManager = &quot;test1TransactionManager&quot;)</code></p><h2 id="事物管理"><a href="#事物管理" class="headerlink" title="事物管理"></a>事物管理</h2><p>怎么进行事物管理呢，简单，往下看。</p><h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a><strong>声明式事务</strong></h3><p>找到service实现类，加上<code>@Transactional</code> 注解就行，此<code>@Transactional</code>注解来自<code>org.springframework.transaction.annotation</code>包 ，不是来自<code>javax.transaction</code> 。而且<code>@Transactional</code>不仅可以注解在方法上，也可以注解在类上。当注解在类上的时候意味着此类的所有public方法都是开启事务的。如果类级别和方法级别同时使用了<code>@Transactional</code>注解，则使用在类级别的注解会重载方法级别的注解。 </p><p>注意：Springboot提供了一个<code>@EnableTransactionManagement</code>注解在配置类上来开启声明式事务的支持。注解<code>@EnableTransactionManagement</code>是默认打开的，想要关闭事务管理，想要在程序入口将这个注解改为false</p><h3 id="分布式事物管理"><a href="#分布式事物管理" class="headerlink" title="分布式事物管理"></a>分布式事物管理</h3><p>啥是分布式事务呢，比如我们在执行一个业务逻辑的时候有两步分别操作A数据源和B数据源，当我们在A数据源执行数据更改后，在B数据源执行时出现运行时异常，那么我们必须要让B数据源的操作回滚，并回滚对A数据源的操作。这种情况在支付业务时常常出现，比如买票业务在最后支付失败，那之前的操作必须全部回滚，如果之前的操作分布在多个数据源中，那么这就是典型的分布式事务回滚</p><p>了解了什么是分布式事务，那分布式事务在java的解决方案就是JTA(即Java Transaction API)。</p><p>springboot官方提供了 <a href="http://www.atomikos.com/" target="_blank" rel="noopener">Atomikos</a> ， <a href="https://github.com/bitronix/btm" target="_blank" rel="noopener">Bitronix</a> ，<a href="http://www.narayana.io/" target="_blank" rel="noopener">Narayana</a> 的<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-jta.html" target="_blank" rel="noopener">类事务管理器 </a></p><h4 id="类事务管理器Atomikos"><a href="#类事务管理器Atomikos" class="headerlink" title="类事务管理器Atomikos"></a>类事务管理器Atomikos</h4><h5 id="POM-8"><a href="#POM-8" class="headerlink" title="POM"></a>POM</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jta-atomikos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置文件-9"><a href="#配置文件-9" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># Mysql 1</span><br><span class="line">mysql.datasource.test1.url = jdbc:mysql://localhost:3306/test01?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">mysql.datasource.test1.username = root</span><br><span class="line">mysql.datasource.test1.password = 123456</span><br><span class="line"></span><br><span class="line">mysql.datasource.test1.minPoolSize = 3</span><br><span class="line">mysql.datasource.test1.maxPoolSize = 25</span><br><span class="line">mysql.datasource.test1.maxLifetime = 20000</span><br><span class="line">mysql.datasource.test1.borrowConnectionTimeout = 30</span><br><span class="line">mysql.datasource.test1.loginTimeout = 30</span><br><span class="line">mysql.datasource.test1.maintenanceInterval = 60</span><br><span class="line">mysql.datasource.test1.maxIdleTime = 60</span><br><span class="line"></span><br><span class="line"># Mysql 2</span><br><span class="line">mysql.datasource.test2.url =jdbc:mysql://localhost:3306/test02?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">mysql.datasource.test2.username =root</span><br><span class="line">mysql.datasource.test2.password =123456</span><br><span class="line"></span><br><span class="line">mysql.datasource.test2.minPoolSize = 3</span><br><span class="line">mysql.datasource.test2.maxPoolSize = 25</span><br><span class="line">mysql.datasource.test2.maxLifetime = 20000</span><br><span class="line">mysql.datasource.test2.borrowConnectionTimeout = 30</span><br><span class="line">mysql.datasource.test2.loginTimeout = 30</span><br><span class="line">mysql.datasource.test2.maintenanceInterval = 60</span><br><span class="line">mysql.datasource.test2.maxIdleTime = 60</span><br></pre></td></tr></table></figure><h5 id="读取配置文件信息"><a href="#读取配置文件信息" class="headerlink" title="读取配置文件信息"></a>读取配置文件信息</h5><p>以下是读取数据库1的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"mysql.datasource.test1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBConfig1</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> minPoolSize;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxPoolSize;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxLifetime;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> borrowConnectionTimeout;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> loginTimeout;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maintenanceInterval;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxIdleTime;</span><br><span class="line"><span class="keyword">private</span> String testQuery;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取数据库2的配置文件略</p><h5 id="创建数据源"><a href="#创建数据源" class="headerlink" title="创建数据源"></a>创建数据源</h5><p>数据源1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// basePackages 最好分开配置 如果放在同一个文件夹可能会报错</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"tech.tengshe789.test01"</span>, sqlSessionTemplateRef = <span class="string">"testSqlSessionTemplate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置数据源</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"testDataSource"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">testDataSource</span><span class="params">(DBConfig1 testConfig)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</span><br><span class="line">mysqlXaDataSource.setUrl(testConfig.getUrl());</span><br><span class="line">mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</span><br><span class="line">mysqlXaDataSource.setPassword(testConfig.getPassword());</span><br><span class="line">mysqlXaDataSource.setUser(testConfig.getUsername());</span><br><span class="line">mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">xaDataSource.setXaDataSource(mysqlXaDataSource);</span><br><span class="line">xaDataSource.setUniqueResourceName(<span class="string">"testDataSource"</span>);</span><br><span class="line"></span><br><span class="line">xaDataSource.setMinPoolSize(testConfig.getMinPoolSize());</span><br><span class="line">xaDataSource.setMaxPoolSize(testConfig.getMaxPoolSize());</span><br><span class="line">xaDataSource.setMaxLifetime(testConfig.getMaxLifetime());</span><br><span class="line">xaDataSource.setBorrowConnectionTimeout(testConfig.getBorrowConnectionTimeout());</span><br><span class="line">xaDataSource.setLoginTimeout(testConfig.getLoginTimeout());</span><br><span class="line">xaDataSource.setMaintenanceInterval(testConfig.getMaintenanceInterval());</span><br><span class="line">xaDataSource.setMaxIdleTime(testConfig.getMaxIdleTime());</span><br><span class="line">xaDataSource.setTestQuery(testConfig.getTestQuery());</span><br><span class="line"><span class="keyword">return</span> xaDataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"testSqlSessionFactory"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">testSqlSessionFactory</span><span class="params">(@Qualifier(<span class="string">"testDataSource"</span>)</span> DataSource dataSource)</span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">bean.setDataSource(dataSource);</span><br><span class="line"><span class="keyword">return</span> bean.getObject();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"testSqlSessionTemplate"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">testSqlSessionTemplate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@Qualifier(<span class="string">"testSqlSessionFactory"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库2略</p><h5 id="如何启动"><a href="#如何启动" class="headerlink" title="如何启动"></a>如何启动</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span>(value = &#123; DBConfig1.class, DBConfig2.class &#125;)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>在做项目时有时候会有定时器任务的功能，比如某某时间应该做什么，多少秒应该怎么样之类的。</p><p>spring支持多种定时任务的实现。我们来介绍下使用Quartz 和Scheduler</p><h3 id="Spring-Schedule"><a href="#Spring-Schedule" class="headerlink" title="Spring Schedule"></a>Spring Schedule</h3><p>Spring Schedule 实现定时任务有两种方式 1. 使用XML配置定时任务， 2. 使用 @Scheduled 注解。 </p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><p>固定等待时间 <code>@Scheduled(fixedDelay = 时间间隔 )</code></p><p>固定间隔时间 <code>@Scheduled(fixedRate = 时间间隔 )</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleJobs</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> SECOND = <span class="number">1</span> * <span class="number">1000</span>;</span><br><span class="line">    FastDateFormat fdf = FastDateFormat.getInstance(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedDelay = SECOND * <span class="number">2</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fixedDelayJob</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"[FixedDelayJob Execute]"</span>+fdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Corn表达式 <code>@Scheduled(cron = Corn表达式)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleJobs</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> SECOND = <span class="number">1</span> * <span class="number">1000</span>;</span><br><span class="line">    FastDateFormat fdf = FastDateFormat.getInstance(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/4 * * * * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cronJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[CronJob Execute]"</span>+fdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>要在主方法上加上<code>@EnableScheduling</code></p><h3 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h3><h4 id="POM-9"><a href="#POM-9" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件-10"><a href="#配置文件-10" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># spring boot 2.x 已集成Quartz，无需自己配置</span><br><span class="line">spring.quartz.job-store-type=jdbc</span><br><span class="line">spring.quartz.properties.org.quartz.scheduler.instanceName=clusteredScheduler</span><br><span class="line">spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO</span><br><span class="line">spring.quartz.properties.org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX</span><br><span class="line">spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span><br><span class="line">spring.quartz.properties.org.quartz.jobStore.tablePrefix=QRTZ_</span><br><span class="line">spring.quartz.properties.org.quartz.jobStore.isClustered=true</span><br><span class="line">spring.quartz.properties.org.quartz.jobStore.clusterCheckinInterval=10000</span><br><span class="line">spring.quartz.properties.org.quartz.jobStore.useProperties=false</span><br><span class="line">spring.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool</span><br><span class="line">spring.quartz.properties.org.quartz.threadPool.threadCount=10</span><br><span class="line">spring.quartz.properties.org.quartz.threadPool.threadPriority=5</span><br><span class="line">spring.quartz.properties.org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true</span><br></pre></td></tr></table></figure><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetail <span class="title">uploadTaskDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(UploadTask.class).withIdentity(<span class="string">"uploadTask"</span>).storeDurably().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Trigger <span class="title">uploadTaskTrigger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(<span class="string">"*/5 * * * * ?"</span>);</span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(uploadTaskDetail())</span><br><span class="line">                .withIdentity(<span class="string">"uploadTask"</span>)</span><br><span class="line">                .withSchedule(scheduleBuilder)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h4><p>创建一个配置类，分别制定具体任务类和触发的规则 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@DisallowConcurrentExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadTask</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TencentYunService tencentYunService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"任务开始"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"任务结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@DisallowConcurrentExecution</code>禁止并发执行 </p><p>并发执行方面，系统默认为true,即第一个任务还未执行完整，第二个任务如果到了执行时间，则会立马开启新线程执行任务，这样如果我们是从数据库读取信息，两次重复读取可能出现重复执行任务的情况，所以我们需要将这个值设置为false，这样第二个任务会往后推迟，只有在第一个任务执行完成后才会执行第二个任务 </p><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><h3 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h3><h4 id="POM-10"><a href="#POM-10" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring boot start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 排除自带的logback依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springboot-log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件-11"><a href="#配置文件-11" class="headerlink" title="配置文件"></a>配置文件</h4><p>文件名称<code>log4j.properties</code> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#log4j.rootLogger=CONSOLE,info,error,DEBUG</span></span><br><span class="line"><span class="string">log4j.rootLogger=info,error,CONSOLE,DEBUG</span></span><br><span class="line"><span class="string">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span>     </span><br><span class="line"><span class="string">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span>     </span><br><span class="line"><span class="string">log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;yyyy-MM-dd-HH-mm&#125;</span> <span class="string">[%t]</span> <span class="string">[%c]</span> <span class="string">[%p]</span> <span class="bullet">-</span> <span class="string">%m%n</span>     </span><br><span class="line"><span class="string">log4j.logger.info=info</span></span><br><span class="line"><span class="string">log4j.appender.info=org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="string">log4j.appender.info.layout=org.apache.log4j.PatternLayout</span>     </span><br><span class="line"><span class="string">log4j.appender.info.layout.ConversionPattern=%d&#123;yyyy-MM-dd-HH-mm&#125;</span> <span class="string">[%t]</span> <span class="string">[%c]</span> <span class="string">[%p]</span> <span class="bullet">-</span> <span class="string">%m%n</span>  </span><br><span class="line"><span class="string">log4j.appender.info.datePattern='.'yyyy-MM-dd</span></span><br><span class="line"><span class="string">log4j.appender.info.Threshold</span> <span class="string">=</span> <span class="string">info</span>   </span><br><span class="line"><span class="string">log4j.appender.info.append=true</span>   </span><br><span class="line"><span class="comment">#log4j.appender.info.File=/home/admin/pms-api-services/logs/info/api_services_info</span></span><br><span class="line"><span class="string">log4j.appender.info.File=/Users/dddd/Documents/testspace/pms-api-services/logs/info/api_services_info</span></span><br><span class="line"><span class="string">log4j.logger.error=error</span>  </span><br><span class="line"><span class="string">log4j.appender.error=org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="string">log4j.appender.error.layout=org.apache.log4j.PatternLayout</span>     </span><br><span class="line"><span class="string">log4j.appender.error.layout.ConversionPattern=%d&#123;yyyy-MM-dd-HH-mm&#125;</span> <span class="string">[%t]</span> <span class="string">[%c]</span> <span class="string">[%p]</span> <span class="bullet">-</span> <span class="string">%m%n</span>  </span><br><span class="line"><span class="string">log4j.appender.error.datePattern='.'yyyy-MM-dd</span></span><br><span class="line"><span class="string">log4j.appender.error.Threshold</span> <span class="string">=</span> <span class="string">error</span>   </span><br><span class="line"><span class="string">log4j.appender.error.append=true</span>   </span><br><span class="line"><span class="comment">#log4j.appender.error.File=/home/admin/pms-api-services/logs/error/api_services_error</span></span><br><span class="line"><span class="string">log4j.appender.error.File=/Users/dddd/Documents/testspace/pms-api-services/logs/error/api_services_error</span></span><br><span class="line"><span class="string">log4j.logger.DEBUG=DEBUG</span></span><br><span class="line"><span class="string">log4j.appender.DEBUG=org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="string">log4j.appender.DEBUG.layout=org.apache.log4j.PatternLayout</span>     </span><br><span class="line"><span class="string">log4j.appender.DEBUG.layout.ConversionPattern=%d&#123;yyyy-MM-dd-HH-mm&#125;</span> <span class="string">[%t]</span> <span class="string">[%c]</span> <span class="string">[%p]</span> <span class="bullet">-</span> <span class="string">%m%n</span>  </span><br><span class="line"><span class="string">log4j.appender.DEBUG.datePattern='.'yyyy-MM-dd</span></span><br><span class="line"><span class="string">log4j.appender.DEBUG.Threshold</span> <span class="string">=</span> <span class="string">DEBUG</span>   </span><br><span class="line"><span class="string">log4j.appender.DEBUG.append=true</span>   </span><br><span class="line"><span class="comment">#log4j.appender.DEBUG.File=/home/admin/pms-api-services/logs/debug/api_services_debug</span></span><br><span class="line"><span class="string">log4j.appender.DEBUG.File=/Users/dddd/Documents/testspace/pms-api-services/logs/debug/api_services_debug</span></span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(IndexController.class);</span><br></pre></td></tr></table></figure><h3 id="使用AOP统一处理Web请求日志"><a href="#使用AOP统一处理Web请求日志" class="headerlink" title="使用AOP统一处理Web请求日志"></a>使用AOP统一处理Web请求日志</h3><h4 id="POM-11"><a href="#POM-11" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WebLogAspect.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(public * tech.tengshe789.controller.*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">webLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"webLog()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// 接收到请求，记录请求内容</span></span><br><span class="line">ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">HttpServletRequest request = attributes.getRequest();</span><br><span class="line"><span class="comment">// 记录下请求内容</span></span><br><span class="line">logger.info(<span class="string">"URL : "</span> + request.getRequestURL().toString());</span><br><span class="line">logger.info(<span class="string">"HTTP_METHOD : "</span> + request.getMethod());</span><br><span class="line">logger.info(<span class="string">"IP : "</span> + request.getRemoteAddr());</span><br><span class="line">Enumeration&lt;String&gt; enu = request.getParameterNames();</span><br><span class="line"><span class="keyword">while</span> (enu.hasMoreElements()) &#123;</span><br><span class="line">String name = (String) enu.nextElement();</span><br><span class="line">logger.info(<span class="string">"name:&#123;&#125;,value:&#123;&#125;"</span>, name, request.getParameter(name));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning</span>(returning = <span class="string">"ret"</span>, pointcut = <span class="string">"webLog()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(Object ret)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// 处理完请求，返回内容</span></span><br><span class="line">logger.info(<span class="string">"RESPONSE : "</span> + ret);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lombok-插件"><a href="#lombok-插件" class="headerlink" title="lombok 插件"></a>lombok 插件</h3><p>非常简单的办法</p><h4 id="POM-12"><a href="#POM-12" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><p>类中添加<code>@Slf4j</code> 注解即可。使用是直接输入log全局变量</p><h4 id="Lombok的其他用法"><a href="#Lombok的其他用法" class="headerlink" title="Lombok的其他用法"></a>Lombok的其他用法</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Data 标签，生成getter/setter toString()等方法 </span><br><span class="line">@NonNull : <span class="type"></span>让你不在担忧并且爱上NullPointerException </span><br><span class="line">@CleanUp : <span class="type"></span>自动资源管理：不用再在finally中添加资源的close方法 </span><br><span class="line">@Setter/@Getter : <span class="type"></span>自动生成<span class="keyword">set</span>和<span class="keyword">get</span>方法 </span><br><span class="line">@ToString : <span class="type"></span>自动生成toString方法 </span><br><span class="line">@EqualsAndHashcode : <span class="type"></span>从对象的字段中生成hashCode和equals的实现 </span><br><span class="line">@NoArgsConstructor/@RequiredArgsConstructor/@AllArgsConstructor </span><br><span class="line">自动生成构造方法 </span><br><span class="line">@Data : <span class="type"></span>自动生成<span class="keyword">set</span>/<span class="keyword">get</span>方法，toString方法，equals方法，hashCode方法，不带参数的构造方法 </span><br><span class="line">@Value : <span class="type"></span>用于注解final类 </span><br><span class="line">@Builder : <span class="type"></span>产生复杂的构建器api类</span><br><span class="line">@SneakyThrows : <span class="type"></span>异常处理（谨慎使用） </span><br><span class="line">@Synchronized : <span class="type"></span>同步方法安全的转化 </span><br><span class="line">@Getter(lazy=<span class="literal">true</span>) : <span class="type"></span></span><br><span class="line"><span class="type"></span>@Log : <span class="type"></span>支持各种logger对象，使用时用对应的注解，如：@Log4</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>拦截器，在AOP(Aspect-Oriented Programming)中用于在某个方法或字段被访问之前，进行拦截，然后在之前或之后加入某些操作。拦截是AOP的一种实现策略。 </p><p>（1）拦截器是基于java的反射机制的，而过滤器是基于函数回调。</p><p>（2）拦截器不依赖于servlet容器，而过滤器依赖于servlet容器。</p><p>（3）拦截器只能对Controller请求起作用，而过滤器则可以对几乎所有的请求起作用。</p><p>（4）在Controller的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。</p><p>过滤器（filter）和拦截器（interceptor）是有区别的，<a href="http://blog.csdn.net/xiaodanjava/article/details/32125687" target="_blank" rel="noopener">详情</a> ，他们的执行顺序： 先filter 后 interceptor</p><p>-&gt;过滤器应用场景:设置编码字符、过滤铭感字符</p><p>-&gt;拦截器应用场景:拦截未登陆用户、审计日志</p><h3 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h3><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><p>注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppConfig</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> LoginIntercept loginIntercept;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">WebMvcConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">registry.addInterceptor(loginIntercept).addPathPatterns(<span class="string">"/*"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建模拟登录拦截器，验证请求是否有token参数 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginIntercept</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">log.info(<span class="string">"开始拦截登录请求...."</span>);</span><br><span class="line">String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isEmpty(token)) &#123;</span><br><span class="line">response.getWriter().println(<span class="string">"not found token"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>在 Spring Boot中，通过<code>@EnableCaching</code>注解自动化配置合适的缓存管理器（CacheManager），Spring Boot根据下面的顺序去侦测缓存提供者：  Generic  ， JCache (JSR-107)， EhCache 2.x  ，Hazelcast  ， Infinispan  ，Redis  ，Guava ， Simple </p><h3 id="EhCache"><a href="#EhCache" class="headerlink" title="EhCache"></a>EhCache</h3><h4 id="POM-13"><a href="#POM-13" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="新建ehcache-xml-文件"><a href="#新建ehcache-xml-文件" class="headerlink" title="新建ehcache.xml 文件"></a>新建ehcache.xml 文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ehcache.org/ehcache.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">updateCheck</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir/Tmp_EhCache"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 默认配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">defaultCache</span> <span class="attr">maxElementsInMemory</span>=<span class="string">"5000"</span> <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag"><span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span> <span class="attr">overflowToDisk</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"baseCache"</span> <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxElementsOnDisk</span>=<span class="string">"100000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置信息介绍</p><p><code>name</code>:缓存名称。  </p><p><code>maxElementsInMemory</code>：缓存最大个数。  </p><p><code>eternal</code>:对象是否永久有效，一但设置了，timeout将不起作用。  </p><p><code>timeToIdleSeconds</code>：设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=<strong>false</strong>对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。  </p><p><code>timeToLiveSeconds</code>：设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=<strong>false</strong>对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。  </p><p><code>overflowToDisk</code>：当内存中对象数量达到maxElementsInMemory时，Ehcache将会对象写到磁盘中。  </p><p><code>diskSpoolBufferSizeMB</code>：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。  </p><p><code>maxElementsOnDisk</code>：硬盘最大缓存个数。  </p><p><code>diskPersistent</code>：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The <strong>default</strong> value is <strong>false</strong>.  </p><p><code>diskExpiryThreadIntervalSeconds</code>：磁盘失效线程运行时间间隔，默认是120秒。  </p><p><code>memoryStoreEvictionPolicy</code>：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。  </p><p><code>clearOnFlush</code>：内存数量最大时是否清除。  </p><h4 id="关于注解和代码使用"><a href="#关于注解和代码使用" class="headerlink" title="关于注解和代码使用"></a>关于注解和代码使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"baseCache"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from users where name=#&#123;name&#125;"</span>)</span><br><span class="line"><span class="meta">@Cacheable</span></span><br><span class="line"><span class="function">UserEntity <span class="title">findName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CacheManager cacheManager;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/remoKey"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remoKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cacheManager.getCache(<span class="string">"baseCache"</span>).clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><p>主方法启动时加上<code>@EnableCaching</code>即可</p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h4 id="使用自带驱动器连接"><a href="#使用自带驱动器连接" class="headerlink" title="使用自带驱动器连接"></a>使用自带驱动器连接</h4><p>使用RedisTemplate 连接</p><h5 id="POM-14"><a href="#POM-14" class="headerlink" title="POM"></a>POM</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置文件-12"><a href="#配置文件-12" class="headerlink" title="配置文件"></a>配置文件</h5><p>单机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#redis</span><br><span class="line"># Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database=0</span><br><span class="line"># Redis服务器地址</span><br><span class="line">spring.redis.host=127.0.0.1</span><br><span class="line"># Redis服务器连接端口</span><br><span class="line">spring.redis.port=6379</span><br><span class="line"># Redis服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password=</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-active=8</span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-wait=-1</span><br><span class="line"># 连接池中的最大空闲连接</span><br><span class="line">spring.redis.pool.max-idle=8</span><br><span class="line"># 连接池中的最小空闲连接</span><br><span class="line">spring.redis.pool.min-idle=0</span><br><span class="line"># 连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout=0</span><br></pre></td></tr></table></figure><p>集群或哨兵模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#Matser的ip地址  </span><br><span class="line">redis.hostName=192.168.177.128</span><br><span class="line">#端口号  </span><br><span class="line">redis.port=6382</span><br><span class="line">#如果有密码  </span><br><span class="line">redis.password=</span><br><span class="line">#客户端超时时间单位是毫秒 默认是2000 </span><br><span class="line">redis.timeout=10000  </span><br><span class="line"></span><br><span class="line">#最大空闲数  </span><br><span class="line">redis.maxIdle=300  </span><br><span class="line">#连接池的最大数据库连接数。设为0表示无限制,如果是jedis 2.4以后用redis.maxTotal  </span><br><span class="line">#redis.maxActive=600  </span><br><span class="line">#控制一个pool可分配多少个jedis实例,用来替换上面的redis.maxActive,如果是jedis 2.4以后用该属性  </span><br><span class="line">redis.maxTotal=1000  </span><br><span class="line">#最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。  </span><br><span class="line">redis.maxWaitMillis=1000  </span><br><span class="line">#连接的最小空闲时间 默认1800000毫秒(30分钟)  </span><br><span class="line">redis.minEvictableIdleTimeMillis=300000  </span><br><span class="line">#每次释放连接的最大数目,默认3  </span><br><span class="line">redis.numTestsPerEvictionRun=1024  </span><br><span class="line">#逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1  </span><br><span class="line">redis.timeBetweenEvictionRunsMillis=30000  </span><br><span class="line">#是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个  </span><br><span class="line">redis.testOnBorrow=true  </span><br><span class="line">#在空闲时检查有效性, 默认false  </span><br><span class="line">redis.testWhileIdle=true  </span><br><span class="line"></span><br><span class="line">#redis集群配置      </span><br><span class="line">spring.redis.cluster.nodes=192.168.177.128:7001,192.168.177.128:7002,192.168.177.128:7003,192.168.177.128:7004,192.168.177.128:7005,192.168.177.128:7006</span><br><span class="line">spring.redis.cluster.max-redirects=3</span><br><span class="line"></span><br><span class="line">#哨兵模式</span><br><span class="line">#redis.sentinel.host1=192.168.177.128</span><br><span class="line">#redis.sentinel.port1=26379</span><br><span class="line"></span><br><span class="line">#redis.sentinel.host2=172.20.1.231  </span><br><span class="line">#redis.sentinel.port2=26379</span><br></pre></td></tr></table></figure><h5 id="配置类-1"><a href="#配置类-1" class="headerlink" title="配置类"></a>配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.timeout&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自定义缓存key生成策略</span></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public KeyGenerator keyGenerator() &#123;</span></span><br><span class="line"><span class="comment">//        return new KeyGenerator()&#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public Object generate(Object target, java.lang.reflect.Method method, Object... params) &#123;</span></span><br><span class="line"><span class="comment">//                StringBuffer sb = new StringBuffer();</span></span><br><span class="line"><span class="comment">//                sb.append(target.getClass().getName());</span></span><br><span class="line"><span class="comment">//                sb.append(method.getName());</span></span><br><span class="line"><span class="comment">//                for(Object obj:params)&#123;</span></span><br><span class="line"><span class="comment">//                    sb.append(obj.toString());</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                return sb.toString();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//缓存管理器</span></span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(@SuppressWarnings(<span class="string">"rawtypes"</span>)</span> RedisTemplate redisTemplate) </span>&#123;</span><br><span class="line">        RedisCacheManager cacheManager = <span class="keyword">new</span> RedisCacheManager(redisTemplate);</span><br><span class="line">        <span class="comment">//设置缓存过期时间 </span></span><br><span class="line">        cacheManager.setDefaultExpiration(<span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span></span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate(factory);</span><br><span class="line">        setSerializer(template);<span class="comment">//设置序列化工具</span></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSerializer</span><span class="params">(StringRedisTemplate template)</span></span>&#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</span><br><span class="line">            Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">            ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">            om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">            jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">            template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Dao-1"><a href="#Dao-1" class="headerlink" title="Dao"></a>Dao</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(name,age) values(#&#123;name&#125;,#&#123;age&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String name,@<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span>String age)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id =#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@Cacheable</span>(key =<span class="string">"#p0"</span>) </span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> String id)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CachePut</span>(key = <span class="string">"#p0"</span>)</span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set name=#&#123;name&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updataById</span><span class="params">(@Param(<span class="string">"id"</span>)</span>String id,@<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span>String name)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果指定为 true，则方法调用后将立即清空所有缓存</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(key =<span class="string">"#p0"</span>,allEntries=<span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(@Param(<span class="string">"id"</span>)</span>String id)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Cacheable</code>将查询结果缓存到redis中，（key=”#p0”）指定传入的第一个参数作为redis的key。</p><p><code>@CachePut</code>，指定key，将更新的结果同步到redis中</p><p><code>@CacheEvict</code>，指定key，删除缓存数据，allEntries=true,方法调用后将立即清除缓存</p><h4 id="使用Jedis连接"><a href="#使用Jedis连接" class="headerlink" title="使用Jedis连接"></a>使用Jedis连接</h4><p>要注意，redis在5.0版本以后不支持Jedis</p><h5 id="POM-15"><a href="#POM-15" class="headerlink" title="POM"></a>POM</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置类-2"><a href="#配置类-2" class="headerlink" title="配置类"></a>配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"redis"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;<span class="comment">//秒</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> poolMaxTotal;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> poolMaxIdle;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> poolMaxWait;<span class="comment">//秒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisPoolFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisConfig redisConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisPool <span class="title">edisPoolFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        poolConfig.setMaxIdle(redisConfig.getPoolMaxIdle());</span><br><span class="line">        poolConfig.setMaxTotal(redisConfig.getPoolMaxTotal());</span><br><span class="line">        poolConfig.setMaxWaitMillis(redisConfig.getPoolMaxWait() * <span class="number">1000</span>);</span><br><span class="line">        JedisPool jp = <span class="keyword">new</span> JedisPool(poolConfig, redisConfig.getHost(), redisConfig.getPort(),</span><br><span class="line">                redisConfig.getTimeout()*<span class="number">1000</span>, redisConfig.getPassword(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> jp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监控中心"><a href="#监控中心" class="headerlink" title="监控中心"></a>监控中心</h2><p>Springboot监控中心是干什么的呢？他是针对微服务的 服务状态、Http请求资源进行监控，可以看到服务器内存变化（堆内存、线程、日志管理），可以检测服务配置连接地址是否可用（模拟访问，懒加载），可以统计有多少Bean有什么单例多例，可以统计SpringMVC有多少@RequestMapping</p><h3 id="Actuator"><a href="#Actuator" class="headerlink" title="Actuator"></a>Actuator</h3><p>Actuator是spring boot的一个附加功能,可帮助你在应用程序生产环境时监视和管理应用程序。</p><p>可以使用HTTP的各种请求来监管,审计,收集应用的运行情况.返回的是json</p><p>缺点：没有可视化界面。</p><p>在springboot2.0中，Actuator的端点（endpoint）现在默认映射到/application，比如，/info 端点现在就是在/application/info。但你可以使用management.context-path来覆盖此默认值。</p><h4 id="POM-16"><a href="#POM-16" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Actuator 通过下面的配置启用所有的监控端点，默认情况下，这些端点是禁用的；</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="Actuator访问路径"><a href="#Actuator访问路径" class="headerlink" title="Actuator访问路径"></a>Actuator访问路径</h4><p>通过actuator/+端点名就可以获取相应的信息。</p><table><thead><tr><th>路径</th><th>作用</th></tr></thead><tbody><tr><td>/actuator/beans</td><td>显示应用程序中所有Spring bean的完整列表。</td></tr><tr><td>/actuator/configprops</td><td>显示所有配置信息。</td></tr><tr><td>/actuator/env</td><td>陈列所有的环境变量。</td></tr><tr><td>/actuator/mappings</td><td>显示所有@RequestMapping的url整理列表。</td></tr><tr><td>/actuator/health</td><td>显示应用程序运行状况信息 up表示成功 down失败</td></tr><tr><td>/actuator/info</td><td>查看自定义应用信息</td></tr></tbody></table><h3 id="Admin-UI分布式微服务监控中心"><a href="#Admin-UI分布式微服务监控中心" class="headerlink" title="Admin-UI分布式微服务监控中心"></a>Admin-UI分布式微服务监控中心</h3><p>Admin-UI底层使用actuator，实现监控信息 的界面</p><h4 id="POM-17"><a href="#POM-17" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--服务端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jolokia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jolokia-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.googlecode.json-simple<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="application-yml配置文件"><a href="#application-yml配置文件" class="headerlink" title="application.yml配置文件"></a>application.yml配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: spring-boot-admin-server</span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line">spring:</span><br><span class="line">  boot:</span><br><span class="line">    admin:</span><br><span class="line">      client:</span><br><span class="line">        url: http:<span class="comment">//localhost:8080</span></span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line">  </span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: <span class="string">"*"</span></span><br><span class="line">  endpoint:</span><br><span class="line">    health:</span><br><span class="line">      show-details: ALWAYS</span><br></pre></td></tr></table></figure><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="扫包优化"><a href="#扫包优化" class="headerlink" title="扫包优化"></a>扫包优化</h3><p>默认情况下，我们会使用 <code>@SpringBootApplication</code> 注解来自动获取应用的配置信息，但这样也会给应用带来一些副作用。使用这个注解后，会触发自动配置（ auto-configuration ）和 组件扫描 （ component scanning ），这跟使用 <code>@Configuration</code>、<code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code> 三个注解的作用是一样的。这样做给开发带来方便的同时，也会有三方面的影响：</p><p>1、会导致项目启动时间变长。当启动一个大的应用程序,或将做大量的集成测试启动应用程序时，影响会特别明显。</p><p>2、会加载一些不需要的多余的实例（beans）。</p><p>3、会增加 CPU 消耗。</p><p>针对以上三个情况，我们可以移除 @SpringBootApplication 和 @ComponentScan 两个注解来禁用组件自动扫描，然后在我们需要的 bean 上进行显式配置。</p><h3 id="SpringBoot-JVM参数调优"><a href="#SpringBoot-JVM参数调优" class="headerlink" title="SpringBoot JVM参数调优"></a>SpringBoot JVM参数调优</h3><h5 id="各种参数"><a href="#各种参数" class="headerlink" title="各种参数"></a>各种参数</h5><table><thead><tr><th>参数名称</th><th>含义</th><th>默认值</th><th></th></tr></thead><tbody><tr><td>-Xms</td><td>初始堆大小</td><td>物理内存的1/64(&lt;1GB)</td><td>默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.</td></tr><tr><td>-Xmx</td><td>最大堆大小</td><td>物理内存的1/4(&lt;1GB)</td><td>默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制</td></tr><tr><td>-Xmn</td><td>年轻代大小(1.4or lator)</td><td></td><td>注意：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。 整个堆大小=年轻代大小 + 年老代大小 + 持久代大小. 增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8</td></tr><tr><td>-XX:NewSize</td><td>设置年轻代大小(for 1.3/1.4)</td><td></td><td></td></tr><tr><td>-XX:MaxNewSize</td><td>年轻代最大值(for 1.3/1.4)</td><td></td><td></td></tr><tr><td>-XX:PermSize</td><td>设置持久代(perm gen)初始值</td><td>物理内存的1/64</td><td></td></tr><tr><td>-XX:MaxPermSize</td><td>设置持久代最大值</td><td>物理内存的1/4</td><td></td></tr><tr><td>-Xss</td><td>每个线程的堆栈大小</td><td></td><td>JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.更具应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右 一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。（校长） 和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:”” -Xss is translated in a VM flag named ThreadStackSize” 一般设置这个值就可以了。</td></tr><tr><td>-XX:ThreadStackSize</td><td>Thread Stack Size</td><td></td><td>(0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.]</td></tr><tr><td>-XX:NewRatio</td><td>年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</td><td></td><td>-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5 Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。</td></tr><tr><td>-XX:SurvivorRatio</td><td>Eden区与Survivor区的大小比值</td><td></td><td>设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10</td></tr><tr><td>-XX:LargePageSizeInBytes</td><td>内存页的大小不可设置过大， 会影响Perm的大小</td><td></td><td>=128m</td></tr><tr><td>-XX:+UseFastAccessorMethods</td><td>原始类型的快速优化</td><td></td><td></td></tr><tr><td>-XX:+DisableExplicitGC</td><td>关闭System.gc()</td><td></td><td>这个参数需要严格的测试</td></tr><tr><td>-XX:MaxTenuringThreshold</td><td>垃圾最大年龄</td><td></td><td>如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率 该参数只有在串行GC时才有效.</td></tr><tr><td>-XX:+AggressiveOpts</td><td>加快编译</td><td></td><td></td></tr><tr><td>-XX:+UseBiasedLocking</td><td>锁机制的性能改善</td><td></td><td></td></tr><tr><td>-Xnoclassgc</td><td>禁用垃圾回收</td><td></td><td></td></tr><tr><td>-XX:SoftRefLRUPolicyMSPerMB</td><td>每兆堆空闲空间中SoftReference的存活时间</td><td>1s</td><td>softly reachable objects will remain alive for some amount of time after the last time they were referenced. The default value is one second of lifetime per free megabyte in the heap</td></tr><tr><td>-XX:PretenureSizeThreshold</td><td>对象超过多大是直接在旧生代分配</td><td>0</td><td>单位字节 新生代采用Parallel Scavenge GC时无效 另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.</td></tr><tr><td>-XX:TLABWasteTargetPercent</td><td>TLAB占eden区的百分比</td><td>1%</td><td></td></tr><tr><td>-XX:+CollectGen0First</td><td>FullGC时是否先YGC</td><td>false</td></tr></tbody></table><h5 id="调优策略"><a href="#调优策略" class="headerlink" title="调优策略"></a>调优策略</h5><ol><li>初始化堆内存和最大堆相同</li><li>减少垃圾回收次数</li></ol><h5 id="内部调优"><a href="#内部调优" class="headerlink" title="内部调优"></a>内部调优</h5><p><img src="/2018/08/04/springboot/4.png" alt="1533633207629"></p><p>输入 -XX:+PrintGCDetails 是为了在控制台显示回收的信息</p><p><img src="/2018/08/04/springboot/5.png" alt="1533633302622"></p><h5 id="外部调优"><a href="#外部调优" class="headerlink" title="外部调优"></a>外部调优</h5><p>进入对应jar的目录，在CMD输入<code>java -server -Xms32m -Xmx32m  -jar springboot.jar</code> </p><h5 id="使用工具java-visual-vm"><a href="#使用工具java-visual-vm" class="headerlink" title="使用工具java visual vm"></a>使用工具java visual vm</h5><p><img src="/2018/08/04/springboot/6.jpg" alt="1533633302622"></p><h5 id="使用工具java-console"><a href="#使用工具java-console" class="headerlink" title="使用工具java console"></a>使用工具java console</h5><p><img src="/2018/08/04/springboot/7.png" alt="1533633885354"></p><h3 id="将Servlet容器从Tomcat变成Undertow"><a href="#将Servlet容器从Tomcat变成Undertow" class="headerlink" title="将Servlet容器从Tomcat变成Undertow"></a>将Servlet容器从Tomcat变成Undertow</h3><p>Undertow 是一个采用 Java 开发的灵活的高性能 Web 服务器，提供包括阻塞和基于 NIO 的非堵塞机制。Undertow 是红帽公司的开源产品，是 JBoss默认的 Web 服务器。👇</p><p><a href="http://undertow.io/" target="_blank" rel="noopener">Undertow</a></p><h4 id="POM-18"><a href="#POM-18" class="headerlink" title="POM"></a>POM</h4><p>首先，从依赖信息里移除 Tomcat 配置 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后添加 Undertow：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Tomcat-优化"><a href="#Tomcat-优化" class="headerlink" title="Tomcat 优化"></a>Tomcat 优化</h3><p>见👉<a href="https://spring.io/blog/2015/12/10/spring-boot-memory-performance" target="_blank" rel="noopener">Spring Boot Memory Performance</a></p><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>热部署，就是在应用程序在不停止的情况下，自动实现新的部署</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>使用类加载器classroad来检测字节码文件，然后重新加载到jvm内存中</p><p>第一步：检测本地<code>.class</code>文件变动（版本号，修改时间不一样）</p><p>第二步：自动监听，实现部署</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>本地开发时，可以提高运行环境</p><h3 id="Dev-tools"><a href="#Dev-tools" class="headerlink" title="Dev-tools"></a>Dev-tools</h3><p>spring-boot-devtools 是一个为开发者服务的一个模块，其中最重要的功能就是自动应用代码更改到最新的App上面去</p><h4 id="POM-19"><a href="#POM-19" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><ol><li>devtools会监听classpath下的文件变动，并且会立即重启应用（发生在保存时机），因为其采用的虚拟机机制，该项重启是很快的。  </li><li>devtools可以实现页面热部署（即页面修改后会立即生效，这个可以直接在application.properties文件中配置spring.thymeleaf.cache=false来实现(注意：不同的模板配置不一样)  </li></ol><h2 id="发布打包"><a href="#发布打包" class="headerlink" title="发布打包"></a>发布打包</h2><h3 id="Jar类型打包方式"><a href="#Jar类型打包方式" class="headerlink" title="Jar类型打包方式"></a>Jar类型打包方式</h3><p>1.使用mvn clean  package 打包</p><p>2.使用java –jar 包名</p><h3 id="war类型打包方式"><a href="#war类型打包方式" class="headerlink" title="war类型打包方式"></a>war类型打包方式</h3><p>1.使用mvn celan package 打包</p><p>2.使用java –jar 包名 </p><h3 id="外部Tomcat运行"><a href="#外部Tomcat运行" class="headerlink" title="外部Tomcat运行"></a>外部Tomcat运行</h3><p>1.使用mvn celan package 打包</p><p>2.将war包 放入到tomcat webapps下运行即可。</p><p>注意:springboot2.0内置tomcat8.5.25，建议使用外部Tomcat9.0版本运行即可,否则报错版本不兼容。</p><h3 id="POM-20"><a href="#POM-20" class="headerlink" title="POM"></a>POM</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maimClass</span>&gt;</span>com.itmayiedu.app.App<span class="tag">&lt;/<span class="name">maimClass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://blog.didispace.com/springbootdata1/" target="_blank" rel="noopener">JdbcTemplate</a></p><p><a href="https://blog.csdn.net/qq_28988969/article/details/78082116" target="_blank" rel="noopener">SpringBoot分页插件PageHelper</a></p><p><a href="https://www.cnblogs.com/arli/p/6914057.html" target="_blank" rel="noopener">jpa</a></p><p><a href="http://www.spring4all.com/article/558" target="_blank" rel="noopener">Spring For All 社区 Spring 官方教程翻译</a></p><p><a href="https://www.cnblogs.com/gdpuzxs/p/7222309.html" target="_blank" rel="noopener">SpringBoot使用Redis缓存</a></p><p><a href="https://blog.csdn.net/u010889990/article/details/78883764" target="_blank" rel="noopener">Spring Boot Admin简单使用</a></p><p><a href="https://blog.csdn.net/github_32521685/article/details/50463895" target="_blank" rel="noopener">Spring Boot 性能优化</a></p><p><a href="https://blog.csdn.net/u013970971/article/details/79468356" target="_blank" rel="noopener">WebFlux</a></p><p>感谢以上大大们~！</p><p>广告时间：想要了解更多精彩新姿势？请访问<a href="https://tengshe789.github.io/">我的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近再研究springboot的原理😋颇有收获，现在让我分享一下springboot如何使用吧~&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.tengshe789.tech/&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
      <category term="Spring" scheme="https://tengshe789.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>安利软件-如何一键装B</title>
    <link href="https://tengshe789.github.io/2018/08/02/%E5%A6%82%E4%BD%95%E4%B8%80%E9%94%AE%E8%A3%85B/"/>
    <id>https://tengshe789.github.io/2018/08/02/如何一键装B/</id>
    <published>2018-08-02T05:14:30.000Z</published>
    <updated>2019-11-20T13:39:41.255Z</updated>
    
    <content type="html"><![CDATA[<p>今天教大家如果高大上的装B！</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p><a href="https://github.com/WWILLV/GodOfHacker" target="_blank" rel="noopener">https://github.com/WWILLV/GodOfHacker</a></p><p>克隆软件</p><h3 id="第二部"><a href="#第二部" class="headerlink" title="第二部"></a>第二部</h3><p>使用</p><p><img src="/2018/08/02/如何一键装B/1533187094163.png" alt="1533187094163"></p><p><img src="/2018/08/02/如何一键装B/1533187121497.png" alt="1533187121497"></p><p><img src="/2018/08/02/如何一键装B/1533187138329.png" alt="1533187138329"></p><p>不谢哦😏</p><p>结束 此片完了~ 想要了解更多精彩新姿势？请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> .</p><p>本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，juejin同步发出。如有雷同，缘分呢兄弟。赶快加个好友~ </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天教大家如果高大上的装B！&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.tengshe789.tech/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的博客&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;第一步&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="日常" scheme="https://tengshe789.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="Windows10" scheme="https://tengshe789.github.io/tags/Windows10/"/>
    
      <category term="软件教学" scheme="https://tengshe789.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%95%99%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>记一次失败的redis安装</title>
    <link href="https://tengshe789.github.io/2018/08/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84redis%E5%AE%89%E8%A3%85/"/>
    <id>https://tengshe789.github.io/2018/08/02/记一次失败的redis安装/</id>
    <published>2018-08-02T03:16:35.000Z</published>
    <updated>2019-11-20T13:39:41.559Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚看见群友说VPS又搞年中特价了，看来看去，选了个年付$9.99的CN2线路的KVM VPS，心里美滋滋。然而这家的最小化centOS居然很多基础运行环境都不装，甚是头疼。接下来我来分享一下我装机的过程</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h3 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h3><p>首先，用sftp（妈蛋竟然没有内置wget）下载好redis，进入redis目录</p><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">yum -y install make</span><br><span class="line">yum install gcc</span><br></pre></td></tr></table></figure><p>装好make等环境，make 一下，报错了：</p><p><img src="/2018/08/02/记一次失败的redis安装/1533180420775.png" alt="1533180420775"></p><p>图是我从csdn截的，我和他的错误一模一样。查了查原因，是因为，redame中有这样一句话：</p><blockquote><p>Allocator   ———     Selecting a non-default memory allocator when building Redis is done by setting   the <code>MALLOC</code> environment variable. Redis is compiled and linked against libc   malloc by default, with the exception of jemalloc being the default on Linux   systems. This default was picked because jemalloc has proven to have fewer   fragmentation problems than libc malloc.     To force compiling against libc malloc, use:         % make MALLOC=libc     To compile against jemalloc on Mac OS X systems, use:         % make MALLOC=jemalloc </p></blockquote><p>它说，在构建Redis时选择非默认内存分配器是通过设置完成的 <code>MALLOC</code>环境变量。 Redis是针对libc编译和链接的 默认情况下为malloc，但jemalloc是Linux上的默认设置系统。 </p><p>所以，要执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make MALLOC=libc</span><br></pre></td></tr></table></figure><p>然后执行<code>make &amp;&amp; make install</code>  安装redis</p><p><img src="/2018/08/02/记一次失败的redis安装/1533180709607.png" alt="1533180709607"></p><p>大功告成！</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>接下来改<strong>redis配置文件</strong></p><p><img src="/2018/08/02/记一次失败的redis安装/1533181103111.png" alt="1533181103111"></p><p>绑定0.0.0.0，及允许任意服务器访问redis</p><p><img src="/2018/08/02/记一次失败的redis安装/1533181255094.png" alt="1533181255094"></p><p>将daemonize改成yes，及允许后台执行</p><p><img src="/2018/08/02/记一次失败的redis安装/1533181462841.png" alt="1533181462841"></p><p>访问密码requirepass设置成自己的</p><h3 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h3><p>用刚刚的配置文件启动redis：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-server ./redis.conf</span><br><span class="line">ps -ef |grep redis</span><br></pre></td></tr></table></figure><p><img src="/2018/08/02/记一次失败的redis安装/1533181897184.png" alt="1533181897184"></p><p>然后进入utils目录下，运行生成系统服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install_server.sh</span><br></pre></td></tr></table></figure><p><img src="/2018/08/02/记一次失败的redis安装/1533182026640.png" alt="1533182026640"></p><p><img src="/2018/08/02/记一次失败的redis安装/1533182420542.png" alt="1533182420542"></p><h3 id="Redis配置文件样例"><a href="#Redis配置文件样例" class="headerlink" title="Redis配置文件样例"></a>Redis配置文件样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br></pre></td><td class="code"><pre><span class="line"># Redis配置文件样例</span><br><span class="line"></span><br><span class="line"># Note on units: when memory size is needed, it is possible to specifiy</span><br><span class="line"># it in the usual form of 1k 5GB 4M and so forth:</span><br><span class="line">#</span><br><span class="line"># 1k =&gt; 1000 bytes</span><br><span class="line"># 1kb =&gt; 1024 bytes</span><br><span class="line"># 1m =&gt; 1000000 bytes</span><br><span class="line"># 1mb =&gt; 1024*1024 bytes</span><br><span class="line"># 1g =&gt; 1000000000 bytes</span><br><span class="line"># 1gb =&gt; 1024*1024*1024 bytes</span><br><span class="line">#</span><br><span class="line"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span><br><span class="line"></span><br><span class="line"># Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</span><br><span class="line"># 启用守护进程后，Redis会把pid写到一个pidfile中，在/var/run/redis.pid</span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"># 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line"></span><br><span class="line"># 指定Redis监听端口，默认端口为6379</span><br><span class="line"># 如果指定0端口，表示Redis不监听TCP连接</span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"># 绑定的主机地址</span><br><span class="line"># 你可以绑定单一接口，如果没有绑定，所有接口都会监听到来的连接</span><br><span class="line"># bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"># Specify the path for the unix socket that will be used to listen for</span><br><span class="line"># incoming connections. There is no default, so Redis will not listen</span><br><span class="line"># on a unix socket when not specified.</span><br><span class="line">#</span><br><span class="line"># unixsocket /tmp/redis.sock</span><br><span class="line"># unixsocketperm 755</span><br><span class="line"></span><br><span class="line"># 当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"># 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span><br><span class="line"># debug (很多信息, 对开发／测试比较有用)</span><br><span class="line"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="line"># notice (moderately verbose, what you want in production probably)</span><br><span class="line"># warning (only very important / critical messages are logged)</span><br><span class="line">loglevel verbose</span><br><span class="line"></span><br><span class="line"># 日志记录方式，默认为标准输出，如果配置为redis为守护进程方式运行，而这里又配置为标准输出，则日志将会发送给/dev/null</span><br><span class="line">logfile stdout</span><br><span class="line"></span><br><span class="line"># To enable logging to the system logger, just set &apos;syslog-enabled&apos; to yes,</span><br><span class="line"># and optionally update the other syslog parameters to suit your needs.</span><br><span class="line"># syslog-enabled no</span><br><span class="line"></span><br><span class="line"># Specify the syslog identity.</span><br><span class="line"># syslog-ident redis</span><br><span class="line"></span><br><span class="line"># Specify the syslog facility.  Must be USER or between LOCAL0-LOCAL7.</span><br><span class="line"># syslog-facility local0</span><br><span class="line"></span><br><span class="line"># 设置数据库的数量，默认数据库为0，可以使用select &lt;dbid&gt;命令在连接上指定数据库id</span><br><span class="line"># dbid是从0到‘databases’-1的数目</span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line">################################ SNAPSHOTTING  #################################</span><br><span class="line"># 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span><br><span class="line"># Save the DB on disk:</span><br><span class="line">#</span><br><span class="line">#   save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line">#</span><br><span class="line">#   Will save the DB if both the given number of seconds and the given</span><br><span class="line">#   number of write operations against the DB occurred.</span><br><span class="line">#</span><br><span class="line">#   满足以下条件将会同步数据:</span><br><span class="line">#   900秒（15分钟）内有1个更改</span><br><span class="line">#   300秒（5分钟）内有10个更改</span><br><span class="line">#   60秒内有10000个更改</span><br><span class="line">#   Note: 可以把所有“save”行注释掉，这样就取消同步操作了</span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"># 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"># 指定本地数据库文件名，默认值为dump.rdb</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"># 工作目录.</span><br><span class="line"># 指定本地数据库存放目录，文件名由上一个dbfilename配置项指定</span><br><span class="line"># </span><br><span class="line"># Also the Append Only File will be created inside this directory.</span><br><span class="line"># </span><br><span class="line"># 注意，这里只能指定一个目录，不能指定文件名</span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line">################################# REPLICATION #################################</span><br><span class="line"></span><br><span class="line"># 主从复制。使用slaveof从 Redis服务器复制一个Redis实例。注意，该配置仅限于当前slave有效</span><br><span class="line"># so for example it is possible to configure the slave to save the DB with a</span><br><span class="line"># different interval, or to listen to another port, and so on.</span><br><span class="line"># 设置当本机为slav服务时，设置master服务的ip地址及端口，在Redis启动时，它会自动从master进行数据同步</span><br><span class="line"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 当master服务设置了密码保护时，slav服务连接master的密码</span><br><span class="line"># 下文的“requirepass”配置项可以指定密码</span><br><span class="line"># masterauth &lt;master-password&gt;</span><br><span class="line"></span><br><span class="line"># When a slave lost the connection with the master, or when the replication</span><br><span class="line"># is still in progress, the slave can act in two different ways:</span><br><span class="line">#</span><br><span class="line"># 1) if slave-serve-stale-data is set to &apos;yes&apos; (the default) the slave will</span><br><span class="line">#    still reply to client requests, possibly with out of data data, or the</span><br><span class="line">#    data set may just be empty if this is the first synchronization.</span><br><span class="line">#</span><br><span class="line"># 2) if slave-serve-stale data is set to &apos;no&apos; the slave will reply with</span><br><span class="line">#    an error &quot;SYNC with master in progress&quot; to all the kind of commands</span><br><span class="line">#    but to INFO and SLAVEOF.</span><br><span class="line">#</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"># Slaves send PINGs to server in a predefined interval. It&apos;s possible to change</span><br><span class="line"># this interval with the repl_ping_slave_period option. The default value is 10</span><br><span class="line"># seconds.</span><br><span class="line">#</span><br><span class="line"># repl-ping-slave-period 10</span><br><span class="line"></span><br><span class="line"># The following option sets a timeout for both Bulk transfer I/O timeout and</span><br><span class="line"># master data or ping response timeout. The default value is 60 seconds.</span><br><span class="line">#</span><br><span class="line"># It is important to make sure that this value is greater than the value</span><br><span class="line"># specified for repl-ping-slave-period otherwise a timeout will be detected</span><br><span class="line"># every time there is low traffic between the master and the slave.</span><br><span class="line">#</span><br><span class="line"># repl-timeout 60</span><br><span class="line"></span><br><span class="line">################################## SECURITY ###################################</span><br><span class="line"></span><br><span class="line"># Warning: since Redis is pretty fast an outside user can try up to</span><br><span class="line"># 150k passwords per second against a good box. This means that you should</span><br><span class="line"># use a very strong password otherwise it will be very easy to break.</span><br><span class="line"># 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过auth &lt;password&gt;命令提供密码，默认关闭</span><br><span class="line"># requirepass foobared</span><br><span class="line"></span><br><span class="line"># Command renaming.</span><br><span class="line">#</span><br><span class="line"># It is possilbe to change the name of dangerous commands in a shared</span><br><span class="line"># environment. For instance the CONFIG command may be renamed into something</span><br><span class="line"># of hard to guess so that it will be still available for internal-use</span><br><span class="line"># tools but not available for general clients.</span><br><span class="line">#</span><br><span class="line"># Example:</span><br><span class="line">#</span><br><span class="line"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><br><span class="line">#</span><br><span class="line"># It is also possilbe to completely kill a command renaming it into</span><br><span class="line"># an empty string:</span><br><span class="line">#</span><br><span class="line"># rename-command CONFIG &quot;&quot;</span><br><span class="line"></span><br><span class="line">################################### LIMITS ####################################</span><br><span class="line"></span><br><span class="line"># 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，</span><br><span class="line"># 如果设置maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max Number of clients reached错误信息</span><br><span class="line"># maxclients 128</span><br><span class="line"></span><br><span class="line"># Don&apos;t use more memory than the specified amount of bytes.</span><br><span class="line"># When the memory limit is reached Redis will try to remove keys with an</span><br><span class="line"># EXPIRE set. It will try to start freeing keys that are going to expire</span><br><span class="line"># in little time and preserve keys with a longer time to live.</span><br><span class="line"># Redis will also try to remove objects from free lists if possible.</span><br><span class="line">#</span><br><span class="line"># If all this fails, Redis will start to reply with errors to commands</span><br><span class="line"># that will use more memory, like SET, LPUSH, and so on, and will continue</span><br><span class="line"># to reply to most read-only commands like GET.</span><br><span class="line">#</span><br><span class="line"># WARNING: maxmemory can be a good idea mainly if you want to use Redis as a</span><br><span class="line"># &apos;state&apos; server or cache, not as a real DB. When Redis is used as a real</span><br><span class="line"># database the memory usage will grow over the weeks, it will be obvious if</span><br><span class="line"># it is going to use too much memory in the long run, and you&apos;ll have the time</span><br><span class="line"># to upgrade. With maxmemory after the limit is reached you&apos;ll start to get</span><br><span class="line"># errors for write operations, and this may even lead to DB inconsistency.</span><br><span class="line"># 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，</span><br><span class="line"># 当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。</span><br><span class="line"># Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span><br><span class="line"># maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span><br><span class="line"># is reached? You can select among five behavior:</span><br><span class="line"># </span><br><span class="line"># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</span><br><span class="line"># allkeys-lru -&gt; remove any key accordingly to the LRU algorithm</span><br><span class="line"># volatile-random -&gt; remove a random key with an expire set</span><br><span class="line"># allkeys-&gt;random -&gt; remove a random key, any key</span><br><span class="line"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</span><br><span class="line"># noeviction -&gt; don&apos;t expire at all, just return an error on write operations</span><br><span class="line"># </span><br><span class="line"># Note: with all the kind of policies, Redis will return an error on write</span><br><span class="line">#       operations, when there are not suitable keys for eviction.</span><br><span class="line">#</span><br><span class="line">#       At the date of writing this commands are: set setnx setex append</span><br><span class="line">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span><br><span class="line">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span><br><span class="line">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span><br><span class="line">#       getset mset msetnx exec sort</span><br><span class="line">#</span><br><span class="line"># The default is:</span><br><span class="line">#</span><br><span class="line"># maxmemory-policy volatile-lru</span><br><span class="line"></span><br><span class="line"># LRU and minimal TTL algorithms are not precise algorithms but approximated</span><br><span class="line"># algorithms (in order to save memory), so you can select as well the sample</span><br><span class="line"># size to check. For instance for default Redis will check three keys and</span><br><span class="line"># pick the one that was used less recently, you can change the sample size</span><br><span class="line"># using the following configuration directive.</span><br><span class="line">#</span><br><span class="line"># maxmemory-samples 3</span><br><span class="line"></span><br><span class="line">############################## APPEND ONLY MODE ###############################</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line"># Note that you can have both the async dumps and the append only file if you</span><br><span class="line"># like (you have to comment the &quot;save&quot; statements above to disable the dumps).</span><br><span class="line"># Still if append only mode is enabled Redis will load the data from the</span><br><span class="line"># log file at startup ignoring the dump.rdb file.</span><br><span class="line"># 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。</span><br><span class="line"># 因为redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</span><br><span class="line"># IMPORTANT: Check the BGREWRITEAOF to check how to rewrite the append</span><br><span class="line"># log file in background when it gets too big.</span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"># 指定更新日志文件名，默认为appendonly.aof</span><br><span class="line"># appendfilename appendonly.aof</span><br><span class="line"></span><br><span class="line"># The fsync() call tells the Operating System to actually write data on disk</span><br><span class="line"># instead to wait for more data in the output buffer. Some OS will really flush </span><br><span class="line"># data on disk, some other OS will just try to do it ASAP.</span><br><span class="line"></span><br><span class="line"># 指定更新日志条件，共有3个可选值：</span><br><span class="line"># no:表示等操作系统进行数据缓存同步到磁盘（快）</span><br><span class="line"># always:表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</span><br><span class="line"># everysec:表示每秒同步一次（折衷，默认值）</span><br><span class="line"></span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br><span class="line"></span><br><span class="line"># When the AOF fsync policy is set to always or everysec, and a background</span><br><span class="line"># saving process (a background save or AOF log background rewriting) is</span><br><span class="line"># performing a lot of I/O against the disk, in some Linux configurations</span><br><span class="line"># Redis may block too long on the fsync() call. Note that there is no fix for</span><br><span class="line"># this currently, as even performing fsync in a different thread will block</span><br><span class="line"># our synchronous write(2) call.</span><br><span class="line">#</span><br><span class="line"># In order to mitigate this problem it&apos;s possible to use the following option</span><br><span class="line"># that will prevent fsync() from being called in the main process while a</span><br><span class="line"># BGSAVE or BGREWRITEAOF is in progress.</span><br><span class="line">#</span><br><span class="line"># This means that while another child is saving the durability of Redis is</span><br><span class="line"># the same as &quot;appendfsync none&quot;, that in pratical terms means that it is</span><br><span class="line"># possible to lost up to 30 seconds of log in the worst scenario (with the</span><br><span class="line"># default Linux settings).</span><br><span class="line"># </span><br><span class="line"># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</span><br><span class="line"># &quot;no&quot; that is the safest pick from the point of view of durability.</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"># Automatic rewrite of the append only file.</span><br><span class="line"># Redis is able to automatically rewrite the log file implicitly calling</span><br><span class="line"># BGREWRITEAOF when the AOF log size will growth by the specified percentage.</span><br><span class="line"># </span><br><span class="line"># This is how it works: Redis remembers the size of the AOF file after the</span><br><span class="line"># latest rewrite (or if no rewrite happened since the restart, the size of</span><br><span class="line"># the AOF at startup is used).</span><br><span class="line">#</span><br><span class="line"># This base size is compared to the current size. If the current size is</span><br><span class="line"># bigger than the specified percentage, the rewrite is triggered. Also</span><br><span class="line"># you need to specify a minimal size for the AOF file to be rewritten, this</span><br><span class="line"># is useful to avoid rewriting the AOF file even if the percentage increase</span><br><span class="line"># is reached but it is still pretty small.</span><br><span class="line">#</span><br><span class="line"># Specify a precentage of zero in order to disable the automatic AOF</span><br><span class="line"># rewrite feature.</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line">################################## SLOW LOG ###################################</span><br><span class="line"></span><br><span class="line"># The Redis Slow Log is a system to log queries that exceeded a specified</span><br><span class="line"># execution time. The execution time does not include the I/O operations</span><br><span class="line"># like talking with the client, sending the reply and so forth,</span><br><span class="line"># but just the time needed to actually execute the command (this is the only</span><br><span class="line"># stage of command execution where the thread is blocked and can not serve</span><br><span class="line"># other requests in the meantime).</span><br><span class="line"># </span><br><span class="line"># You can configure the slow log with two parameters: one tells Redis</span><br><span class="line"># what is the execution time, in microseconds, to exceed in order for the</span><br><span class="line"># command to get logged, and the other parameter is the length of the</span><br><span class="line"># slow log. When a new command is logged the oldest one is removed from the</span><br><span class="line"># queue of logged commands.</span><br><span class="line"></span><br><span class="line"># The following time is expressed in microseconds, so 1000000 is equivalent</span><br><span class="line"># to one second. Note that a negative number disables the slow log, while</span><br><span class="line"># a value of zero forces the logging of every command.</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"># There is no limit to this length. Just be aware that it will consume memory.</span><br><span class="line"># You can reclaim memory used by the slow log with SLOWLOG RESET.</span><br><span class="line">slowlog-max-len 1024</span><br><span class="line"></span><br><span class="line">################################ VIRTUAL MEMORY ###############################</span><br><span class="line"></span><br><span class="line">### WARNING! Virtual Memory is deprecated in Redis 2.4</span><br><span class="line">### The use of Virtual Memory is strongly discouraged.</span><br><span class="line"></span><br><span class="line">### WARNING! Virtual Memory is deprecated in Redis 2.4</span><br><span class="line">### The use of Virtual Memory is strongly discouraged.</span><br><span class="line"></span><br><span class="line"># Virtual Memory allows Redis to work with datasets bigger than the actual</span><br><span class="line"># amount of RAM needed to hold the whole dataset in memory.</span><br><span class="line"># In order to do so very used keys are taken in memory while the other keys</span><br><span class="line"># are swapped into a swap file, similarly to what operating systems do</span><br><span class="line"># with memory pages.</span><br><span class="line"># 指定是否启用虚拟内存机制，默认值为no，</span><br><span class="line"># VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中</span><br><span class="line"># 把vm-enabled设置为yes，根据需要设置好接下来的三个VM参数，就可以启动VM了</span><br><span class="line">vm-enabled no</span><br><span class="line"># vm-enabled yes</span><br><span class="line"></span><br><span class="line"># This is the path of the Redis swap file. As you can guess, swap files</span><br><span class="line"># can&apos;t be shared by different Redis instances, so make sure to use a swap</span><br><span class="line"># file for every redis process you are running. Redis will complain if the</span><br><span class="line"># swap file is already in use.</span><br><span class="line">#</span><br><span class="line"># Redis交换文件最好的存储是SSD（固态硬盘）</span><br><span class="line"># 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</span><br><span class="line"># *** WARNING *** if you are using a shared hosting the default of putting</span><br><span class="line"># the swap file under /tmp is not secure. Create a dir with access granted</span><br><span class="line"># only to Redis user and configure Redis to create the swap file there.</span><br><span class="line">vm-swap-file /tmp/redis.swap</span><br><span class="line"></span><br><span class="line"># With vm-max-memory 0 the system will swap everything it can. Not a good</span><br><span class="line"># default, just specify the max amount of RAM you can in bytes, but it&apos;s</span><br><span class="line"># better to leave some margin. For instance specify an amount of RAM</span><br><span class="line"># that&apos;s more or less between 60 and 80% of your free RAM.</span><br><span class="line"># 将所有大于vm-max-memory的数据存入虚拟内存，无论vm-max-memory设置多少，所有索引数据都是内存存储的（Redis的索引数据就是keys）</span><br><span class="line"># 也就是说当vm-max-memory设置为0的时候，其实是所有value都存在于磁盘。默认值为0</span><br><span class="line">vm-max-memory 0</span><br><span class="line"></span><br><span class="line"># Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的数据大小来设定的。</span><br><span class="line"># 建议如果存储很多小对象，page大小最后设置为32或64bytes；如果存储很大的对象，则可以使用更大的page，如果不确定，就使用默认值</span><br><span class="line">vm-page-size 32</span><br><span class="line"></span><br><span class="line"># 设置swap文件中的page数量由于页表（一种表示页面空闲或使用的bitmap）是存放在内存中的，在磁盘上每8个pages将消耗1byte的内存</span><br><span class="line"># swap空间总容量为 vm-page-size * vm-pages</span><br><span class="line">#</span><br><span class="line"># With the default of 32-bytes memory pages and 134217728 pages Redis will</span><br><span class="line"># use a 4 GB swap file, that will use 16 MB of RAM for the page table.</span><br><span class="line">#</span><br><span class="line"># It&apos;s better to use the smallest acceptable value for your application,</span><br><span class="line"># but the default is large in order to work in most conditions.</span><br><span class="line">vm-pages 134217728</span><br><span class="line"></span><br><span class="line"># Max number of VM I/O threads running at the same time.</span><br><span class="line"># This threads are used to read/write data from/to swap file, since they</span><br><span class="line"># also encode and decode objects from disk to memory or the reverse, a bigger</span><br><span class="line"># number of threads can help with big objects even if they can&apos;t help with</span><br><span class="line"># I/O itself as the physical device may not be able to couple with many</span><br><span class="line"># reads/writes operations at the same time.</span><br><span class="line"># 设置访问swap文件的I/O线程数，最后不要超过机器的核数，如果设置为0，那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟，默认值为4</span><br><span class="line">vm-max-threads 4</span><br><span class="line"></span><br><span class="line">############################### ADVANCED CONFIG ###############################</span><br><span class="line"></span><br><span class="line"># Hashes are encoded in a special way (much more memory efficient) when they</span><br><span class="line"># have at max a given numer of elements, and the biggest element does not</span><br><span class="line"># exceed a given threshold. You can configure this limits with the following</span><br><span class="line"># configuration directives.</span><br><span class="line"># 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</span><br><span class="line">hash-max-zipmap-entries 512</span><br><span class="line">hash-max-zipmap-value 64</span><br><span class="line"></span><br><span class="line"># Similarly to hashes, small lists are also encoded in a special way in order</span><br><span class="line"># to save a lot of space. The special representation is only used when</span><br><span class="line"># you are under the following limits:</span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"># Sets have a special encoding in just one case: when a set is composed</span><br><span class="line"># of just strings that happens to be integers in radix 10 in the range</span><br><span class="line"># of 64 bit signed integers.</span><br><span class="line"># The following configuration setting sets the limit in the size of the</span><br><span class="line"># set in order to use this special memory saving encoding.</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"># Similarly to hashes and lists, sorted sets are also specially encoded in</span><br><span class="line"># order to save a lot of space. This encoding is only used when the length and</span><br><span class="line"># elements of a sorted set are below the following limits:</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span><br><span class="line"># order to help rehashing the main Redis hash table (the one mapping top-level</span><br><span class="line"># keys to values). The hash table implementation redis uses (see dict.c)</span><br><span class="line"># performs a lazy rehashing: the more operation you run into an hash table</span><br><span class="line"># that is rhashing, the more rehashing &quot;steps&quot; are performed, so if the</span><br><span class="line"># server is idle the rehashing is never complete and some more memory is used</span><br><span class="line"># by the hash table.</span><br><span class="line"># </span><br><span class="line"># The default is to use this millisecond 10 times every second in order to</span><br><span class="line"># active rehashing the main dictionaries, freeing memory when possible.</span><br><span class="line">#</span><br><span class="line"># If unsure:</span><br><span class="line"># use &quot;activerehashing no&quot; if you have hard latency requirements and it is</span><br><span class="line"># not a good thing in your environment that Redis can reply form time to time</span><br><span class="line"># to queries with 2 milliseconds delay.</span><br><span class="line"># 指定是否激活重置哈希，默认为开启</span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line">################################## INCLUDES ###################################</span><br><span class="line"></span><br><span class="line"># 指定包含其他的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各实例又拥有自己的特定配置文件</span><br><span class="line"># include /path/to/local.conf</span><br><span class="line"># include /path/to/other.conf</span><br></pre></td></tr></table></figure><h3 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a>完成！</h3><p>结束 <br>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> 本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，缘分呢兄弟。赶快加个好友~  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚刚看见群友说VPS又搞年中特价了，看来看去，选了个年付$9.99的CN2线路的KVM VPS，心里美滋滋。然而这家的最小化centOS居然很多基础运行环境都不装，甚是头疼。接下来我来分享一下我装机的过程&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://tengshe789.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="软件教学" scheme="https://tengshe789.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%95%99%E5%AD%A6/"/>
    
      <category term="redis" scheme="https://tengshe789.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>学好分布式架构=5=-zookeeper</title>
    <link href="https://tengshe789.github.io/2018/07/29/%E6%88%91%E8%A6%81%E5%AD%A6%E5%A5%BD%E5%88%86%E5%B8%83%E5%BC%8F-zookeeper/"/>
    <id>https://tengshe789.github.io/2018/07/29/我要学好分布式-zookeeper/</id>
    <published>2018-07-29T08:02:49.000Z</published>
    <updated>2019-11-20T13:39:41.401Z</updated>
    
    <content type="html"><![CDATA[<p>“学好分布式架构”节目做到第四期了，👏👏👏</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h1 id="分布式概念（前戏）"><a href="#分布式概念（前戏）" class="headerlink" title="分布式概念（前戏）"></a>分布式概念（前戏）</h1><p>了解一个技术，先要掌握它的理论，然后循序渐进。所以，理论来了~</p><p>什么是分布式呢？简单说，分布式系统背后是由一系列的计算机组成的，但用户感知不到背后的逻辑，就像访问单个计算机一样 </p><p><img src="/2018/07/29/我要学好分布式-zookeeper/0.png" alt="分布式概念"></p><h2 id="最基本的特点"><a href="#最基本的特点" class="headerlink" title="最基本的特点"></a>最基本的特点</h2><h4 id="分布性"><a href="#分布性" class="headerlink" title="分布性"></a>分布性</h4><p>服务器的位置可能在不一个位置</p><h4 id="并发性"><a href="#并发性" class="headerlink" title="并发性"></a>并发性</h4><p>程序运行过程中，并发性操作是很常见的。比如同一个分布式系统中的多个节点，同时访问一个共享资源。数据库、分布式存储</p><h4 id="无序性"><a href="#无序性" class="headerlink" title="无序性"></a>无序性</h4><p>进程之间的消息通信，会出现顺序不一致问题</p><h2 id="分布式环境下面临的问题"><a href="#分布式环境下面临的问题" class="headerlink" title="分布式环境下面临的问题"></a>分布式环境下面临的问题</h2><p>分布式的特点决定了它一定会有相应的问题</p><h3 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h3><p>分布式系统的信息通过网络来传输的，而网络本身的不可靠性，因此会涉及到一些网络通信问题</p><h3 id="网络分区-脑裂"><a href="#网络分区-脑裂" class="headerlink" title="网络分区(脑裂)"></a>网络分区(脑裂)</h3><p>什么是脑裂呢？</p><p>在高可用（HA）系统中，当联系2个节点的“心跳线”断开时，本来为一整体、动作协调的HA系统，就分裂成为2个独立的个体。由于相互失去了联系，都以为是对方出了故障。两个节点上的HA软件像“裂脑人”一样，争抢“共享资源”、争起“应用服务”，就会发生严重后果——或者共享资源被瓜分、2边“服务”都起不来了；或者2边“服务”都起来了，但同时读写“共享存储”，导致数据损坏（常见如数据库轮询着的联机日志出错）。 </p><p>而当网络发生异常导致分布式系统中部分节点之间的网络延时不断增大，就会产生脑裂现象，即组成分布式架构的所有节点，只有部分节点能够正常通信</p><h3 id="三态"><a href="#三态" class="headerlink" title="三态"></a>三态</h3><p>在正常的单机环境下，一个程序调用一个接口，正常情况下只有2个状态，成功态和失败态。  但是在分布式环境下，就又多了一种状态，叫做超时态，指的就是在分布式网路通信时，因为网络故障，我的消息一直没有收到返回或者是我的消息没有发送出去。 </p><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>分布式也会有事物问题，即ACID(原子性、一致性、隔离性、持久性)。譬如，如果两台分布式架构的服务器有这相同的功能，当用户操作的时候，你要保存这两台服务器的同时发生同时成功，这就属于事物问题。</p><blockquote><p>1.原子性（Atomicity）</p><p>​    一个原子事务要么完整执行，要么干脆不执行。这意味着，工作单元中的每项任务都必须正确执行。如果有任一任务执行失败，则整个工作单元或事务就会被终止。即此前对数据所作的任何修改都将被撤销。如果所有任务都被成功执行，事务就会被提交，即对数据所作的修改将会是永久性的。</p><p>2.一致性（Consistency）</p><p>​    一致性代表了底层数据存储的完整性。它必须由事务系统和应用开发人员共同来保证。事务系统通过保证事务的原子性，隔离性和持久性来满足这一要求; 应用开发人员则需要保证数据库有适当的约束(主键，引用完整性等)，并且工作单元中所实现的业务逻辑不会导致数据的不一致(即，数据预期所表达的现实业务情况不相一致)。例如，在一次转账过程中，从某一账户中扣除的金额必须与另一账户中存入的金额相等。</p><p>3.隔离性（Isolation）</p><p>​    隔离性意味着事务必须在不干扰其他进程或事务的前提下独立执行。换言之，在事务或工作单元执行完毕之前，其所访问的数据不能受系统其他部分的影响。</p><p>4.持久性（Durability）</p><p>​    持久性表示在某个事务的执行过程中，对数据所作的所有改动都必须在事务成功结束前保存至某种物理存储设备。这样可以保证，所作的修改在任何系统瘫痪时不至于丢失。</p></blockquote><h4 id="中心化和去中心化"><a href="#中心化和去中心化" class="headerlink" title="中心化和去中心化"></a>中心化和去中心化</h4><p>数据库备份一般使用冷备或者热备</p><blockquote><p>热备：一般用于保证服务正常不间断运行，用两台机器作为服务机器，一台用于实际数据库操作应用,另外一台实时的从前者中获取数据以保持数据一致.如果当前的机器熄火,备份的机器立马取代当前的机器继续提供服务</p><p>冷备：.冷备份指在数据库关闭后,进行备份,适用于所有模式的数据库</p></blockquote><p>分布式架构里面，很多的架构思想采用的是去中心化。即在一个分布有众多节点的系统中，每个节点都具有高度自治的特征。节点之间彼此可以自由连接，形成新的连接单元。任何一个节点都可能成为阶段性的中心，但不具备强制性的中心控制功能。节点与节点之间的影响，会通过网络而形成非线性因果关系。这种开放式、扁平化、平等性的系统现象或结构，我们称之为去中心化 </p><p>最典型的是： zookeeper / etcd</p><h4 id="经典的CAP"><a href="#经典的CAP" class="headerlink" title="经典的CAP"></a>经典的CAP</h4><p>C<strong>一致性</strong> （Consistency）: 所有节点上的数据，时刻保持一致</p><p>A<strong>可用性</strong>（Availability）：每个请求都能够收到一个响应，无论响应成功或者失败</p><p>P<strong>分区容错</strong> （Partition-tolerance）：表示系统出现脑裂以后，可能导致某些server与集群中的其他机器失去联系</p><p>无论如何，都只能保证CP或者 AP。<em>CAP理论仅适用于原子读写的Nosql场景，不适用于数据库系统</em></p><h4 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h4><p>基于CAP理论，CAP理论并不适用于数据库事务（因为更新一些错误的数据而导致数据出现紊乱，无论什么样的数据库高可用方案都是徒劳） ，虽然XA事务可以保证数据库在分布式系统下的ACID特性，但是会带来性能方面的影响；</p><p>eBay尝试了一种完全不同的套路，放宽了对事务ACID的要求。提出了BASE理论：</p><p><strong>Basically available</strong>  ： 数据库采用分片模式， 把100W的用户数据分布在5个实例上。如果破坏了其中一个实例，仍然可以保证</p><p>80%的用户可用</p><p><strong>soft-state</strong>：  在基于client-server模式的系统中，server端是否有状态，决定了系统是否具备良好的水平扩展、负载均衡、故障恢复等特性。</p><p>Server端承诺会维护client端状态数据，这个状态仅仅维持一小段时间, 这段时间以后，server端就会丢弃这个状态，恢复正常状态</p><p><strong>Eventually consistent</strong>：数据的最终一致性</p><p>是</p><h1 id="Zookeeper（正片）"><a href="#Zookeeper（正片）" class="headerlink" title="Zookeeper（正片）"></a>Zookeeper（正片）</h1><p>zookeeper是一个开源的分布式数据存储系统，提供分布式数据一致性的解决方案。是由雅虎创建的，基于google chubby。 </p><h2 id="zookeeper是什么"><a href="#zookeeper是什么" class="headerlink" title="zookeeper是什么"></a>zookeeper是什么</h2><p>分布式数据一致性的解决方案</p><h2 id="zookeeper能做什么"><a href="#zookeeper能做什么" class="headerlink" title="zookeeper能做什么"></a>zookeeper能做什么</h2><p>数据的发布/订阅（配置中心:disconf）  、 负载均衡（dubbo利用了zookeeper机制实现负载均衡） 、命名服务、</p><p>master选举(kafka、hadoop、hbase)、分布式队列、分布式锁</p><h3 id="zookeeper特性"><a href="#zookeeper特性" class="headerlink" title="zookeeper特性"></a>zookeeper特性</h3><h4 id="顺序一致性"><a href="#顺序一致性" class="headerlink" title="顺序一致性"></a>顺序一致性</h4><p>从同一个客户端发起的事务请求，最终会严格按照顺序被应用到zookeeper中</p><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>所有的事务请求的处理结果在整个集群中的所有机器上的应用情况是一致的，也就是说，要么整个集群中的所有机器都成功应用了某一事务、要么全都不应用</p><h4 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h4><p>一旦服务器成功应用了某一个事务数据，并且对客户端做了响应，那么这个数据在整个集群中一定是同步并且保留下来的</p><h4 id="实时性"><a href="#实时性" class="headerlink" title="实时性"></a>实时性</h4><p>一旦一个事务被成功应用，客户端就能够立即从服务器端读取到事务变更后的最新数据状态；（zookeeper仅仅保证在一定时间内，近实时）</p><h2 id="zookeeper集群环境"><a href="#zookeeper集群环境" class="headerlink" title="zookeeper集群环境"></a>zookeeper集群环境</h2><p>zookeeper集群, 包含三种角色: leader / follower /observer</p><p> <img src="/2018/07/29/我要学好分布式-zookeeper/1.png" alt="三种角色"></p><p><code>observer</code></p><p>observer 是一种特殊的zookeeper节点。可以<strong>帮助解决zookeeper的扩展性</strong>（如果大量客户端访问我们zookeeper集群，需要增加zookeeper集群机器数量。从而增加zookeeper集群的性能。 导致zookeeper写性能下降， zookeeper的数据变更需要<strong>半数</strong>以上服务器投票通过。造成网络消耗增加投票成本）</p><ol><li><p>observer不参与投票。 <strong>只接收</strong>投票结果。不和follower联系。</p></li><li><p>不属于zookeeper的关键部位。</p></li></ol><p><img src="/2018/07/29/我要学好分布式-zookeeper/6.png" alt="1532939249421"></p><h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><p>可以虚拟机中操作，系统centos7，zookeeper去官方网下稳定版。安装后：</p><h5 id="第一步：-修改配置文件zoo-cfg"><a href="#第一步：-修改配置文件zoo-cfg" class="headerlink" title="第一步： 修改配置文件zoo.cfg"></a>第一步： 修改配置文件zoo.cfg</h5><p><code>server.id=host:port:port</code></p><p>id的取值范围： 1~255； 用id来标识该机器在集群中的机器序号；</p><p>2888是表示follower节点与leader节点交换信息的端口号，要定义成和系统没有冲突的端口号；</p><p>3181 表示leader选举的端口，如果leader节点挂掉了, 需要一个端口来重新选举 </p><p> 栗子：</p><p>server.1=192.168.11.129:2888:3181</p><p>server.2=192.168.11.131:2888:3181</p><p>server.3=192.168.11.135:2888:3181</p><p>如果需要增加observer节点，zoo.cfg中，增加 ;peerType=observer</p><p>server.1=192.168.11.129:2888:3181  </p><p>server.2=192.168.11.135:2888:3181   </p><p>server.3=192.168.111.136:2888:3181:observer</p><h5 id="第二步：创建myid"><a href="#第二步：创建myid" class="headerlink" title="第二步：创建myid"></a>第二步：创建myid</h5><p>在每一个服务器的dataDir目录下创建一个myid的文件，文件就一行数据，数据内容是每台机器对应的server ID的数字</p><p><img src="/2018/07/29/我要学好分布式-zookeeper/2.png" alt="1532938048382"></p><h5 id="第三步：启动zookeeper"><a href="#第三步：启动zookeeper" class="headerlink" title="第三步：启动zookeeper"></a>第三步：启动zookeeper</h5><p><img src="/2018/07/29/我要学好分布式-zookeeper/3.png" alt="1532938153285"></p><p>关掉防火墙</p><p><img src="/2018/07/29/我要学好分布式-zookeeper/5.png" alt="1532938312978"></p><p>看到生成<code>zeekeeper.out</code>这样的一个日志，可以使用<code>tail</code>命令查看</p><p><img src="/2018/07/29/我要学好分布式-zookeeper/4.png" alt="1532938204685"></p><h3 id="Zookeeper中的一些概念"><a href="#Zookeeper中的一些概念" class="headerlink" title="Zookeeper中的一些概念"></a>Zookeeper中的一些概念</h3><h4 id="Zookeeper配置解析"><a href="#Zookeeper配置解析" class="headerlink" title="Zookeeper配置解析"></a>Zookeeper配置解析</h4><p><img src="/2018/07/29/我要学好分布式-zookeeper/7.png" alt="1532955279402"></p><p><code>tickTime=2000</code>  zookeeper中最小的时间单位长度 （ms）</p><p><code>initLimit=10</code>  follower节点启动后与leader节点完成数据同步的时间</p><p><code>syncLimit</code>=5 leader节点和follower节点进行心跳检测的最大延时时间</p><p><code>dataDir</code>=/tmp/zookeeper  表示zookeeper服务器存储快照文件的目录</p><p><code>dataLogDir</code> 表示配置 zookeeper事务日志的存储路径，默认指定在dataDir目录下</p><p><code>clientPort</code> 表示客户端和服务端建立连接的端口号： 2181</p><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p><code>zookeeper</code>的数据模型和文件系统类似，每一个节点称为：<code>znode</code>.  是zookeeper中的最小数据单元。每一个<code>znode</code>上都可以保存数据和挂载子节点。 从而构成一个层次化的属性结构</p><h5 id="节点特性"><a href="#节点特性" class="headerlink" title="节点特性"></a>节点特性</h5><p>持久化节点  ： 节点创建后会一直存在<code>zookeeper</code>服务器上，直到主动删除</p><p>持久化有序节点 ：每个节点都会为它的一级子节点维护一个顺序</p><p>临时节点 ： 临时节点的生命周期和客户端的<strong>会话</strong>保持一致。当客户端会话失效，该节点自动清理</p><p>临时有序节点 ： 在临时节点上多勒一个顺序性特性</p><h5 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h5><p>客户端和<code>zookeeper</code>会建立一个连接，这就是一个会话。</p><p>会话有什么过程呢？</p><p><img src="/2018/07/29/我要学好分布式-zookeeper/8.png" alt="1532956130898"></p><h5 id="Watcher（监听）"><a href="#Watcher（监听）" class="headerlink" title="Watcher（监听）"></a>Watcher（监听）</h5><p><code>zookeeper</code>提供了分布式数据发布/订阅,<code>zookeeper</code>允许客户端向服务器注册一个<code>watcher</code>监听。当服务器端的节点触发指定事件的时候，会触发<code>watcher</code>。服务端会向客户端发送一个事件通知 <code>watcher</code>的<strong>通知是一次性</strong>，一旦触发一次通知后，该<code>watcher</code>就失效</p><h5 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h5><p><code>zookeeper</code>提供控制节点访问权限的功能，用于有效的保证<code>zookeeper</code>中数据的安全性。避免误操作而导致系统出现重大事故。</p><p>提供了：CREATE /READ/WRITE/DELETE/ADMIN</p><h4 id="Zookeeper命令操作-增删改查"><a href="#Zookeeper命令操作-增删改查" class="headerlink" title="Zookeeper命令操作(增删改查)"></a>Zookeeper命令操作(增删改查)</h4><ol><li><code>create [-s]   -e path data acl</code></li></ol><p>-s 表示节点是否有序</p><p>-e 表示是否为临时节点</p><p>(默认情况下，是持久化节点)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create /zoo #创建zoo节点</span><br><span class="line">create /zoo /zoo-1 #创建zoo节点下的zoo-1</span><br><span class="line">ls /nodes #显示节点</span><br></pre></td></tr></table></figure><ol start="2"><li><code>get path [watch]</code></li></ol><p>获得指定 path的信息</p><p>​    3.<code>set path data [version]</code></p><p>修改节点 path对应的data</p><p><code>version</code>表示乐观锁，及数据库中有一个version字段去控制数据行的版本号</p><blockquote><p>乐观锁（ Optimistic Locking ） 相对<a href="https://baike.baidu.com/item/%E6%82%B2%E8%A7%82%E9%94%81" target="_blank" rel="noopener">悲观锁</a>而言，乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长<a href="https://baike.baidu.com/item/%E4%BA%8B%E5%8A%A1" target="_blank" rel="noopener">事务</a>而言，这样的开销往往无法承受。而乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（ Version ）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。  </p></blockquote><p>​     4.<code>delete path [version]</code></p><p>删除节点</p><h5 id="节点状态stat信息"><a href="#节点状态stat信息" class="headerlink" title="节点状态stat信息"></a>节点状态stat信息</h5><p><code>cversion</code> = 0       子（child）节点的版本号</p><p><code>aclVersion</code> = 0     表示acl的版本号，修改节点权限</p><p><code>dataVersion</code> = 1    表示的是当前节点数据的版本号</p><p><code>czxid</code>    节点被创建时的事务ID</p><p><code>mzxid</code>   节点最后一次被更新的事务ID</p><p><code>pzxid</code>    当前节点下的子节点最后一次被修改时的事务ID</p><p><code>ctime</code> = 创建时间</p><p><code>mtime</code> = 修改时间</p><p><code>ephemeralOwner</code> = 0x0   创建临时节点的时候，会有一个sessionId 。 该值存储的就是这个sessionid 。0X0代表无</p><p><code>dataLength</code> = 3    数据值长度</p><p><code>numChildren</code> = 0  子节点数</p><h3 id="在Java中使用zookeeper"><a href="#在Java中使用zookeeper" class="headerlink" title="在Java中使用zookeeper"></a>在Java中使用zookeeper</h3><p>引入依赖</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>困了，睡觉。明天再码字。未完待续。。。。。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> <a href="https://www.cnblogs.com/savorboard/p/distributed-system-transaction-consistency.html" target="_blank" rel="noopener">聊聊分布式事务，再说说解决方案</a></p><p>感谢</p><p>结束 <br>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> 本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，<strong>缘分呢</strong>兄弟。赶快加个好友，咱们两个想个号码， 买个彩票，先挣他个几百万😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“学好分布式架构”节目做到第四期了，👏👏👏&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.tengshe789.tech/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的博客&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
      <category term="学好分布式架构" scheme="https://tengshe789.github.io/tags/%E5%AD%A6%E5%A5%BD%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>学好分布式架构=4=-webservice</title>
    <link href="https://tengshe789.github.io/2018/07/28/%E6%88%91%E8%A6%81%E5%AD%A6%E5%A5%BD%E5%88%86%E5%B8%83%E5%BC%8F-webservice/"/>
    <id>https://tengshe789.github.io/2018/07/28/我要学好分布式-webservice/</id>
    <published>2018-07-28T14:12:36.000Z</published>
    <updated>2019-11-20T13:39:41.398Z</updated>
    
    <content type="html"><![CDATA[<p>今天咱们一起探索一下webservice这个技术。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h3 id="什么是webservice"><a href="#什么是webservice" class="headerlink" title="什么是webservice"></a>什么是webservice</h3><p><code>webservice</code>也可以叫xml web service webservice（在javax.jws）, 轻量级的独立的通讯技术</p><ol><li><p>基于web的服务：服务端提供的服务接口让客户端访问</p></li><li><p>跨平台、跨语言的整合方案</p></li></ol><h3 id="为什么要使用webservice"><a href="#为什么要使用webservice" class="headerlink" title="为什么要使用webservice"></a>为什么要使用webservice</h3><p>相比RMI，它是以前比较好的跨语言调用的解决方案</p><p> 就譬如说，一个电商平台，订单可以查看物流状态。，这可能就是.net实现的webservice服务接口。</p><h3 id="webservice中的一些概念"><a href="#webservice中的一些概念" class="headerlink" title="webservice中的一些概念"></a>webservice中的一些概念</h3><h4 id="WSDL-web-service-definition-language-webservice-定义语言"><a href="#WSDL-web-service-definition-language-webservice-定义语言" class="headerlink" title="WSDL(web service definition language  webservice 定义语言)"></a>WSDL(web service definition language  webservice 定义语言)</h4><p><code>webservice</code>服务需要通过wsdl文件来说明自己有什么服务可以对外调用。并且有哪些方法、方法里面有哪些参数</p><p>wsdl基于XML（可扩展标记语言）去定义了</p><ol><li><p>对应一个<code>.wsdl</code>的文件类型</p></li><li><p>定义了webservice的服务器端和客户端应用进行交互的传递数据和响应数据格式和方式</p></li><li><p>一个webservice对应唯一一个wsdl文档</p></li></ol><h4 id="SOAP（simple-object-access-protocal简单对象访问协议）"><a href="#SOAP（simple-object-access-protocal简单对象访问协议）" class="headerlink" title="SOAP（simple object access protocal简单对象访问协议）"></a>SOAP（simple object access protocal简单对象访问协议）</h4><p>差不多就是<code>http+xml</code>，什么意思呢？webservice通过http协议发送和接收请求时， 发送的内容（请求报文）和接收的内容（响应报文）都是采用xml格式进行封装，这些特定的HTTP消息头和XML内容格式就是SOAP协议。</p><p>一条 SOAP 消息就是一个普通的 XML 文档，包含下列元素：  </p><p>• Envelope 元素，标识XML 文档一条 SOAP 消息  </p><p>• Header 元素，包含头部信息的XML标签  </p><p>• Body 元素，包含所有的调用和响应的主体信息的标签  </p><p>• Fault 元素，错误信息标签。  </p><p>插一句嘴，现在的呢，基于RESTful接口的都是http+json</p><p>回到主题，什么是soap？</p><ol><li><p>一种简单、基于HTTP和XML的协议</p></li><li><p>soap消息：请求和响应消息</p></li><li><p>http+xml报文</p></li></ol><h4 id="SEI（webservice-endpoint-interface-webservice的终端接口）"><a href="#SEI（webservice-endpoint-interface-webservice的终端接口）" class="headerlink" title="SEI（webservice endpoint interface webservice的终端接口）"></a>SEI（webservice endpoint interface webservice的终端接口）</h4><p>webservice服务端用来处理请求的接口，也就是发布出去的接口。</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>如何实现呢？写一个小demo</p><p>首先是服务端的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebService</span><span class="comment">//SEI以及实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISayHello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@WebMethod</span><span class="comment">//sei中的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHello</span> <span class="keyword">implements</span> <span class="title">ISayHello</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//终端发布~</span></span><br><span class="line">        Endpoint.publish(<span class="string">"http://localhost:8888/tech/hello"</span>,<span class="keyword">new</span> SayHello());</span><br><span class="line">        System.out.println(<span class="string">"发布成功~"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们启动程序。到浏览器输入url+”?wsdl”就可以查看wsdl文档了</p><p><img src="/2018/07/28/我要学好分布式-webservice/0.png" alt="1532855168339"></p><p>接下来在IDEA中打开terminal或者直接进入cmd，调用wsimport工具,输入命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsimport -keep http://localhost:8888/tech/hello?wsdl</span><br></pre></td></tr></table></figure><p>这里简介一下參数：</p><ol><li>-d 表示输出的文件夹。文件夹必须事先存在，否则导出失败。</li><li>-keep 表示导出webservice的class文件时是否也导出源码java文件。</li><li>-verbose verbose表示具体信息。</li></ol><p><img src="/2018/07/28/我要学好分布式-webservice/1.png" alt="1532857279266"></p><p>这时候生成的客户端代码</p><p><img src="/2018/07/28/我要学好分布式-webservice/2.png" alt="1532857770651"></p><p>迁移到IDEA打开，新建一个demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SayHelloService service=<span class="keyword">new</span> SayHelloService();</span><br><span class="line">        SayHello sayHello= (SayHello) service.getSayHelloPort();</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo完成~！</p><h3 id="关于WSDL文档"><a href="#关于WSDL文档" class="headerlink" title="关于WSDL文档"></a>关于WSDL文档</h3><p>下面说说wsdl文档各个标签的含义</p><p><img src="/2018/07/28/我要学好分布式-webservice/3.png" alt="wsdl"></p><h4 id="Types标签"><a href="#Types标签" class="headerlink" title="Types标签"></a>Types标签</h4><p>定义整服务端的数据报文</p><h4 id="Schema标签"><a href="#Schema标签" class="headerlink" title="Schema标签"></a>Schema标签</h4><p>为了实现最大的互操作性（interoperability）和平台中立性（neutrality），WSDL选用XML Schema DataTypes，简称XSD作为标准类型系统，并将它作为固有类型系统。</p><p>图中的是数据定义部分，该部分定义了两个元素，一个是sayHello，一个是sayHelloResponse：</p><ul><li>sayHello：定义了一个复杂类型，仅仅包含一个简单的字符串，将来用来描述操作的参入传入部分；</li></ul><ul><li>sayHelloResponse：定义了一个复杂类型，仅仅包含一个简单的字符串，将来用来描述操作的返回值；</li></ul><h4 id="Message标签"><a href="#Message标签" class="headerlink" title="Message标签"></a>Message标签</h4><p>定义元素数据类型</p><h4 id="Porttype"><a href="#Porttype" class="headerlink" title="Porttype"></a>Porttype</h4><p>定义服务器端的SEI</p><p>input/output属性：指定输入输出的数据类型</p><h4 id="Binding标签"><a href="#Binding标签" class="headerlink" title="Binding标签"></a>Binding标签</h4><p>type属性：引用PortType</p><h4 id="service标签"><a href="#service标签" class="headerlink" title="service标签"></a>service标签</h4><p>表示服务器端的一个webservice容器</p><p>name属性：制定客户端属性</p><p>prot属性：指定客户端的容器类</p><p>address：大部分全部webservice的地址</p><p><img src="/2018/07/28/我要学好分布式-webservice/4.png" alt="1532860870497"></p><h3 id="过去的Webservice工具"><a href="#过去的Webservice工具" class="headerlink" title="过去的Webservice工具"></a>过去的Webservice工具</h3><p>发个名字留作备份，因为现在早已不用复杂的webservice了</p><h4 id="cxf"><a href="#cxf" class="headerlink" title="cxf"></a>cxf</h4><p>celtix+xfire</p><h4 id="axis"><a href="#axis" class="headerlink" title="axis"></a>axis</h4><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3><p>结束 <br>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> 本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，<strong>缘分呢</strong>兄弟。赶快加个好友，咱们两个想个号码， 买个彩票，先挣他个几百万😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天咱们一起探索一下webservice这个技术。&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.tengshe789.tech/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的博客&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
      <category term="学好分布式架构" scheme="https://tengshe789.github.io/tags/%E5%AD%A6%E5%A5%BD%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>学好分布式架构=6=-RMI通信框架</title>
    <link href="https://tengshe789.github.io/2018/07/26/RMI%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6/"/>
    <id>https://tengshe789.github.io/2018/07/26/RMI通信框架/</id>
    <published>2018-07-26T11:28:30.000Z</published>
    <updated>2019-11-20T13:39:40.597Z</updated>
    
    <content type="html"><![CDATA[<p>分布式框架是最近几年的热门。可是要想理解分布式框架着实不易，为了努力跟上时代潮流，特此开了一个专题，起名“我要学好分布式”，通过博客来分享一下我的学习过程，加深我对分布式整体框架的理解。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h3 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h3><p>英文就不说了。中文名远程进程调用协议。顾名思义，客户端在不知道细节的情况下，可以调用远程计算机的api，就像是调用本地方法一样。</p><p>RPC协议是一个规范。主流的PRC协议有<code>Dubbo</code>、<code>Thrif</code>、<code>RMI</code>、<code>Webservice</code>、<code>Hessain</code></p><p>他又一个非常大的特点，网络协议和网络IO对于调用端和服务端来说是透明的（动态代理）</p><p> 一个RPC框架包含的要素：</p><p><img src="/2018/07/26/RMI通信框架/0.png" alt="1532605493344"></p><h3 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h3><p>RMI(remote method invocation)  , 可以认为是RPC的java版本 </p><p>RMI使用的是JRMP（Java Remote Messageing Protocol）, JRMP是专门为java定制的通信协议，所以他是纯java的分布式解决方案 。</p><h4 id="RMI-Demo"><a href="#RMI-Demo" class="headerlink" title="RMI Demo"></a>RMI Demo</h4><ol><li>先写个测试用的远程接口，注意接口要抛异常</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISayHello</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">satHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>2.实现远程接口，并且继承：`UnicastRemoteObject`</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHelloImpl</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">ISayHello</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SayHelloImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">satHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello,"</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>3.创建服务器程序： `createRegistry`方法注册远程对象</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ISayHello sayHello =<span class="keyword">new</span> SayHelloImpl();</span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">8888</span>);</span><br><span class="line">            Naming.bind(<span class="string">"rmi://localhost:8888/sayhello"</span>,sayHello);</span><br><span class="line">            System.out.println(<span class="string">"server start success"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlreadyBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><pre><code>4.创建客户端程序</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ISayHello iSayHello = (ISayHello) Naming.lookup(<span class="string">"rmi://localhost:8888/sayhello"</span>);</span><br><span class="line">            System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RMI调用过程"><a href="#RMI调用过程" class="headerlink" title="RMI调用过程"></a>RMI调用过程</h4><p><img src="/2018/07/26/RMI通信框架/1.png" alt="1532610569381"></p><p><strong>流程：</strong></p><p>1.去注册中心注册，server端启动服务。</p><p>2.注册中心联系stub（存根）。stub用于客户端 ，在j2ee中是这么说的：为屏蔽客户调用远程主机上的对象，必须提供某种方式来模拟本地对象,这种本地对象称为存根(stub),存根负责接收本地方法调用,并将它们委派给各自的具体实现对象 </p><p>3.server注册对象，然后返回注册对象</p><p>4.客户端访问注册中心，（动态代理）返回stub对象</p><p>5.stub（存根）远程调用skeleton （骨架 ）</p><p>6.skeleton 调用相应接口</p><p><img src="/2018/07/26/RMI通信框架/2.png" alt="1532610883598"></p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p>让我看看核心的注册服务的源码实现</p><p><img src="/2018/07/26/RMI通信框架/3.png" alt="1532612686999"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RegistryImpl</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> var1)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bindings = <span class="keyword">new</span> Hashtable(<span class="number">101</span>);</span><br><span class="line">    <span class="comment">//安全认证</span></span><br><span class="line">        <span class="keyword">if</span> (var1 == <span class="number">1099</span> &amp;&amp; System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedExceptionAction&lt;Void&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">                        LiveRef var1x = <span class="keyword">new</span> LiveRef(RegistryImpl.id, var1);</span><br><span class="line">                        RegistryImpl.<span class="keyword">this</span>.setup(<span class="keyword">new</span> UnicastServerRef(var1x, (var0) -&gt; &#123;</span><br><span class="line">                            <span class="keyword">return</span> RegistryImpl.registryFilter(var0);</span><br><span class="line">                        &#125;));</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, (AccessControlContext)<span class="keyword">null</span>, <span class="keyword">new</span> SocketPermission(<span class="string">"localhost:"</span> + var1, <span class="string">"listen,accept"</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PrivilegedActionException var3) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (RemoteException)var3.getException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//初始化远程引用UnicastServerRef对象</span></span><br><span class="line">            LiveRef var2 = <span class="keyword">new</span> LiveRef(id, var1);<span class="comment">//《--------------------------</span></span><br><span class="line">            <span class="keyword">this</span>.setup(<span class="keyword">new</span> UnicastServerRef(var2, RegistryImpl::registryFilter));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>点进UnicastServerRef，找出实现的关系~</p><p><img src="/2018/07/26/RMI通信框架/4.png" alt="1532613044628"></p><p>点进setup方法，用idea反编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Remote <span class="title">exportObject</span><span class="params">(Remote var1, Object var2, <span class="keyword">boolean</span> var3)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        Class var4 = var1.getClass();</span><br><span class="line"></span><br><span class="line">        Remote var5;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var5 = Util.createProxy(var4, <span class="keyword">this</span>.getClientRef(), <span class="keyword">this</span>.forceStubUse);<span class="comment">//《--------------------</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExportException(<span class="string">"remote object implements illegal remote interface"</span>, var7);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var5 <span class="keyword">instanceof</span> RemoteStub) &#123;<span class="comment">//《--------------------------</span></span><br><span class="line">            <span class="keyword">this</span>.setSkeleton(var1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Target var6 = <span class="keyword">new</span> Target(var1, <span class="keyword">this</span>, var5, <span class="keyword">this</span>.ref.getObjID(), var3);<span class="comment">//《------------------------</span></span><br><span class="line">        <span class="keyword">this</span>.ref.exportObject(var6);</span><br><span class="line">        <span class="keyword">this</span>.hashToMethod_Map = (Map)hashToMethod_Maps.get(var4);</span><br><span class="line">        <span class="keyword">return</span> var5;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现在创建代理，判断当前的var是不是远程stub，如果是就设置骨架。如果不是，就构建target对象。点开代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Remote <span class="title">createProxy</span><span class="params">(Class&lt;?&gt; var0, RemoteRef var1, <span class="keyword">boolean</span> var2)</span> <span class="keyword">throws</span> StubNotFoundException </span>&#123;</span><br><span class="line">        Class var3;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var3 = getRemoteClass(var0);<span class="comment">//《--------------------------</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StubNotFoundException(<span class="string">"object does not implement a remote interface: "</span> + var0.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var2 || !ignoreStubClasses &amp;&amp; stubClassExists(var3)) &#123;</span><br><span class="line">            <span class="keyword">return</span> createStub(var3, var1);<span class="comment">//《--------------------------</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ClassLoader var4 = var0.getClassLoader();</span><br><span class="line">            <span class="keyword">final</span> Class[] var5 = getRemoteInterfaces(var0);</span><br><span class="line">            <span class="keyword">final</span> RemoteObjectInvocationHandler var6 = <span class="keyword">new</span> RemoteObjectInvocationHandler(var1);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (Remote)AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Remote&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Remote <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> (Remote)Proxy.newProxyInstance(var4, var5, var6);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException var8) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> StubNotFoundException(<span class="string">"unable to create proxy"</span>, var8);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现在调用远程服务，然后创建了stub。继续点开getRemoteClass（）方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getRemoteClass(Class&lt;?&gt; var0) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">       <span class="keyword">while</span>(var0 != <span class="keyword">null</span>) &#123;</span><br><span class="line">           Class[] var1 = var0.getInterfaces();<span class="comment">//《--------------------------</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> var2 = var1.length - <span class="number">1</span>; var2 &gt;= <span class="number">0</span>; --var2) &#123;</span><br><span class="line">               <span class="keyword">if</span> (Remote.class.isAssignableFrom(var1[var2])) &#123;</span><br><span class="line">                   <span class="keyword">return</span> var0;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           var0 = var0.getSuperclass();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(<span class="string">"class does not implement java.rmi.Remote"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>发现现在在创建实例</p><p>好吧，回到createProxy方法，再看看顺着往下走，看看<code>Target var6 = new Target(var1, this, var5, this.ref.getObjID(), var3);</code><br>        <code>this.ref.exportObject(var6);</code>的出口对象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportObject</span><span class="params">(Target var1)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ep.exportObject(var1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Endpoint</span> </span>&#123;</span><br><span class="line">    <span class="function">Channel <span class="title">getChannel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exportObject</span><span class="params">(Target var1)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Transport <span class="title">getInboundTransport</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Transport <span class="title">getOutboundTransport</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportObject</span><span class="params">(Target var1)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.transport.exportObject(var1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>一路点下去，找到了tcp出口的方法。这是属于协议层的玩意。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportObject</span><span class="params">(Target var1)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.listen();</span><br><span class="line">            ++<span class="keyword">this</span>.exportCount;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>一路点下去，发现listen。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> Thread.holdsLock(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        TCPEndpoint var1 = <span class="keyword">this</span>.getEndpoint();</span><br><span class="line">        <span class="keyword">int</span> var2 = var1.getPort();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tcpLog.isLoggable(Log.BRIEF)) &#123;</span><br><span class="line">                tcpLog.log(Log.BRIEF, <span class="string">"(port "</span> + var2 + <span class="string">") create server socket"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.server = var1.newServerSocket();<span class="comment">//《--------------------------</span></span><br><span class="line">                Thread var3 = (Thread)AccessController.doPrivileged(<span class="keyword">new</span> NewThreadAction(<span class="keyword">new</span> TCPTransport.AcceptLoop(<span class="keyword">this</span>.server), <span class="string">"TCP Accept-"</span> + var2, <span class="keyword">true</span>));</span><br><span class="line">                var3.start();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BindException var4) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ExportException(<span class="string">"Port already in use: "</span> + var2, var4);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var5) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ExportException(<span class="string">"Listen failed on port: "</span> + var2, var5);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            SecurityManager var6 = System.getSecurityManager();</span><br><span class="line">            <span class="keyword">if</span> (var6 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                var6.checkListen(var2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>发现newServerSocket！！！</p><p>综上，总体流程和上图一样。</p><h4 id="RMI缺陷"><a href="#RMI缺陷" class="headerlink" title="RMI缺陷"></a>RMI缺陷</h4><p>1.基于java，支持语言单一</p><p>2.服务注册只能注册到我上面分析的那个源码。注册中心挂了以后就完了</p><p>3.序列化是用java原生那个方法，效率不好</p><p>4.服务端底层是bio方式，性能不好</p><h4 id="手写个RMI？"><a href="#手写个RMI？" class="headerlink" title="手写个RMI？"></a>手写个RMI？</h4><p>步骤：</p><ol><li><p>编写服务器程序，暴露一个监听， 可以使用socket</p></li><li><p>编写客户端程序，通过ip和端口连接到指定的服务器，并且将数据做封装（序列化）</p></li><li><p>服务器端收到请求，先反序列化。再进行业务逻辑处理。把返回结果序列化返回</p></li></ol><p>源码：<a href="https://github.com/tengshe789/ForRMI" target="_blank" rel="noopener">https://github.com/tengshe789/ForRMI</a></p><p>把源码发布到GitHub了，在把源码粘贴太麻烦了。</p><p>结束 <br>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> 本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，缘分呢兄弟。赶快加个好友~  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分布式框架是最近几年的热门。可是要想理解分布式框架着实不易，为了努力跟上时代潮流，特此开了一个专题，起名“我要学好分布式”，通过博客来分享一下我的学习过程，加深我对分布式整体框架的理解。&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.t
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
      <category term="学好分布式架构" scheme="https://tengshe789.github.io/tags/%E5%AD%A6%E5%A5%BD%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
      <category term="网络" scheme="https://tengshe789.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>关掉X5内核让微信变得飞快~</title>
    <link href="https://tengshe789.github.io/2018/07/26/%E5%85%B3%E6%8E%89X5%E5%86%85%E6%A0%B8%E8%AE%A9%E5%BE%AE%E4%BF%A1%E5%8F%98%E5%BE%97%E9%A3%9E%E5%BF%AB/"/>
    <id>https://tengshe789.github.io/2018/07/26/关掉X5内核让微信变得飞快/</id>
    <published>2018-07-26T03:49:23.000Z</published>
    <updated>2019-11-20T13:39:41.173Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我换手机了。。。</p><p>以前的小S8卖掉了（日常操作😎）等价换了个👇</p><p><img src="/2018/07/26/关掉X5内核让微信变得飞快/1532577045218.png" alt="mix2S"></p><p>新手机测试完功能，下好微信以后，发现浏览技术公众号比老手机慢了很多，纳闷。后来才想到忘了换内核了。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p><a href="https://developer.android.google.cn/reference/android/webkit/WebView.html" target="_blank" rel="noopener"><strong>WebView</strong></a> 是Android开发中经常会用到的功能，是一个基于webkit引擎，用于显示来自本地、服务器web页面的控件，可以很好的提升应用扩展性。有以下优点：</p><ul><li>可以直接显示和渲染web页面</li><li>webview可以直接用html文件（网络上或本地assets中）作布局</li><li>和JavaScript交互调用</li></ul><p>首先，我们需要将webview更新到最新。</p><p><img src="/2018/07/26/关掉X5内核让微信变得飞快/QQ图片20180726142634.png" alt=""></p><p>然后打开微信，在任意聊天界面，输入 debugtbs.qq.com  </p><p><img src="/2018/07/26/关掉X5内核让微信变得飞快/QQ图片20180726142746.png" alt=""></p><p>点击禁用内核，重启微信后，在点击清除tbs</p><p>操作完成，结束！</p><p>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> 本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，缘分呢兄弟。赶快加个好友~  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;我换手机了。。。&lt;/p&gt;
&lt;p&gt;以前的小S8卖掉了（日常操作😎）等价换了个👇&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/07/26/
      
    
    </summary>
    
    
      <category term="窍门" scheme="https://tengshe789.github.io/tags/%E7%AA%8D%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>安利软件-如何在Windows调整多核心CPU负载并优化？</title>
    <link href="https://tengshe789.github.io/2018/07/25/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%9C%A8Winddows%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%A4%9A%E6%A0%B8%E5%BF%83CPU%E8%B4%9F%E8%BD%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://tengshe789.github.io/2018/07/25/教你如何在Winddows环境下多核心CPU负载优化/</id>
    <published>2018-07-25T02:22:46.000Z</published>
    <updated>2019-11-20T13:39:41.535Z</updated>
    
    <content type="html"><![CDATA[<p><code>hexo</code>不知道咋地了，<code>markdown</code>转<code>html</code>生成静态资源的时候，图片完全不写进<code>html</code>，前面几篇源码分析的图全显示不出来了。脑阔疼~</p><p>由于暂时没有解决静态资源的问题，所以我本篇不放图，来一场没有硝烟的战争。我会尽量让此文章通俗易懂，待我解决问题时，再重新编辑一下（<strong>反正这个博客没人看</strong>）。</p><p>今天我来分享一个软件，名字是<code>Process Lasso Pro</code>。这个软件的作用是优化进程调度，降低高CPU占用率进程的优先级，保证前台进程和系统拥有最高的响应速度，简单说就是尽可能保证电脑在高CPU占用率的情况不卡。注意，软件如果是家用就是免费的，专业版有高级功能，不过基本用不到。 </p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><p>先来看看官方发的产品特性。</p><ul><li><p><code>ProBalance</code>：安全有效地平衡进程优先级，从而使电脑在高负荷的时候提高系统的响应速度和防止系统失速和反应滞后。我们的技术并不做额外的前台推进而是适当降低了后台进程优先级。我们多年的经验使我们的算法高度优化、独一无二。  </p></li><li><p>持久的优先级和亲和力：为您的进程设置“默认”的优先级和<code>CPU</code>亲和力，让您可以调整它们的执行方式。  </p></li><li><p>自动终止：对于您所选择的特定进程，它一旦运行，<code>Process Lasso</code>将自动终止它。  </p></li><li><p>进程看守：当达到指定的阈值的时候，将终止、重新启动或更改<code>CPU</code>亲和力。  </p></li><li><p>实例数量限制：将进程实例数量限制在指定的范围内。  </p></li><li><p>多核优化：通过预设的<code>CPU</code>亲和力和<code>ProBalance</code>亲和力的调整，可以优化多核处理器，提高<code>CPU</code>运行效率。它还避免使用逻辑核心，从而在超线程<code>CPU</code>下提高提高某些应用程序的性能。 </p></li><li><p><code>I/O</code>优先级：<code>Windows Vista</code>及<code>Windows 7</code>下可以设置进程的当前的/默认的/持续的I / O优先级  电源模式自动化：设置电源模式，当某些进程正在运行时自动更改为“高性能”，当进程退出后再换到原先的模式（较新版本功能更强大，可以更改到任何电源模式）。</p></li><li><p>节约电能：或当需要时提高性能！  </p></li><li><p>系统响应标：我们将以独特的算法，以惊人的准确率监测系统响应  独立的核心引擎：这个独立的后台进程可以一个普通的过程或服务形式运行。这个“核心引擎”被命名 <code>ProcessGovernor.exe</code>，它实际上可以强制执行进程规则和<code>ProBalance</code>。它根本不需要<code>GUI</code>（主窗口）的存在。这可以实现最小的资源利用率。  </p></li><li><p>最小的资源利用：在实现最小的资源利用方面，没有任何一个程序可以与<code>Process Lasso</code>相比。它是用原生的C + +编写的，并不断改进以获得最大的效率。我们也提供原生的64位版本。本程序的内存使用量通常在1MB以下！（依系统而定） </p></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先，选择X64安装包，一路<code>next</code>到底。</p><p><img src="/2018/07/25/教你如何在Winddows环境下多核心CPU负载优化/0.png" alt="1532653358360"></p><h3 id="GUI使用"><a href="#GUI使用" class="headerlink" title="GUI使用"></a>GUI使用</h3><p>安装完毕，在主界面上，可以看到当前所有的活动进程，这个和系统的资源管理器很相似。<code>Process Lasso</code>在默认设置下已经可以生效，它会监视后台进程，如果某个进程超过了CPU占用率的阈值，就会对他进行限制，降低CPU对这个进程的响应优先级，让<code>CPU</code>着力于前台进程（如游戏等）。 </p><p><img src="/2018/07/25/教你如何在Winddows环境下多核心CPU负载优化/1.png" alt="1532653454662"></p><p>右击较为占<code>CPU</code>使用时间的游戏、视频等的进程，勾选“归类为游戏或多媒体进程” 。这时，<code>Process Lasso</code>会排除对这个进程的“抑制”，并在运行这个进程时调节电源方案为“高性能”，充分调动<code>CPU</code>资源。 </p><p><img src="/2018/07/25/教你如何在Winddows环境下多核心CPU负载优化/2.png" alt="1532653515949"></p><p>除此之外，重点就是优化多核心<code>CPU</code>的利用率了，还是右键单击要优化执行的进程，选中“<code>CPU</code>亲和力（限制CPU使用）–&gt;总是–&gt;选择<code>CPU</code>亲和力”，按照自己的需求勾选需要使用的<code>CPU</code>核心(一般来说，<code>CPU 0</code>性能最强，<code>CPU 1</code>性能第二强…….<code>CPU n</code>性能最弱)，这样这个进程关闭后再运行也是按照这个设置调用<code>CPU</code>资源。 </p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>不推荐对<code>Process Lasso</code>自身/安全软件/杀毒软件/系统关键服务进程等进行结束进程、降低内存或<code>I/O</code>优先级至非常低、硬节流等操作，且部分杀毒、安全软件有自我保护功能，结束进程、<code>CPU</code>优先级、<code>I/O</code>优先级 置可能会失效</li><li>菜单-&gt;选项-&gt;日志设置-&gt;勾选“退出时清除日志”“保持日志修剪”可以有效降低日志数量</li><li>建议保持<code>Process Lasso</code>开机启动(包括服务)，部分开机加速优化软件会禁止<code>Process Lasso</code>启动，这将导致<code>Process Lasso</code>无法实时优化系统</li><li><code>Process Lasso</code>在界面运行的过程中，由于有大量信息需要获取并实时显示，可能会看到<code>Process Lasso</code>图形界面或核心引擎进程<code>CPU</code>使用率达到15%~40%，这属于正常现象。隐藏或关闭此界面后<code>Process Lasso</code>的资源占用率将会变得非常小，不会拖慢电脑速度。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>先喊一句口号，<code>Process Lasso</code>牛逼！</p><p>不过给大家举例的不过是它的皮毛而已，更多优化设置可以通过自己的尝试调整获得，希望大家可以多多研究，发现有什么有用的玩法可以私聊我。</p><p>对了，这个软件有收费Pro版和免费版，收费版有很多新功能，比如强制性对进程的CPU占用率进行动态调整，能够明显提升部分应用的执行效率。原则上我不推荐任何用户使用盗版软件的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;hexo&lt;/code&gt;不知道咋地了，&lt;code&gt;markdown&lt;/code&gt;转&lt;code&gt;html&lt;/code&gt;生成静态资源的时候，图片完全不写进&lt;code&gt;html&lt;/code&gt;，前面几篇源码分析的图全显示不出来了。脑阔疼~&lt;/p&gt;
&lt;p&gt;由于暂时没有解决静
      
    
    </summary>
    
    
      <category term="日常" scheme="https://tengshe789.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Windows10" scheme="https://tengshe789.github.io/tags/Windows10/"/>
    
      <category term="软件教学" scheme="https://tengshe789.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%95%99%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>那些年数组的排序</title>
    <link href="https://tengshe789.github.io/2018/07/24/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%95%B0%E7%BB%84%E7%9A%84%E6%8E%92%E5%BA%8F/"/>
    <id>https://tengshe789.github.io/2018/07/24/那些年数组的排序/</id>
    <published>2018-07-24T06:08:19.000Z</published>
    <updated>2020-03-21T12:59:30.850Z</updated>
    
    <content type="html"><![CDATA[<p>今天来回顾一下简单的排序思想，留作今后的复习和备份用。本篇是非常非常基础的，甚至都不会讲实际项目真正能用的排序方法，譬如双轴快速排序 。写的不好请多多谅解。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><h3 id="相关功能函数"><a href="#相关功能函数" class="headerlink" title="相关功能函数"></a>相关功能函数</h3><p>为了保持代码的整洁，先创造好对数器和相关功能性函数。</p><h4 id="交换器"><a href="#交换器" class="headerlink" title="交换器"></a>交换器</h4><p>两个数组中的元素比较排序过程中，一定会有元素的交换操作。为了保持代码的整洁，先写出交换操作的函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">arr[i] = arr[i] ^ arr[j];</span><br><span class="line">arr[j] = arr[i] ^ arr[j];</span><br><span class="line">arr[i] = arr[i] ^ arr[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="随机样本产生器"><a href="#随机样本产生器" class="headerlink" title="随机样本产生器"></a>随机样本产生器</h4><p>自己编数组太麻烦了，让他自己生产吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generateRandomArray(<span class="keyword">int</span> maxSize, <span class="keyword">int</span> maxValue) &#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[(<span class="keyword">int</span>) ((maxSize + <span class="number">1</span>) * Math.random())];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i] = (<span class="keyword">int</span>) ((maxValue + <span class="number">1</span>) * Math.random()) - (<span class="keyword">int</span>) (maxValue * Math.random());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对数器"><a href="#对数器" class="headerlink" title="对数器"></a>对数器</h4><p>对数器其实就是一个绝对正确但是复杂度不好的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">comparator</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说说<code>Arrays.sort()</code>的逻辑吧。数组进入方法，先判断。如果数组的长度小于<code>QUICKSORT_THRESHOLD</code>（默认值是286）的话，再判断，如果数组长度小于<code>INSERTION_SORT_THRESHOLD</code>(值为47)的话，那么就会用插入排序 ，否则就会使用双轴快速排序。</p><p>如果大于286呢，它就会坚持数组的连续升序和连续降序性好不好，如果好的话就用归并排序，不好的话就用快速排序。</p><h4 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h4><p>比较两个数组一不一样~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEqual</span><span class="params">(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((arr1 == <span class="keyword">null</span> &amp;&amp; arr2 != <span class="keyword">null</span>) || (arr1 != <span class="keyword">null</span> &amp;&amp; arr2 == <span class="keyword">null</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr1 == <span class="keyword">null</span> &amp;&amp; arr2 == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr1.length != arr2.length) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr1[i] != arr2[i]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印器"><a href="#打印器" class="headerlink" title="打印器"></a>打印器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (arr == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      System.out.print(arr[i] + <span class="string">" "</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复制器"><a href="#复制器" class="headerlink" title="复制器"></a>复制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] copyArray(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">res[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> testTime = <span class="number">500000</span>;</span><br><span class="line">   <span class="keyword">int</span> maxSize = <span class="number">100</span>;</span><br><span class="line">   <span class="keyword">int</span> maxValue = <span class="number">100</span>;</span><br><span class="line">   <span class="keyword">boolean</span> succeed = <span class="keyword">true</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; testTime; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span>[] arr1 = generateRandomArray(maxSize, maxValue);</span><br><span class="line">      <span class="keyword">int</span>[] arr2 = copyArray(arr1);</span><br><span class="line">      bubbleSort(arr1);</span><br><span class="line">      comparator(arr2);</span><br><span class="line">      <span class="keyword">if</span> (!isEqual(arr1, arr2)) &#123;</span><br><span class="line">         succeed = <span class="keyword">false</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println(succeed ? <span class="string">"牛逼，算法对了!"</span> : <span class="string">"❌!"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span>[] arr = generateRandomArray(maxSize, maxValue);</span><br><span class="line">   printArray(arr);</span><br><span class="line">   bubbleSort(arr);<span class="comment">//测试的算法</span></span><br><span class="line">   printArray(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="脑子"><a href="#脑子" class="headerlink" title="脑子"></a>脑子</h3><p>脑阔疼</p><h1 id="正篇"><a href="#正篇" class="headerlink" title="正篇"></a>正篇</h1><h2 id="基于比较的排序"><a href="#基于比较的排序" class="headerlink" title="基于比较的排序"></a>基于比较的排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>冒泡排序算法的原理如下：</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。此时这两个数，永远是后面的数大。</li><li>第一回合将每一对相邻元素做同样的工作。回合结束后，最后的元素是整个数组最大的数。</li><li>第二回合…第n回合过程中，对除了最后一个元素重复以上的步骤。</li></ol><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> end = arr.length - <span class="number">1</span>; end &gt; <span class="number">0</span>; end--) &#123;<span class="comment">//end最后的数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">swap(arr, i, i + <span class="number">1</span>);<span class="comment">//交换</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间复杂度：O(N²)</p><p>额外空间复杂度：O(1)</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>1.第一回合，将指针指向第一个元素，将第一个元素和剩余的元素比较，最小的元素放到一号位置。</p><p>2.第二回合…第n回合过程中，指针加一。对除了第一个元素重复以上的步骤。</p><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> minIndex = i;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">         minIndex = arr[j] &lt; arr[minIndex] ? j : minIndex;</span><br><span class="line">      &#125;</span><br><span class="line">      swap(arr, i, minIndex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间复杂度：O(N²)</p><p>额外空间复杂度：O(1)</p><h3 id="插入排序的"><a href="#插入排序的" class="headerlink" title="插入排序的"></a>插入排序的</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>1.第一回合，比较第一个元素和第二个元素大小，大的放在第二个位置上</p><p>2.第二回合，将第三个元素与第二、第一个元素比较，大的放在第三个位置上</p><p>3.轮回</p><h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; arr[j + <span class="number">1</span>]; j--) &#123;</span><br><span class="line">         swap(arr, j, j + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间复杂度：O(N²)</p><p>额外空间复杂度：O(1)</p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆其实就是完全二叉树，看堆要首先知道大顶堆、小顶堆。</p><p>每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。</p><p>大顶堆：arr[i] &gt;= arr[2i+1] &amp;&amp; arr[i] &gt;= arr[2i+2]  </p><p>小顶堆：arr[i] &lt;= arr[2i+1] &amp;&amp; arr[i] &lt;= arr[2i+2]  </p><p><img src="/2018/07/24/那些年数组的排序/QQ截图20180724205705.jpg" alt="daxiao"></p><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>将待排序序列构造成一个大顶堆（升序采用大顶堆，降序采用小顶堆），此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了 </p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0-i之间生成大根堆这种结构</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">heapInsert(arr, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = arr.length;<span class="comment">//定义数组大小，可以判断是否越界</span></span><br><span class="line">swap(arr, <span class="number">0</span>, --size);</span><br><span class="line"><span class="keyword">while</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">heapify(arr, <span class="number">0</span>, size);</span><br><span class="line">swap(arr, <span class="number">0</span>, --size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成大根堆这种结构</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapInsert</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (arr[index] &gt; arr[(index - <span class="number">1</span>) / <span class="number">2</span>]) &#123;<span class="comment">//如果我这个节点比父节点大</span></span><br><span class="line">swap(arr, index, (index - <span class="number">1</span>) / <span class="number">2</span>);<span class="comment">//交换</span></span><br><span class="line">index = (index - <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//回到父位置继续</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数值小的元素往下沉</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt; size) &#123;<span class="comment">//左孩子在堆上，没越界</span></span><br><span class="line"><span class="keyword">int</span> largest = left + <span class="number">1</span> &lt; size &amp;&amp; arr[left + <span class="number">1</span>] &gt; arr[left] ? left + <span class="number">1</span> : left;<span class="comment">//找出左右孩子中最大的数</span></span><br><span class="line">largest = arr[largest] &gt; arr[index] ? largest : index;<span class="comment">//和父比较</span></span><br><span class="line"><span class="keyword">if</span> (largest == index) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">swap(arr, largest, index);</span><br><span class="line">index = largest;<span class="comment">//回到较大节点</span></span><br><span class="line">left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h4><p>如果只是建立堆的过程，时间复杂度为O(N) </p><p>时间复杂度O(N*logN)</p><p>额外空间复杂度O(1)</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序不是一种稳定的排序算法，也就是说，多个相同的值的相对位置也许会在算法结束时产生变动。</p><blockquote><p>假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i]=r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的；否则称为不稳定的。</p></blockquote><h4 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h4><p>我先说说经典快排的思路吧。</p><p>将数组分成两部分，一部分是小于等于某个数的，一部分是大于等于某个数的。这两部分初始指针在数组的左(L)右(R)两头，此时L和R分别是一个边界点。</p><p>1.先定义less区域和more区域，代表比数组中某一个数更小更大的区域。初始less区域是L-1以左的部分，more区域是R以右的区域</p><p><img src="/2018/07/24/那些年数组的排序/QQ截图20180724205757.jpg" alt="1532425834921"></p><p>2.第一回合，从数组左边开始。若L指针指的节点值小于某个数值，less区域向右移动一个位置 <code>swap(arr,++less,L++);</code>，L节点位置+1准备下一个回合；若它大于这个数值，more区域向左扩张一格，然后将这个节点放到more区域<code>swap(arr,--more,L++);</code>，L节点位置+1准备下一个回合；若他等于这个数值，什么也不管，只是L节点位置+1准备下一个回合。</p><p>3.重复上述过程，得到了一个数组，他的L指针右边时小于某个数的，R的右边时大于某个数的。[L,R]这个区间是等于某个数的。</p><p>4.返回这个都是相同数的数组的左边界、右边界</p><p>5.不断递归</p><p>经典快排有一个弊端。<strong>左部分和右部分的规模不一样或者有一个部分规模特别大，算法效率会变差。</strong>举个栗子，如果我有个数组[1,1,3,4,7,6,1,2,1,5,1,7]，我指定的某个数字是7，那么那么排序后就变成了[1，1，1，1，1,2,3,4,5,6,7],经典快排结束后只搞定了一个一个区间（&lt;7的区间），复杂度就从理想状态下的O（N）变成了O（N²）</p><p>然后就有了改进后的随机快排。</p><p>随机快排比经典快排多了一个选随机数的过程 <code>swap(arr, L + (int) (Math.random() * (R - L + 1)), R);。</code>就是随机生成某个数，这样生成的区间虽然也会出现上述经典快排的恶劣情况，但是此时的复杂度就从原来的恶劣事件变成了有概率恶劣事件，但总体期望是好的。这就变成了一个概率问题。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>以下为随机快排</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nums = &#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">45</span>,<span class="number">36</span>,<span class="number">98</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    quickSort(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        System.out.print(num+<span class="string">","</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序，使得整数数组 arr 有序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序，使得整数数组 arr 的 [L, R] 部分有序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt; R) &#123;</span><br><span class="line">        <span class="comment">// 把数组中随机的一个元素与最后一个元素交换，这样以最后一个元素作为基准值实际上就是以数组中随机的一个元素作为基准值</span></span><br><span class="line">        swap(arr, <span class="keyword">new</span> Random().nextInt(R - L + <span class="number">1</span>) + L, R);</span><br><span class="line">        <span class="keyword">int</span>[] p = partition(arr, L, R);</span><br><span class="line">        quickSort(arr, L, p[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, p[<span class="number">1</span>] + <span class="number">1</span>, R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分区的过程，整数数组 arr 的[L, R]部分上，使得：</span></span><br><span class="line"><span class="comment"> *   大于 arr[R] 的元素位于[L, R]部分的右边，但这部分数据不一定有序</span></span><br><span class="line"><span class="comment"> *   小于 arr[R] 的元素位于[L, R]部分的左边，但这部分数据不一定有序</span></span><br><span class="line"><span class="comment"> *   等于 arr[R] 的元素位于[L, R]部分的中间</span></span><br><span class="line"><span class="comment"> * 返回等于部分的第一个元素的下标和最后一个下标组成的整数数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] partition(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> basic = arr[R];</span><br><span class="line">    <span class="keyword">int</span> less = L - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> more = R + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(L &lt; more) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[L] &lt; basic) &#123;</span><br><span class="line">            swap(arr, ++less, L++);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[L] &gt; basic) &#123;</span><br><span class="line">            swap(arr, --more, L);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; less + <span class="number">1</span>, more - <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 交换数组 arr 中下标为 i 和下标为 j 位置的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度-4"><a href="#复杂度-4" class="headerlink" title="复杂度"></a>复杂度</h4><p>科学家数学证明，长期期望的时间复杂度为O(logN*N)</p><p>快速排序可以做到稳定性问题，非常难，要知道的可以谷歌“01 stable sort” ，反正我不会。</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h4 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h4><p>1.和上题一样，先定义左边界L右边界R数组中，然后定义一个中间值<code>mid = (r-l)/2</code></p><p>2.递归，在边界内部不断的找中间值mid</p><h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr==<span class="keyword">null</span> || arr.length &lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mergeSort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>); <span class="comment">//(r-l)/2</span></span><br><span class="line">    mergeSort(arr,l,mid);</span><br><span class="line">    mergeSort(arr,mid+<span class="number">1</span>,r);</span><br><span class="line">    merge(arr, l, mid, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度-5"><a href="#复杂度-5" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间复杂度O(N*logN)</p><p>额外空间复杂度O(N)，归并排序的额外空间复杂度可以变成O(1)，但是非常难，我没花时间研究，要知道的可以谷歌“归并排序 内部缓存法” </p><p>这里的时间复杂度怎么算出来的呢？有一个<strong>master定理</strong>：</p><p>T(N) = a*T(N/b) + O(N^d)</p><p>其中 a &gt;= 1 and b &gt; 1 是常量，其表示的意义是n表示问题的规模，a表示递归的次数也就是生成的子问题数，b表示每次递归是原来的1/b之一个规模。 如下：</p><p>1) log(b,a) &gt; d -&gt; 复杂度为O(N^log(b,a)) </p><p>2) log(b,a) = d -&gt; 复杂度为O(N^d * logN) </p><p>3) log(b,a) &lt;  d -&gt; 复杂度为O(N^d)</p><p>这里，归并排序中b=2，a=2.</p><h2 id="非基于比较的排序"><a href="#非基于比较的排序" class="headerlink" title="非基于比较的排序"></a>非基于比较的排序</h2><p>非基于比较的排序，与被排序的样本的实际数据状况很有关系，所以实际中并不经常使用 </p><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><h4 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h4><p>1.找到一个数组中最大数的值</p><p>2.定义（最大数+1）个桶</p><p>3.将数组的数放到对应编号相同的桶中，每放进一个数，桶里面的数值加一</p><p>4.依次从小输出这个桶，桶里的元素出现几次就输出几个桶的编号</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// only for 0~200 value</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bucketSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">max = Math.max(max, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[max + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">bucket[arr[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bucket.length; j++) &#123;</span><br><span class="line"><span class="keyword">while</span> (bucket[j]-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">arr[i++] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度-6"><a href="#复杂度-6" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间复杂度O(N)</p><p>额外空间复杂度O(N)</p><p>结束 <br>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> 本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，缘分呢兄弟。赶快加个好友~  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天来回顾一下简单的排序思想，留作今后的复习和备份用。本篇是非常非常基础的，甚至都不会讲实际项目真正能用的排序方法，譬如双轴快速排序 。写的不好请多多谅解。&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.tengshe789.tech/
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
      <category term="数据结构与算法" scheme="https://tengshe789.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于TreeMap的个人理解</title>
    <link href="https://tengshe789.github.io/2018/07/23/TreeMap/"/>
    <id>https://tengshe789.github.io/2018/07/23/TreeMap/</id>
    <published>2018-07-23T07:23:27.000Z</published>
    <updated>2019-11-20T13:39:40.601Z</updated>
    
    <content type="html"><![CDATA[<p>群里的大哥说了，要想懂红黑树的应用，先要看<code>TreeMap</code>。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">https://blog.tengshe789.tech/</a></p><p>OK，现在开始：</p><h4 id="红黑树简介"><a href="#红黑树简介" class="headerlink" title="红黑树简介"></a>红黑树简介</h4><p>红黑树又称红-黑二叉树，它首先是一颗二叉树，它具体二叉树所有的特性。同时红黑树更是一颗自平衡的排序二叉树。</p><p>​       一般的二叉树他们都需要满足一个基本性质–即树中的任何节点的值大于它的左子节点，且小于它的右子节点。因为按照这个基本性质使得树的检索效率大大提高。但我们知道在生成二叉树的过程是非常容易失衡的，最坏的情况就是一边倒（只有右/左子树），这样势必会导致二叉树的检索效率大大降低（O(n)），所以为了维持二叉树的平衡，大牛们提出了各种实现的算法，如：<a href="http://baike.baidu.com/view/414610.htm" target="_blank" rel="noopener">AVL</a>，<a href="http://baike.baidu.com/view/2957252.htm" target="_blank" rel="noopener">SBT</a>，<a href="http://baike.baidu.com/view/1118088.htm" target="_blank" rel="noopener">伸展树</a>，<a href="http://baike.baidu.com/view/956602.htm" target="_blank" rel="noopener">TREAP</a> ，<a href="http://baike.baidu.com/view/133754.htm?fr=aladdin#1_1" target="_blank" rel="noopener">红黑树</a>等等。</p><p>​       <strong>平衡二叉树</strong>必须具备如下特性：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。也就是说该二叉树的任何一个等等子节点，其左右子树的高度都相近。</p><p><img src="/2018/07/23/TreeMap/1.png" alt="平衡二叉树和普通的区别"></p><p>红黑树顾名思义就是节点是红色或者黑色的平衡二叉树，它通过颜色的约束来维持着二叉树的平衡。对于一棵有效的红黑树二叉树而言我们必须增加如下<strong>规则</strong>：</p><p>​       <strong>1、每个节点都只能是红色或者黑色</strong></p><p>​       <strong>2、根节点是黑色</strong></p><p>​       <strong>3、每个叶节点（NIL节点，空节点）是黑色的。</strong></p><p>​       <strong>4、如果一个结点是红的，则它两个子节点都是黑的。也就是说在一条路径上不能出现相邻的两个红色结点。</strong></p><p>​       <strong>5、从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</strong></p><p>​       这些约束强制了红黑树的关键性质: <strong>从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。</strong>结果是这棵树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。所以红黑树它是复杂而高效的，其检索效率O(log <em>n</em>)。下图为一颗典型的红黑二叉树。</p><p><img src="/2018/07/23/TreeMap/2.png" alt="红黑树的结构"> </p><h3 id="关于TreeMap"><a href="#关于TreeMap" class="headerlink" title="关于TreeMap"></a>关于TreeMap</h3><p>我没看懂啊啊啊啊，我看懂了在更新(立FLAG🚩)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;群里的大哥说了，要想懂红黑树的应用，先要看&lt;code&gt;TreeMap&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.tengshe789.tech/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;htt
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="源码" scheme="https://tengshe789.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>A 死锁 の 物语(ˉ▽ˉ；)...</title>
    <link href="https://tengshe789.github.io/2018/07/23/A-%E6%AD%BB%E9%94%81/"/>
    <id>https://tengshe789.github.io/2018/07/23/A-死锁/</id>
    <published>2018-07-23T02:04:00.000Z</published>
    <updated>2019-11-20T13:39:40.559Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tengshe789</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String obj1 = <span class="string">"obj1"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String obj2 = <span class="string">"obj2"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"Lock1 running"</span>);</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span>(DeadLock.obj1)&#123;</span><br><span class="line">                        System.out.println(<span class="string">"Lock1 lock obj1"</span>);</span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);<span class="comment">//获取obj1后先等一会儿，让Lock2有足够的时间锁住obj2</span></span><br><span class="line">                        <span class="keyword">synchronized</span>(DeadLock.obj2)&#123;</span><br><span class="line">                            System.out.println(<span class="string">"Lock1 lock obj2"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();<span class="comment">//first thread with lambda</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"Lock2 running"</span>);</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span>(DeadLock.obj2)&#123;</span><br><span class="line">                        System.out.println(<span class="string">"Lock2 lock obj2"</span>);</span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                        <span class="keyword">synchronized</span>(DeadLock.obj1)&#123;</span><br><span class="line">                            System.out.println(<span class="string">"Lock2 lock obj1"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();<span class="comment">//second thread</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结束 <br>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> 本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，缘分呢兄弟。赶快加个好友~  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="日常" scheme="https://tengshe789.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>关于LinkedHashmap的个人理解</title>
    <link href="https://tengshe789.github.io/2018/07/18/%E5%85%B3%E4%BA%8ELinkedHashmap%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
    <id>https://tengshe789.github.io/2018/07/18/关于LinkedHashmap的个人理解/</id>
    <published>2018-07-18T01:39:02.000Z</published>
    <updated>2019-11-20T13:39:41.172Z</updated>
    
    <content type="html"><![CDATA[<p>大多数情况下，只要不涉及线程安全问题，Map基本都可以使用<code>HashMap</code>，不过<code>HashMap</code>有一个问题，就是迭代HashMap的顺序并不是<code>HashMap</code>放置的顺序。<code>HashMap</code>的这一缺点往往会带来困扰，因为有些场景，我们需要一个有序的<code>Map</code>。<code>LinkedHashMap</code>就可以做到，它虽然增加了时间和空间上的开销，但是通过维护一个运行于所有条目的双向链表，<code>LinkedHashMap</code>保证了元素迭代的顺序。想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">https://blog.tengshe789.tech/</a></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>打开源码可以看到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashMap.Node subclass for normal LinkedHashMap entries.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; before, after;</span><br><span class="line">        Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>LinkedHashMap</code>继承了<code>HashMap</code>的<code>Entry</code>，并新增加了两个指针</p><p><img src="/2018/07/18/关于LinkedHashmap的个人理解/1.png" alt="LinkedHashmap数据结构"></p><p>参照一下网络上搜刮的图片，可以看出数据结构为<strong>数组 + 单链表 + 红黑树 + 双链表</strong>，比<code>HashMap</code>多了一个双向链表，就是利用了头节点和其余的各个节点之间通过 <code>Entry</code> 中的 <code>after</code> 和 <code>before</code> 指针进行关联。 </p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>看一下构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(initialCapacity, loadFactor);</span><br><span class="line">        accessOrder = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(initialCapacity);</span><br><span class="line">        accessOrder = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        accessOrder = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        accessOrder = <span class="keyword">false</span>;</span><br><span class="line">        putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>有四个构造方法，每一个的构造方法第一句话基本都是调用父类<code>HashMap</code>方法。估计是用多态来实现的相关功能。比 <code>HashMap</code> 多了一个 <code>accessOrder</code> 的参数，用来指定按照 <code>LRU</code> 排列方式还是顺序插入的排序方式</p><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>看 <code>LinkedHashMap</code> 的 <code>put()</code> 方法之前先看看 <code>HashMap</code> 的 <code>putVal</code> 方法： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                =============================敲黑板==========================================</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实这篇已经是我早有准备的，第一次看源码的时候已经惊了。<code>LinkedHashMap</code> 自己没有重写<code>put</code>方法，全是照着他爹搬过来的，<em>无赖</em> 啊。代码中敲黑板位置，是<code>LinkedHashMap</code> 重写了 <code>afterNodeAccess()</code> 这个方法。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将最近使用的Node e，放在链表的最末尾</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">   <span class="comment">//仅当按照LRU原则且e不在最末尾，才执行修改链表，将e移到链表最末尾的操作</span></span><br><span class="line">    <span class="comment">//accessOrder为true则表示按照基于访问的顺序来排列</span></span><br><span class="line">        <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">            <span class="comment">//将e赋值临时节点p， b是e的前一个节点， a是e的后一个节点</span></span><br><span class="line">            LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">                (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">            <span class="comment">//节点移动过程</span></span><br><span class="line">            p.after = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">                head = a;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                b.after = a;</span><br><span class="line">            <span class="keyword">if</span> (a != <span class="keyword">null</span>)</span><br><span class="line">                a.before = b;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                last = b;</span><br><span class="line">            <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">                head = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.before = last;</span><br><span class="line">                last.after = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tail = p;</span><br><span class="line">            ++modCount;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/07/18/关于LinkedHashmap的个人理解/2aa6jef7ac.png" alt="2"></p><p>结束 <br> 此片完了~ 想要了解更多精彩新姿势？请访问我的个人博客 本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，juejin同步发出。如有雷同，缘分呢兄弟。赶快加个好友~  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大多数情况下，只要不涉及线程安全问题，Map基本都可以使用&lt;code&gt;HashMap&lt;/code&gt;，不过&lt;code&gt;HashMap&lt;/code&gt;有一个问题，就是迭代HashMap的顺序并不是&lt;code&gt;HashMap&lt;/code&gt;放置的顺序。&lt;code&gt;HashMap&lt;/c
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="源码" scheme="https://tengshe789.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>关于ConcurrentHashMap1.8的个人理解</title>
    <link href="https://tengshe789.github.io/2018/07/17/ConcurrentHashMap1-8/"/>
    <id>https://tengshe789.github.io/2018/07/17/ConcurrentHashMap1-8/</id>
    <published>2018-07-17T04:13:36.000Z</published>
    <updated>2019-11-20T13:39:40.559Z</updated>
    
    <content type="html"><![CDATA[<p><code>ConcurrenHashMap</code> 。下面分享一下我对<code>ConcurrentHashMap</code> 的理解，主要用于个人备忘。如果有不对，请批评。</p><p><code>HashMap</code>“严重”的勾起了我对<code>HashMap</code>家族的好奇心，下面分享一下我对<code>ConcurrentHashMap</code> 的理解，主要用于个人备忘。如果有不对，请批评。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">https://blog.tengshe789.tech/</a></p><h3 id="总起"><a href="#总起" class="headerlink" title="总起"></a>总起</h3><p><code>HashMap</code>是我们平时开发过程中用的比较多的集合，但它是非线程安全的，在涉及到多线程并发的情况，进行get操作有可能会引起死循环，导致CPU利用率接近100%。 </p><p>因此需要支持线程安全的并发容器 <code>ConcurrentHashMap</code> 。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><img src="/2018/07/17/ConcurrentHashMap1-8/446.png" alt="img"> </p><h3 id="重要成员变量"><a href="#重要成员变量" class="headerlink" title="重要成员变量"></a>重要成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The array of bins. Lazily initialized upon first insertion.</span></span><br><span class="line"><span class="comment">   * Size is always a power of two. Accessed directly by iterators.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p><code>table</code>代表整个哈希表。 默认为null，初始化发生在第一次插入操作，默认大小为16的数组，用来存储Node节点数据，扩容时大小总是2的幂次方。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The next table to use; non-null only while resizing.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br></pre></td></tr></table></figure><p><code>nextTable</code>是一个连接表，用于哈希表扩容，默认为null，扩容时新生成的数组，其大小为原数组的两倍。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Base counter value, used mainly when there is no contention,</span></span><br><span class="line"><span class="comment">    * but also as a fallback during table initialization</span></span><br><span class="line"><span class="comment">    * races. Updated via CAS.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">long</span> baseCount;</span><br></pre></td></tr></table></figure><p><code>baseCount</code>保存着整个哈希表中存储的所有的结点的个数总和，有点类似于 HashMap 的 size 属性。 这个数通过CAS算法更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Table initialization and resizing control.  When negative, the</span></span><br><span class="line"><span class="comment">    * table is being initialized or resized: -1 for initialization,</span></span><br><span class="line"><span class="comment">    * else -(1 + the number of active resizing threads).  Otherwise,</span></span><br><span class="line"><span class="comment">    * when table is null, holds the initial table size to use upon</span></span><br><span class="line"><span class="comment">    * creation, or 0 for default. After initialization, holds the</span></span><br><span class="line"><span class="comment">    * next element count value upon which to resize the table.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</span><br></pre></td></tr></table></figure><p>初始化哈希表和扩容 rehash 的过程，都需要依赖<code>sizeCtl</code>。该属性有以下几种取值：</p><ul><li>0：默认值</li><li>-1：代表哈希表正在进行初始化</li><li>大于0：相当于 HashMap 中的 threshold，表示阈值</li><li>小于-1：代表有多个线程正在进行扩容。（譬如：-N 表示有N-1个线程正在进行扩容操作 ）</li></ul><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));<span class="comment">//MAXIMUM_CAPACITY = 1 &lt;&lt; 30</span></span><br><span class="line">        <span class="keyword">this</span>.sizeCtl = cap;<span class="comment">//ConcurrentHashMap在构造函数中只会初始化sizeCtl值，并不会直接初始化table，而是延缓到第一次put操作。 </span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sizeCtl = DEFAULT_CAPACITY;<span class="comment">//DEFAULT_CAPACITY = 16</span></span><br><span class="line">        putAll(m);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>构造方法是三个。重点是第二个，带参的构造方法。这个带参的构造方法会调用<code>tableSizeFor()</code>方法，确保table的大小总是2的幂次方（假设参数为100，最终会调整成256）。算法如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a power of two table size for the given desired capacity.</span></span><br><span class="line"><span class="comment">     * See Hackers Delight, sec 3.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = c - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="PUT-方法"><a href="#PUT-方法" class="headerlink" title="PUT()方法"></a>PUT()方法</h3><p><code>put()</code>调用<code>putVal()</code>方法，让我们看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//对传入的参数进行合法性判断</span></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> hash = spread(key.hashCode());<span class="comment">//计算键所对应的 hash 值</span></span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">            <span class="comment">//如果哈希表还未初始化，那么初始化它</span></span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line"> <span class="comment">//根据hash值计算出在table里面的位置</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123; </span><br><span class="line">                <span class="comment">//如果这个位置没有值 ，那么以CAS无锁式向该位置添加一个节点</span></span><br><span class="line">                <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                             <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                    <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//检测到桶结点是 ForwardingNode 类型，协助扩容（MOVED  = -1; // hash for forwarding nodes）</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="comment">//桶结点是普通的结点，锁住该桶头结点并试图在该链表的尾部添加一个节点</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                V oldVal = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="comment">//向普通的链表中添加元素</span></span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="comment">//遍历链表所有的结点</span></span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="comment">//如果hash值和key值相同，则修改对应结点的value值</span></span><br><span class="line">                                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    oldVal = e.val;</span><br><span class="line">                                    <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                        e.val = value;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                Node&lt;K,V&gt; pred = e;</span><br><span class="line">                                <span class="comment">//如果遍历到了最后一个结点，那么就证明新的节点需要插入链表尾部</span></span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                              value, <span class="keyword">null</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//如果这个节点是树节点，就按照树的方式插入值</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            Node&lt;K,V&gt; p;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                           value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                oldVal = p.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    p.val = value;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果链表长度已经达到临界值8，就需要把链表转换为树结构（TREEIFY_THRESHOLD = 8）</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> oldVal;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="comment">//CAS 式更新baseCount，并判断是否需要扩容</span></span><br><span class="line">        addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实putVal()也多多少少掉用了其他方法，让我们继续探究一下。</p><h4 id="CAS（compare-and-swap）"><a href="#CAS（compare-and-swap）" class="headerlink" title="CAS（compare and swap）"></a>CAS（compare and swap）</h4><p>科普compare and swap，解决多线程并行情况下使用锁造成性能损耗的一种机制，CAS操作包含三个操作数——内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在CAS指令之前返回该位置的值。CAS有效地说明了“我认为位置V应该包含值A；如果包含该值，则将B放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。 </p><h4 id="spread"><a href="#spread" class="headerlink" title="spread"></a>spread</h4><p>首先，第四行出现的<code>int hash = spread(key.hashCode());</code>这是传统的计算hash的方法。key的hash值高16位不变，低16位与高16位异或作为key的最终hash值。（h &gt;&gt;&gt; 16，表示无符号右移16位，高位补0，任何数跟0异或都是其本身，因此key的hash值高16位不变。）  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">spread</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; HASH_BITS;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="initTable"><a href="#initTable" class="headerlink" title="initTable"></a>initTable</h4><p>第十行， <code>tab = initTable();</code>这个方法的亮点是，可以让put并发执行，实现table只初始化一次 。</p><blockquote><p>initTable()核心思想就是，只允许一个线程对表进行初始化，如果有其他线程进来了，那么会让其他线程交出 CPU 等待下次系统调度。这样，保证了表同时只会被一个线程初始化。 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="comment">//如果表为空才进行初始化操作</span></span><br><span class="line">        <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//如果一个线程发现sizeCtl&lt;0，意味着另外的线程执行CAS操作成功，当前线程只需要让出cpu时间片（放弃 CPU 的使用）</span></span><br><span class="line">            <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">                Thread.yield(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">            <span class="comment">//否则说明还未有线程对表进行初始化，那么本线程就来做这个工作</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">//sc 大于零说明容量已经初始化了，否则使用默认容量</span></span><br><span class="line">                        <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                        table = tab = nt;</span><br><span class="line">                        <span class="comment">//计算阈值，等效于 n*0.75</span></span><br><span class="line">                        sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//设置阈值</span></span><br><span class="line">                    sizeCtl = sc;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接下来，第19行。 <code>tab = helpTransfer(tab, f);</code>这句话。要了解这个，首先需要知道<code>ForwardingNode</code> 这个节点类型。它一个用于连接两个<code>table</code>的节点类。它包含一个<code>nextTable</code>指针，用于指向下一张hash表。而且这个节点的key、value、next指针全部为null，它的hash值为MOVED（static final int <code>MOVED</code>    = -1）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardingNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line">        ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;</span><br><span class="line">            <span class="keyword">super</span>(MOVED, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">this</span>.nextTable = tab;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//find的方法是从nextTable里进行查询节点，而不是以自身为头节点进行查找 </span></span><br><span class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// loop to avoid arbitrarily deep recursion on forwarding nodes</span></span><br><span class="line">            outer: <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = nextTable;;) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e; <span class="keyword">int</span> n;</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="keyword">null</span> || tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span> ||</span><br><span class="line">                    (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    <span class="keyword">int</span> eh; K ek;</span><br><span class="line">                    <span class="keyword">if</span> ((eh = e.hash) == h &amp;&amp;</span><br><span class="line">                        ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                    <span class="keyword">if</span> (eh &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;</span><br><span class="line">                            tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;</span><br><span class="line">                            <span class="keyword">continue</span> outer;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">return</span> e.find(h, k);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="helpTransfer"><a href="#helpTransfer" class="headerlink" title="helpTransfer"></a>helpTransfer</h4><p>在扩容操作中，我们需要对每个桶中的结点进行分离和转移。如果某个桶结点中所有节点都已经迁移完成了（已经被转移到新表 nextTable 中了），那么会在原 table 表的该位置挂上一个 ForwardingNode 结点，说明此桶已经完成迁移。</p><p><code>helpTransfer</code>什么作用呢？是检测到当前哈希表正在扩容，然后让当前线程去协助扩容 ！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] nextTab; <span class="keyword">int</span> sc;</span><br><span class="line">        <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; (f <span class="keyword">instanceof</span> ForwardingNode) &amp;&amp;</span><br><span class="line">            (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="keyword">null</span>) &#123;<span class="comment">//新的table，nextTab已经存在前提下才能帮助扩容</span></span><br><span class="line">            <span class="keyword">int</span> rs = resizeStamp(tab.length);<span class="comment">//返回一个 16 位长度的扩容校验标识</span></span><br><span class="line">            <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</span><br><span class="line">                   (sc = sizeCtl) &lt; <span class="number">0</span>) &#123;<span class="comment">//sizeCtl 如果处于扩容状态的话</span></span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                  <span class="comment">//前 16 位是数据校验标识，后 16 位是当前正在扩容的线程总数</span></span><br><span class="line">            <span class="comment">//这里判断校验标识是否相等，如果校验符不等或者扩容操作已经完成了，直接退出循环，不用协助它们扩容了</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) &#123;<span class="comment">//sc + 1 标识增加了一个线程进行扩容</span></span><br><span class="line">                    transfer(tab, nextTab);<span class="comment">//调用扩容方法</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> nextTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> table;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>helpTransfer</code>精髓的是可以调用多个工作线程一起帮助进行扩容，这样的效率就会更高，而不是只有检查到要扩容的那个线程进行扩容操作，其他线程就要等待扩容操作完成才能工作。 </p><h4 id="transfer"><a href="#transfer" class="headerlink" title="transfer"></a>transfer</h4><p>既然这里涉及到扩容的操作，我们也一起来看看扩容方法<code>transfer（）</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = tab.length, stride;</span><br><span class="line">    <span class="comment">//计算单个线程允许处理的最少table桶首节点个数，不能小于 16</span></span><br><span class="line">        <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">            stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></span><br><span class="line">     <span class="comment">//刚开始扩容，初始化 nextTab </span></span><br><span class="line">        <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                nextTab = nt;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">                sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nextTable = nextTab;</span><br><span class="line">            <span class="comment">//transferIndex 指向最后一个桶，方便从后向前遍历 </span></span><br><span class="line">            transferIndex = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> nextn = nextTab.length;</span><br><span class="line">       <span class="comment">//定义 ForwardingNode 用于标记迁移完成的桶</span></span><br><span class="line">        ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</span><br><span class="line">        <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></span><br><span class="line">    <span class="comment">//i 指向当前桶，bound 指向当前线程需要处理的桶结点的区间下限</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</span><br><span class="line">            <span class="comment">//遍历当前线程所分配到的桶结点</span></span><br><span class="line">            <span class="keyword">while</span> (advance) &#123;</span><br><span class="line">                <span class="keyword">int</span> nextIndex, nextBound;</span><br><span class="line">                <span class="keyword">if</span> (--i &gt;= bound || finishing)</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">//transferIndex &lt;= 0 说明已经没有需要迁移的桶了</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    i = -<span class="number">1</span>;</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//更新 transferIndex</span></span><br><span class="line">           <span class="comment">//为当前线程分配任务，处理的桶结点区间为（nextBound,nextIndex）</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</span><br><span class="line">                         (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class="line">                          nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                       nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                    bound = nextBound;</span><br><span class="line">                    i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">             <span class="comment">//当前线程所有任务完成</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">                <span class="keyword">int</span> sc;</span><br><span class="line">                <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                    nextTable = <span class="keyword">null</span>;</span><br><span class="line">                    table = nextTab;</span><br><span class="line">                    sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    finishing = advance = <span class="keyword">true</span>;</span><br><span class="line">                    i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//待迁移桶为空，那么在此位置 CAS 添加 ForwardingNode 结点标识该桶已经被处理过了</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</span><br><span class="line">                advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</span><br><span class="line">            <span class="comment">//如果扫描到 ForwardingNode，说明此桶已经被处理过了，跳过即可</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                        <span class="comment">//链表的迁移操作</span></span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">int</span> runBit = fh &amp; n;</span><br><span class="line">                            Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                            <span class="comment">//整个 for 循环为了找到整个桶中最后连续的 fh &amp; n 不变的结点</span></span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> b = p.hash &amp; n;</span><br><span class="line">                                <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                    runBit = b;</span><br><span class="line">                                    lastRun = p;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                                ln = lastRun;</span><br><span class="line">                                hn = <span class="keyword">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                hn = lastRun;</span><br><span class="line">                                ln = <span class="keyword">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</span><br><span class="line">                                <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                    ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                            &#125;</span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            advance = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//红黑树的复制算法，</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                            TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> h = e.hash;</span><br><span class="line">                                TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</span><br><span class="line">                                    (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                                        lo = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        loTail.next = p;</span><br><span class="line">                                    loTail = p;</span><br><span class="line">                                    ++lc;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                                        hi = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        hiTail.next = p;</span><br><span class="line">                                    hiTail = p;</span><br><span class="line">                                    ++hc;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                                (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</span><br><span class="line">                            hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                                (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            advance = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>至此，put方法讲完了</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料~"></a>参考资料~</h3><p><a href="https://www.cnblogs.com/yangming1996/p/8031199.html" target="_blank" rel="noopener">参考资料</a></p><p>感谢</p><p>结束 <br>此片完了~ 想要了解更多精彩新姿势？<br>请访问我的<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">个人博客</a> 本篇为原创内容，已在个人博客率先发表，随后CSDN，segmentfault，掘金，简书，开源中国同步发出。如有雷同，缘分呢兄弟。赶快加个好友~  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;ConcurrenHashMap&lt;/code&gt; 。下面分享一下我对&lt;code&gt;ConcurrentHashMap&lt;/code&gt; 的理解，主要用于个人备忘。如果有不对，请批评。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt;“严重”的勾起了我对&lt;code&gt;
      
    
    </summary>
    
    
      <category term="源码" scheme="https://tengshe789.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>HashSet原理</title>
    <link href="https://tengshe789.github.io/2018/07/17/HashSet%E5%8E%9F%E7%90%86/"/>
    <id>https://tengshe789.github.io/2018/07/17/HashSet原理/</id>
    <published>2018-07-17T03:48:08.000Z</published>
    <updated>2019-11-20T13:39:40.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h1><p><code>HashSet</code> 是一个不允许存储重复元素的集合。 <code>HashSet</code>实现<code>Set</code>接口，由哈希表（实际上是一个<code>HashMap</code>实例）支持。它不保证set 的迭代顺序；特别是它不保证该顺序恒久不变。此类允许使用null元素。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">https://blog.tengshe789.tech/</a></p><h3 id="HashSet和HashMap比较"><a href="#HashSet和HashMap比较" class="headerlink" title="HashSet和HashMap比较"></a>HashSet和HashMap比较</h3><h4 id="HashSet："><a href="#HashSet：" class="headerlink" title="HashSet："></a>HashSet：</h4><p>　　<code>HashSet</code>实现了<code>Set</code>接口，它不允许集合中出现重复元素。当我们提到<code>HashSet</code>时，第一件事就是在将对象存储在</p><p><code>HashSet</code>之前，要确保重写<code>hashCode（）</code>方法和<code>equals（）</code>方法，这样才能比较对象的值是否相等，确保集合中没有</p><p>储存相同的对象。如果不重写上述两个方法，那么将使用下面方法默认实现：</p><p>　public boolean add(Object obj)方法用在Set添加元素时，如果元素值重复时返回 “false”，如果添加成功则返回”true”</p><h4 id="HashMap："><a href="#HashMap：" class="headerlink" title="HashMap："></a>HashMap：</h4><p>　　<code>HashMap</code>实现了<code>Map</code>接口，Map接口对键值对进行映射。<code>Map</code>中不允许出现重复的键（Key）。<code>Map</code>接口有两个基本的实现</p><p>TreeMap和HashMap。TreeMap保存了对象的排列次序，而<code>HashMap</code>不能。<code>HashMap</code>可以有空的键值对（Key（null）-Value（null））</p><p><code>HashMap</code>是非线程安全的（非Synchronize），要想实现线程安全，那么需要调用collections类的静态方法synchronizeMap（）实现。</p><p>public Object put(Object Key,Object value)方法用来将元素添加到<code>map</code>中。 </p><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><p>首先了解下 <code>HashSet</code> 的成员变量:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用transient关键字标记的成员变量不参与序列化过程</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><p>发现主要就两个变量:</p><ul><li><code>map</code> ：用于存放最终数据的。</li><li><code>PRESENT</code> ：是所有写入 map 的 <code>value</code> 值。</li></ul><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数很简单，利用了 <code>HashMap</code> 初始化了 <code>map</code> 。</p><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较关键的就是这个 <code>add()</code> 方法。 可以看出它是将存放的对象当做了 <code>HashMap</code> 的健，<code>value</code> 都是相同的 <code>PRESENT</code> 。由于 <code>HashMap</code> 的 <code>key</code> 是不能重复的，所以每当有重复的值写入到 <code>HashSet</code> 时，<code>value</code> 会被覆盖，但 <code>key</code> 不会收到影响，这样就保证了 <code>HashSet</code> 中只能存放不重复的元素。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>HashSet</code> 的原理比较简单，几乎全部借助于 <code>HashMap</code> 来实现的。</p><p>所以 <code>HashMap</code> 会出现的问题 <code>HashSet</code> 依然不能避免。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HashSet&quot;&gt;&lt;a href=&quot;#HashSet&quot; class=&quot;headerlink&quot; title=&quot;HashSet&quot;&gt;&lt;/a&gt;HashSet&lt;/h1&gt;&lt;p&gt;&lt;code&gt;HashSet&lt;/code&gt; 是一个不允许存储重复元素的集合。 &lt;code&gt;HashSe
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="源码" scheme="https://tengshe789.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>分享一个简单又复杂的程序选择题</title>
    <link href="https://tengshe789.github.io/2018/07/11/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E5%8F%88%E5%A4%8D%E6%9D%82%E7%9A%84%E7%A8%8B%E5%BA%8F%E9%80%89%E6%8B%A9%E9%A2%98/"/>
    <id>https://tengshe789.github.io/2018/07/11/分享一个简单又复杂的程序选择题/</id>
    <published>2018-07-11T10:45:52.000Z</published>
    <updated>2019-11-20T13:39:41.216Z</updated>
    
    <content type="html"><![CDATA[<p>今天在牛客网刷题，看见一个非常简单又很复杂的题目，我现在来分享一下。</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p><p>题目是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> B().getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">int</span> value;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">                setValue(v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.value = value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    value++;</span><br><span class="line">                    <span class="keyword">return</span> value;</span><br><span class="line">                &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    System.out.println(e.toString());</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.setValue(value);</span><br><span class="line">                    System.out.println(value);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>(<span class="number">5</span>);</span><br><span class="line">                setValue(getValue() - <span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.setValue(<span class="number">2</span> * value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>题目让写出上述代码执行完成后的输出结果</p><p>这道题考的其实就是代码执行顺序的知识，比较基础的东西。首先，用IDEA打一下断点，如图：</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/1.png" alt=""></p><p>首先走主函数，new B，进入B的构造方法</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/2.png" alt=""></p><p>并将父类A传入5（当子类构造器中没有使用”super(参数或无参数)”指定调用父类构造器时，是默认调用父类的无参构造器，如果父类中包含有参构造器，却没有无参构造器，则在子类构造器中一定要使用“super(参数)”指定调用父类的有参构造器，不然就会报错。 ）</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/3.png" alt=""></p><p>调用父类的setValue方法，由于子类已将其重写，所以直接到子类{</p><p>敲黑板：</p><p>1.父类，子类之间转型的问题，当父类声明指向子类对象，会发生隐式向上转型。</p><p>2.编译时所参考的对象类型是声明对象所用的类型，而运行时则是参考对象实例化的类型。</p><p>3.当子类重写了父类的某个方法时，会将父类的方法进行隐藏，因此这边<strong>最后调到的都是子类重写的方法。</strong></p><p>}</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/4.png" alt=""></p><p>现在回到value=10</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/5.png" alt=""></p><p>现在value是10，准备进入geiValue阶段</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/6.png" alt=""></p><p>还是10</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/7.png" alt=""></p><p>在这里返回value，此时value是11</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/8.png" alt=""></p><p>try{}catch{}执行完一定要走finnally</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/9.png" alt=""></p><p>value是22了</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/10.png" alt=""></p><p>终于开始打印了，打印第一个数字：22</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/11.png" alt=""></p><p>返回value =22</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/12.png" alt=""></p><p>回到刚刚B那里，第一次返回的value是11，将11-3=8</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/13.png" alt=""></p><p>将8*2=16得到value</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/14.png" alt=""></p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/15.png" alt=""></p><p>回到主方法</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/16.png" alt=""></p><p>再走一边getValue（）</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/17.png" alt=""></p><p>进入finally，再将value*2=34</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/18.png" alt=""></p><p>第二个数字出来了，打印34，然后返回3</p><p><img src="/2018/07/11/分享一个简单又复杂的程序选择题/19.png" alt=""></p><p>到这里主函数执行完成，但是注意了。第二次返回值是17，第三次是34。到了最后又输出了getValue（）第二次的返回值，也就是17 </p><p><strong>所以整个过程执行完后的输出结果是22、34、17。。。。。。</strong> </p><p>这个题有些语句有点多余，譬如finally代码块后面return永远用不上。</p><p><strong>这道题虽然饶了很多弯，但细细品味后其实并没那么难，考点是：</strong></p><p><strong>1.自类继承父类，调用方法时先是调用子类中的方法，如果没有就调用父类中的方法。</strong></p><p><strong>2.try{ }、catch{ }、finally{ }返回值的问题，一旦try{ }中返回了某一个值，如果finally有返回值，finally中的返回值会覆盖try的返回值，如果finally没有返回值，就是try中的返回值。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在牛客网刷题，看见一个非常简单又很复杂的题目，我现在来分享一下。&lt;/p&gt;
&lt;p&gt;想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.tengshe789.tech/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的博客&lt;/a&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
      <category term="错题" scheme="https://tengshe789.github.io/tags/%E9%94%99%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>关于Hashmap的个人理解</title>
    <link href="https://tengshe789.github.io/2018/07/08/%E5%85%B3%E4%BA%8EHashmap%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
    <id>https://tengshe789.github.io/2018/07/08/关于Hashmap的个人理解/</id>
    <published>2018-07-08T15:01:27.000Z</published>
    <updated>2019-11-20T13:39:41.172Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚看到QQ群有人吹<code>Hashmap</code>，一想我啥都不懂，就赶快补了一波。下面分享一下我对<code>Hashmap</code>的理解，主要用于个人备忘。如果有不对，请批评。想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">https://blog.tengshe789.tech/</a></p><h3 id="总起"><a href="#总起" class="headerlink" title="总起"></a>总起</h3><p><code>Hashmap</code>是散列表，存储结构是键值对形式。根据健的Hashcode值存储数据，有较快的访问速度。</p><p>它的线程是不安全的，在两个线程同时尝试扩容HashMap时，可能将一个链表形成环形的链表，所有的next都不为空，进入死循环；要想让它安全，可以用 <code>Collections</code>的synchronizedMap 方法使 <code>HashMap</code>具有线程安全的能力，或者使用<code>ConcurrentHashMap</code> 。</p><p>他的键值对都可以为空，映射不是有序的。</p><p>Hashmap有两个参数影响性能：初始容量，加载因子。</p><h3 id="Hashmap存储结构"><a href="#Hashmap存储结构" class="headerlink" title="Hashmap存储结构"></a>Hashmap存储结构</h3><p>JDK1.8中<code>Hashmap</code>是由链表、红黑树、数组实现的</p><p><img src="https://images2015.cnblogs.com/blog/938494/201702/938494-20170217113451550-1406894023.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用来实现数组、链表的数据结构</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;<span class="comment">//保存节点的Hash</span></span><br><span class="line">        <span class="keyword">final</span> K key;<span class="comment">//保存节点的键值</span></span><br><span class="line">        V value;<span class="comment">//保存节点的值</span></span><br><span class="line">        Node&lt;K,V&gt; next;<span class="comment">//指向链表或者红黑树的下一个节点</span></span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Hashmap构造方法"><a href="#Hashmap构造方法" class="headerlink" title="Hashmap构造方法"></a>Hashmap构造方法</h3><p><code>HashMap</code>有4个构造方法。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1.制定初始容量和负载因子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                    initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                    loadFactor);</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2.指定初始容量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三。无参构造。</span></span><br><span class="line">     HashMap() &#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法四。将另一个 Map 中的映射拷贝一份到自己的存储结构中来，这个方法不是很常用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">        putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Hashmap变量成员"><a href="#Hashmap变量成员" class="headerlink" title="Hashmap变量成员"></a>Hashmap变量成员</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未指定容量的时候，数组的初始容量。初始容量是16</span></span><br><span class="line"><span class="comment">//为什么不直接写16？因为速度快。计算机里面要转换二进制。</span></span><br><span class="line"><span class="comment">//必须2的n次幂</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//负载因子。当hashmap容量超过 容量*负载因子 时，进行扩容操作（resize（））</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//确定何时将hash冲突的链表转换成红黑树</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用来确何时将红黑树转换成链表</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当链表转换成红黑树时，需要判断数组容量。若数组容量太小导致hash冲突太多，则不进行红黑树操作，转而利用reseize扩容</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure><h3 id="初始容量、负载因子、阈值"><a href="#初始容量、负载因子、阈值" class="headerlink" title="初始容量、负载因子、阈值."></a>初始容量、负载因子、阈值.</h3><p>一般情况下，使用无参构造方法创建 <code>HashMap</code>。但当我们对时间和空间复杂度有要求的时候，使用默认值有时可能达不到我们的要求，这个时候我们就需要手动调参。 </p><p>在 HashMap 构造方法中，可供我们调整的参数有两个，一个是初始容量<code>initialCapacity</code>，另一个负载因子<code>loadFactor</code>。通过这两个设定这两个参数，可以进一步影响阈值大小。但初始阈值 <code>threshold</code> 仅由<code>initialCapacity</code> 经过移位操作计算得出。 </p><table><thead><tr><th style="text-align:left">名称</th><th>用途</th></tr></thead><tbody><tr><td style="text-align:left">initialCapacity</td><td>HashMap 初始容量</td></tr><tr><td style="text-align:left">loadFactor</td><td>负载因子</td></tr><tr><td style="text-align:left">threshold</td><td>当前 HashMap 所能容纳键值对数量的最大值，超过这个值，则需扩容</td></tr></tbody></table><p>默认情况下，HashMap 初始容量是16，负载因子为 0.75。 注释中有说明，阈值可由容量乘上负载因子计算而来 ，即<code>threshold = capacity * loadFactor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这段代码有点难，根据大神的说法，这个方法的意思是，<strong>找到大于或等于 cap 的最小2的幂</strong>。我们先来看看 <strong>tableSizeFor</strong> 方法的图解 ：</p><p><img src="https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15159249414047.jpg" alt=""></p><p>图中容量是2<sup>29</sup>+1，计算后是2<sup>30</sup></p><p>引用一下啊大神说的：</p><blockquote><p>对于 HashMap 来说，负载因子是一个很重要的参数，该参数反应了 HashMap 桶数组的使用情况（假设键值对节点均匀分布在桶数组中）。通过调节负载因子，可使 HashMap 时间和空间复杂度上有不同的表现。当我们调低负载因子时，HashMap 所能容纳的键值对数量变少。扩容时，重新将键值对存储新的桶数组里，键的键之间产生的碰撞会下降，链表长度变短。此时，HashMap 的增删改查等操作的效率将会变高，这里是典型的拿空间换时间。相反，如果增加负载因子（负载因子可以大于1），HashMap 所能容纳的键值对数量变多，空间利用率高，但碰撞率也高。这意味着链表长度变长，效率也随之降低，这种情况是拿时间换空间。至于负载因子怎么调节，这个看使用场景了。一般情况下，我们用默认值就可以了。</p></blockquote><h3 id="插入PUT"><a href="#插入PUT" class="headerlink" title="插入PUT"></a>插入PUT</h3><p>过程：</p><ol><li>对Key求hash值，然后计算下标</li><li>如果没有碰撞，就放入桶中</li><li>如果碰撞了，就以链表形式放到后面</li><li>如果链表长度超过阈值，就把链表转换成红黑树</li><li>如果链表存在则替换旧值</li><li>如果桶满了（容量*负载因子），则重新resize</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用核心方法</span></span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="putVal"><a href="#putVal" class="headerlink" title="putVal"></a>putVal</h4><p>核心算法在putVal（）中。要想理解，先要明白<strong>桶排序(Bucket Sort)</strong></p><p>它是迄今为止最快的一种排序法，其<strong>时间复杂度仅为Ο(n)</strong>，也就是线性复杂度。</p><p>桶排序核心思想是：<strong>根据数据规模n划分，m个相同大小的区间 （每个区间为一个桶，桶可理解为容器）</strong>  。将n个元素<strong>按照规定范围</strong>分布到各个桶中去 ，再对每个桶中的元素进行排序，排序方法可根据需要，选择快速排序，或者归并排序，或者插入排序 ，然后依次从每个桶中取出元素，按顺序放入到最初的输出序列中(相当于把所有的桶中的元素合并到一起) 。</p><p>下面是代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//n是数组长度</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">//判断桶数组是否是空</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//是就用resize（）初始化</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//根据 hash 值确定节点在数组中的插入位置</span></span><br><span class="line">    <span class="comment">//若此位置没有元素则进行插入，注意确定插入位置所用的计算方法为　(n - 1) &amp; hash,由于　n 一定是２的幂次，这个操作相当于hash % n</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">//将新节点引入桶中</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//临时变量e进行记录。如果有值，说明仅仅是值的覆盖。</span></span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">// 如果键的值以及节点 hash 等于链表中的第一个键值对节点时，则将 e 指向该键值对</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)<span class="comment">// 如果桶中的引用类型为 TreeNode，则调用红黑树的插入方法</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="comment">// 对链表进行遍历，并统计链表长度</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">// 链表中不包含要插入的键值对节点时，则将该节点接在链表的最后</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//临时变量e不为空时，说明已经有值进行替换了</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="comment">//返回老值</span></span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">    <span class="comment">//扩容</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="HASH"><a href="#HASH" class="headerlink" title="HASH"></a>HASH</h4><p>hash算法，高十六位与低十六进行异或运算，这样做的好处是使得到结果会尽可能不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h4><blockquote><p>HashMap 的扩容机制与其他变长集合的套路不太一样，HashMap 按当前桶数组长度的2倍进行扩容，阈值也变为原来的2倍（如果计算过程中，阈值溢出归零，则按阈值公式重新计算）。扩容之后，要重新计算键值对的位置，并把它们移动到合适的位置上去。</p></blockquote><p>resize总共做了3件事，分别是：</p><ol><li>计算新桶数组的容量 newCap 和新阈值 newThr</li><li>根据计算出的 newCap 创建新的桶数组，桶数组 table 也是在这里进行初始化的</li><li>将键值对节点重新映射到新的桶数组里。如果节点是 TreeNode 类型，则需要拆分红黑树。如果是普通节点，则节点按原顺序进行分组。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//resize（）函数在size　&gt; threshold时被调用</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//oldCap大于 0 代表原来的 table 非空</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 当 table 容量超过容量最大值，则不再扩容</span></span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                <span class="comment">//阈值设为整形最大值</span></span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;<span class="comment">// 按旧容量和阈值的2倍计算新容量和阈值的大小</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            *oldCap 小于等于 0 且 oldThr 大于0，代表用户创建了一个 HashMap，但是使用的构造函数为</span></span><br><span class="line"><span class="comment">       * HashMap(int initialCapacity, float loadFactor) 或 HashMap(int initialCapacity)</span></span><br><span class="line"><span class="comment">       * 或 HashMap(Map&lt;? extends K, ? extends V&gt; m)，导致 oldTab 为 null，oldCap 为0，</span></span><br><span class="line"><span class="comment">       * oldThr 为用户指定的 HashMap的初始容量</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">//设置新容量和新阈值大小</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// newThr 为 0 时，按阈值计算公式进行计算</span></span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//计算新阈值</span></span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//准备初始化过程</span></span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//遍历。把　oldTab 中的节点　reHash 到　newTab 中去</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="comment">//判断老数组是否为空</span></span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//不为空，设成空</span></span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">//若节点是单个节点，直接重新分配定位</span></span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="comment">//若节点是　TreeNode 节点，要进行 红黑树的 rehash　操作</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="comment">//若是链表，进行链表的 rehash　操作</span></span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="comment">// 遍历链表，并将链表节点按原顺序进行分组</span></span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="comment">// rehash　后节点新的位置一定为原来基础上加上　oldCap</span></span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="关于HashMap在什么时候时间复杂度是O（1），什么时候是O（n），什么时候又是O（logn）的问题"><a href="#关于HashMap在什么时候时间复杂度是O（1），什么时候是O（n），什么时候又是O（logn）的问题" class="headerlink" title="关于HashMap在什么时候时间复杂度是O（1），什么时候是O（n），什么时候又是O（logn）的问题"></a>关于HashMap在什么时候时间复杂度是O（1），什么时候是O（n），什么时候又是O（logn）的问题</h3><p><strong>O（1）</strong>：链表的长度尽可能短，理想状态下链表长度都为1 </p><p><strong>O（n）</strong>：当 Hash 冲突严重时，如果没有红黑树，那么在桶上形成的链表会变的越来越长，这样在查询时的效率就会越来越低；时间复杂度为O(N)。 </p><p><strong>O（logn）</strong>：采用红黑树之后可以保证查询效率O(logn) </p><h3 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tengshe789</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 手写<span class="title">HashMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(K key, V value, Node&lt;K, V&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value=value;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">        <span class="comment">/*数据存储的结构==&gt;数组+链表*/</span></span><br><span class="line">        Node&lt;K,V&gt;[] array=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/* 哈希桶的长度 */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> defaultLength=<span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*加载因子/扩容因子*/</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> factor=<span class="number">0.75</span>D;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*集合中的元素个数*/</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*打印函数*/</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"==============================="</span>);</span><br><span class="line">            <span class="keyword">if</span>(array!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                Node&lt;K, V&gt; node=<span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">                    node=array[i];</span><br><span class="line">                    System.out.print(<span class="string">"下标["</span>+i+<span class="string">"]"</span>);</span><br><span class="line">                    <span class="comment">//遍历链表</span></span><br><span class="line">                    <span class="keyword">while</span>(node!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                        System.out.print(<span class="string">"["</span>+node.getKey()+<span class="string">":"</span>+node.getValue()+<span class="string">"]"</span>);</span><br><span class="line">                        <span class="keyword">if</span>(node.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                            node=node.next;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//到尾部元素</span></span><br><span class="line">                            node=<span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//put元素方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k, V v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.懒加载机制，使用的时候进行分配</span></span><br><span class="line">            <span class="keyword">if</span>(array==<span class="keyword">null</span>) &#123;</span><br><span class="line">                array=<span class="keyword">new</span> Node[defaultLength];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.通过hash算法，计算出具体插入的位置</span></span><br><span class="line">            <span class="keyword">int</span> index=position(k,defaultLength);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//扩容。判断是否需要扩容</span></span><br><span class="line">            <span class="comment">//扩容的准则，元素的个数   大于  桶的尺寸*加载因子</span></span><br><span class="line">            <span class="keyword">if</span>(size &gt; defaultLength*factor) &#123;</span><br><span class="line">                resize();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.放入要插入的元素</span></span><br><span class="line">            Node&lt;K, V&gt; node=array[index];</span><br><span class="line">            <span class="keyword">if</span>(node==<span class="keyword">null</span>) &#123;</span><br><span class="line">                array[index]=<span class="keyword">new</span> Node&lt;K,V&gt;(k,v,<span class="keyword">null</span>);</span><br><span class="line">                size++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(k.equals(node.getKey()) || k==node.getKey()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> node.setValue(v);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    array[index]=<span class="keyword">new</span> Node&lt;K,V&gt;(k,v,node);</span><br><span class="line">                    size++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//扩容，并且重新排列元素</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//翻倍扩容</span></span><br><span class="line">            <span class="comment">//1.创建新的array临时变量,相当于defaultlength*2</span></span><br><span class="line">            Node&lt;K, V&gt;[] temp=<span class="keyword">new</span> Node[defaultLength &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.重新计算散列值，插入到新的array中去。 code=key % defaultLength ==&gt; code=key % defaultLength*2</span></span><br><span class="line">            Node&lt;K, V&gt; node=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">                node=array[i];</span><br><span class="line">                <span class="keyword">while</span>(node!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//重新散列</span></span><br><span class="line">                    <span class="keyword">int</span> index=position(node.getKey(),temp.length);</span><br><span class="line">                    <span class="comment">//插入头部</span></span><br><span class="line">                    Node&lt;K, V&gt; next = node.next;</span><br><span class="line">                    <span class="comment">//3</span></span><br><span class="line">                    node.next=temp[index];</span><br><span class="line">                    <span class="comment">//1</span></span><br><span class="line">                    temp[index]=node;</span><br><span class="line">                    <span class="comment">//2</span></span><br><span class="line">                    node=next;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.替换掉老array</span></span><br><span class="line">            array=temp;</span><br><span class="line">            defaultLength=temp.length;</span><br><span class="line">            temp=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">position</span><span class="params">(K k,<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> code=k.hashCode();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取模算法</span></span><br><span class="line">            <span class="keyword">return</span> code % (length-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//求与算法</span></span><br><span class="line">            <span class="comment">//return code &amp; (defaultLength-1);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(array!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> index=position(k,defaultLength);</span><br><span class="line">                Node&lt;K, V&gt; node=array[index];</span><br><span class="line">                <span class="comment">//遍历链表</span></span><br><span class="line">                <span class="keyword">while</span>(node!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果key值相同返回value</span></span><br><span class="line">                    <span class="keyword">if</span>(node.getKey()==k) &#123;</span><br><span class="line">                        <span class="keyword">return</span> node.getValue();</span><br><span class="line">                    &#125; <span class="keyword">else</span></span><br><span class="line">                        <span class="comment">//如果key值不同则调到下一个元素</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        node=node.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            HashMap&lt;String, String&gt; map=<span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">            map.put(<span class="string">"001号"</span>, <span class="string">"001"</span>);</span><br><span class="line">            map.put(<span class="string">"002号"</span>, <span class="string">"002"</span>);</span><br><span class="line">            map.put(<span class="string">"003号"</span>, <span class="string">"003"</span>);</span><br><span class="line">            map.put(<span class="string">"004号"</span>, <span class="string">"004"</span>);</span><br><span class="line">            map.put(<span class="string">"005号"</span>, <span class="string">"005"</span>);</span><br><span class="line">            map.put(<span class="string">"006号"</span>, <span class="string">"006"</span>);</span><br><span class="line">            map.put(<span class="string">"007号"</span>, <span class="string">"007"</span>);</span><br><span class="line">            map.put(<span class="string">"008号"</span>, <span class="string">"008"</span>);</span><br><span class="line">            map.put(<span class="string">"009号"</span>, <span class="string">"009"</span>);</span><br><span class="line">            map.put(<span class="string">"010号"</span>, <span class="string">"010"</span>);</span><br><span class="line">            map.put(<span class="string">"011号"</span>, <span class="string">"011"</span>);</span><br><span class="line">            map.print();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"========&gt;"</span>+map.get(<span class="string">"009号"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://segmentfault.com/a/1190000012926722#articleHeader4" target="_blank" rel="noopener">coolblog</a></p><p><a href="https://www.bilibili.com/video/av24032788" target="_blank" rel="noopener">阿里架构师带你分析HashMap源码实现原理</a></p><p>感谢！</p><hr><p>以下来自n天后的我：</p><p>补充一下看到一个非常好的：<a href="https://blog.csdn.net/v123411739/article/details/78996181" target="_blank" rel="noopener">点击链接</a>，值得学习</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚刚看到QQ群有人吹&lt;code&gt;Hashmap&lt;/code&gt;，一想我啥都不懂，就赶快补了一波。下面分享一下我对&lt;code&gt;Hashmap&lt;/code&gt;的理解，主要用于个人备忘。如果有不对，请批评。想要解锁更多新姿势？请访问&lt;a href=&quot;https://blog.teng
      
    
    </summary>
    
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="源码" scheme="https://tengshe789.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="java" scheme="https://tengshe789.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>多终端同步Hexo</title>
    <link href="https://tengshe789.github.io/2018/07/07/%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5Hexo/"/>
    <id>https://tengshe789.github.io/2018/07/07/多终端同步Hexo/</id>
    <published>2018-07-07T11:11:18.000Z</published>
    <updated>2021-06-06T06:19:57.401Z</updated>
    
    <content type="html"><![CDATA[<p>放寒假了，玩游戏！</p><p><img src="/2018/07/07/多终端同步Hexo/1.png" alt="img"></p><p>呸呸呸</p><p>我是那种人么？？？</p><p>放假了要好好学习，而且学什么要记录一下，每天写点博客记录一下自己的点点滴滴啊~！可垃圾笔记本屏幕太小了，看的眼疼，没有办法在原先本本上写MD博客</p><p><strong>肿么办？</strong></p><p>不慌，可以利用Git在多平台上同步Hexo！</p><p>下面我就分享一下步骤~</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>环境我就不说了，Node.js，Git，Hexo，这些都是最基本的</p><h4 id="下载Git"><a href="#下载Git" class="headerlink" title="下载Git"></a>下载Git</h4><p>下载 git OSX 版:git-scm.com/download/ma…<br>下载 git Windows 版:git-scm.com/download/wi…<br>下载 git Linux 版:git-scm.com/download/li…</p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>Linux<br>$ sudo yum install git<br>或者<br>$ sudo apt-get install git<br>Mac<br>直接在 Terminal 执行 git 命令, 如果没有会提示安装方法.</p><h3 id="笔记本端（需要备份的一端）"><a href="#笔记本端（需要备份的一端）" class="headerlink" title="笔记本端（需要备份的一端）"></a>笔记本端（需要备份的一端）</h3><p>进入我博客的原始文件夹内，找到.gitignore（Git就会自动忽略文件总汇）文件，用记事本打开~</p><p>添加如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">node_modules/ #npm install产生的node_modules由于路径过长不好处理</span><br></pre></td></tr></table></figure><p>添加完成后，右键 Git Bash，输入以下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init  #初始化本地仓库</span><br><span class="line">git add . #将必要的文件依次添加</span><br><span class="line">git commit -m "更新说明" #引号里面随便改哦~</span><br><span class="line">git branch hexo  #新建hexo分支，当然，分支名字“hexo”也可以随便改哦~</span><br><span class="line">git checkout hexo  #切换到hexo分支上</span><br><span class="line">git remote add origin git@github.com:tengshe789/tengshe789.github.io.git  #将本地与Github项目对接，tengshe789为我的用户名</span><br><span class="line">git push origin hexo  #push到Github项目的hexo分支上</span><br></pre></td></tr></table></figure><p>完成后合影~</p><p><img src="/2018/07/07/多终端同步Hexo/2.png" alt="">这里有很多隐私文件夹，譬如config.yml,db.json…..我也一一上传了，因为我是个不怕暴漏隐私的人哈哈哈哈。要想避免这个情况只将source添加即可</p><h3 id="台式机端（需要还原的一端）"><a href="#台式机端（需要还原的一端）" class="headerlink" title="台式机端（需要还原的一端）"></a>台式机端（需要还原的一端）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone -b hexo git@github.com:tengshe789/tengshe789.github.io.git  #将Github中hexo分支clone到本地</span><br><span class="line">cd  tengshe789.github.io  #切换到刚刚clone的文件夹内</span><br><span class="line">npm install    #注意，这里一定要切换到刚刚clone的文件夹内执行，安装必要的所需组件，不用再init</span><br><span class="line">npm install hexo-cli -g # 如果不同机器node版本升级了，需要重新运行这个</span><br><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save #图片插件</span><br><span class="line">npm install --save hexo-pdf #pdf插件</span><br><span class="line">npm install hexo-deployer-git #部署</span><br><span class="line">npm install hexo-generator-restful --save #生成 restful 风格的 json 数据 https://github.com/yscoder/hexo-generator-restful</span><br></pre></td></tr></table></figure><p>完成！</p><p>接下来写一篇博客庆祝一下~</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post "new blog name"   #新建一个.md文件，并编辑完成自己的博客内容</span><br></pre></td></tr></table></figure><p>写完，备份一下，再同步到github！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add source  #每次只要更新sorcerer中的文件到Github中即可，因为只是新建了一篇新博客</span><br><span class="line">git commit -m "更新说明"</span><br><span class="line">git push origin hexo  #更新分支</span><br><span class="line">hexo d -g   #push更新完分支之后将自己写的博客对接到自己搭的博客网站上，同时同步了Github中的master</span><br></pre></td></tr></table></figure><h3 id="番外：笔记本怎么同步？"><a href="#番外：笔记本怎么同步？" class="headerlink" title="番外：笔记本怎么同步？"></a>番外：笔记本怎么同步？</h3><p>进入我博客的原始文件夹内</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin hexo  #先pull完成本地与远端的融合</span><br></pre></td></tr></table></figure><h4 id="Hexo异常：fatal-inunpopulatedsubmodule’-deploy-git’怎么解决"><a href="#Hexo异常：fatal-inunpopulatedsubmodule’-deploy-git’怎么解决" class="headerlink" title="Hexo异常：fatal:inunpopulatedsubmodule’.deploy_git’怎么解决"></a>Hexo异常：fatal:inunpopulatedsubmodule’.deploy_git’怎么解决</h4><p>实在不行，就把它删掉，然后重新生成和部署。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`rm -rf .deploy_git``hexo g``hexo d`</span><br></pre></td></tr></table></figure><h3 id="Git命令整理"><a href="#Git命令整理" class="headerlink" title="Git命令整理"></a>Git命令整理</h3><h4 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h4><p>git config –global user.name “robbin”<br>git config –global user.email “<a href="mailto:randyvan007@hotmail.com" target="_blank" rel="noopener">randyvan007@hotmail.com</a>“<br>git config –global color.ui true<br>git config –global alias.co checkout<br>git config –global alias.ci commit<br>git config –global alias.st status<br>git config –global alias.br branch<br>git config –global core.editor “mate -w”    # 设置Editor使用textmate<br>git config -l  # 列举所有配置<br>用户的git配置文件~/.gitconfig</p><h4 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h4><p>查看、添加、提交、删除、找回，重置修改文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">git help  &lt;command&gt;  # 显示command的help</span><br><span class="line">git show            # 显示某次提交的内容</span><br><span class="line">git show $id</span><br><span class="line"></span><br><span class="line">git co  -- &lt;file&gt;   # 抛弃工作区修改</span><br><span class="line">git co  .           # 抛弃工作区修改</span><br><span class="line"></span><br><span class="line">git add &lt;file&gt;      # 将工作文件修改提交到本地暂存区</span><br><span class="line">git add .           # 将所有修改过的工作文件提交暂存区</span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt;       # 从版本库中删除文件</span><br><span class="line">git rm &lt;file&gt; --cached  # 从版本库中删除文件，但不删除文件</span><br><span class="line"></span><br><span class="line">git reset &lt;file&gt;    # 从暂存区恢复到工作文件</span><br><span class="line">git reset -- .      # 从暂存区恢复到工作文件</span><br><span class="line">git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span><br><span class="line"></span><br><span class="line">git ci &lt;file&gt;</span><br><span class="line">git ci .</span><br><span class="line">git ci -a           # 将git add, git rm和git ci等操作都合并在一起做</span><br><span class="line">git ci -am "some comments"</span><br><span class="line">git ci --amend      # 修改最后一次提交记录</span><br><span class="line"></span><br><span class="line">git revert &lt;$id&gt;    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</span><br><span class="line">git revert HEAD     # 恢复最后一次提交的状态</span><br></pre></td></tr></table></figure><h4 id="查看文件diff"><a href="#查看文件diff" class="headerlink" title="查看文件diff"></a>查看文件diff</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;file&gt;     # 比较当前文件和暂存区文件差异</span><br><span class="line">git diff</span><br><span class="line">git diff &lt;$id1&gt; &lt;$id2&gt;   # 比较两次提交之间的差异</span><br><span class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较</span><br><span class="line">git diff --staged   # 比较暂存区和版本库差异</span><br><span class="line">git diff --cached   # 比较暂存区和版本库差异</span><br><span class="line">git diff --stat     # 仅仅比较统计信息</span><br></pre></td></tr></table></figure><h4 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log &lt;file&gt;      # 查看该文件每次提交记录</span><br><span class="line">git log -p &lt;file&gt;   # 查看每次详细修改内容的diff</span><br><span class="line">git log -p -2       # 查看最近两次详细修改内容的diff</span><br><span class="line">git log --stat      # 查看提交统计信息</span><br><span class="line">tig</span><br><span class="line">Mac上可以使用tig代替diff和log，brew install tig</span><br></pre></td></tr></table></figure><h4 id="Git-本地分支管理"><a href="#Git-本地分支管理" class="headerlink" title="Git 本地分支管理"></a>Git 本地分支管理</h4><p>查看、切换、创建和删除分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git br -r           # 查看远程分支</span><br><span class="line">git br &lt;new_branch&gt; # 创建新的分支</span><br><span class="line">git br -v           # 查看各个分支最后提交信息</span><br><span class="line">git br --merged     # 查看已经被合并到当前分支的分支</span><br><span class="line">git br --no-merged  # 查看尚未被合并到当前分支的分支</span><br><span class="line"></span><br><span class="line">git co &lt;branch&gt;     # 切换到某个分支</span><br><span class="line">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</span><br><span class="line">git co -b &lt;new_branch&gt; &lt;branch&gt;  # 基于branch创建新的new_branch</span><br><span class="line"></span><br><span class="line">git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><br><span class="line">git co $id -b &lt;new_branch&gt;  # 把某次历史提交记录checkout出来，创建成一个分支</span><br><span class="line"></span><br><span class="line">git br -d &lt;branch&gt;  # 删除某个分支</span><br><span class="line">git br -D &lt;branch&gt;  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span><br></pre></td></tr></table></figure><h4 id="分支合并和rebase"><a href="#分支合并和rebase" class="headerlink" title="分支合并和rebase"></a>分支合并和rebase</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt;               # 将branch分支合并到当前分支</span><br><span class="line">git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交</span><br><span class="line"></span><br><span class="line">git rebase master &lt;branch&gt;       # 将master rebase到branch，相当于：</span><br><span class="line">git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure><h4 id="Git补丁管理-方便在多台机器上开发同步时用"><a href="#Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a>Git补丁管理(方便在多台机器上开发同步时用)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff &gt; ../sync.patch         # 生成补丁</span><br><span class="line">git apply ../sync.patch          # 打补丁</span><br><span class="line">git apply --check ../sync.patch  # 测试补丁能否成功</span><br></pre></td></tr></table></figure><h4 id="Git暂存管理"><a href="#Git暂存管理" class="headerlink" title="Git暂存管理"></a>Git暂存管理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash                        # 暂存</span><br><span class="line">git stash list                   # 列所有stash</span><br><span class="line">git stash apply                  # 恢复暂存的内容</span><br><span class="line">git stash drop                   # 删除暂存区</span><br></pre></td></tr></table></figure><h4 id="Git远程分支管理"><a href="#Git远程分支管理" class="headerlink" title="Git远程分支管理"></a>Git远程分支管理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git pull                         # 抓取远程仓库所有分支更新并合并到本地</span><br><span class="line">git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><br><span class="line">git fetch origin                 # 抓取远程仓库更新</span><br><span class="line">git merge origin/master          # 将远程主分支合并到本地当前分支</span><br><span class="line">git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支</span><br><span class="line">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  # 基于远程分支创建本地分支，功能同上</span><br><span class="line"></span><br><span class="line">git push                         # push所有分支</span><br><span class="line">git push origin master           # 将本地主分支推到远程主分支</span><br><span class="line">git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span><br><span class="line">git push origin &lt;local_branch&gt;   # 创建远程分支， origin是远程仓库名</span><br><span class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  # 创建远程分支</span><br><span class="line">git push origin :&lt;remote_branch&gt;  #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span><br></pre></td></tr></table></figure><h4 id="Git远程仓库管理"><a href="#Git远程仓库管理" class="headerlink" title="Git远程仓库管理"></a>Git远程仓库管理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v                    # 查看远程服务器地址和仓库名称</span><br><span class="line">git remote show origin           # 查看远程服务器仓库状态</span><br><span class="line">git remote add origin git@github:robbin/robbin_site.git         # 添加远程仓库地址</span><br><span class="line">git remote set-url origin git@github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)</span><br><span class="line">git remote rm &lt;repository&gt;       # 删除远程仓库</span><br></pre></td></tr></table></figure><p>创建远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库</span><br><span class="line">scp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上</span><br><span class="line"></span><br><span class="line">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</span><br><span class="line">git remote add origin git@github.com:robbin/robbin_site.git    # 设置远程仓库地址</span><br><span class="line">git push -u origin master                                      # 客户端首次提交</span><br><span class="line">git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track</span><br><span class="line"></span><br><span class="line">git remote set-head origin master   # 设置远程仓库的HEAD指向master分支</span><br><span class="line">也可以命令设置跟踪远程库和本地库</span><br><span class="line"></span><br><span class="line">git branch --set-upstream master origin/master</span><br><span class="line">git branch --set-upstream develop origin/develop</span><br></pre></td></tr></table></figure><h3 id="HappyEnding"><a href="#HappyEnding" class="headerlink" title="HappyEnding"></a>HappyEnding</h3><p>完成，继续玩游戏！</p><p><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">参考链接1</a></p><p><a href="https://blog.csdn.net/qq_32454537/article/details/79482896" target="_blank" rel="noopener">参考链接2</a></p><p>感谢！</p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;放寒假了，玩游戏！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/07/07/多终端同步Hexo/1.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;呸呸呸&lt;/p&gt;
&lt;p&gt;我是那种人么？？？&lt;/p&gt;
&lt;p&gt;放假了要好好学习，而且学什么要记录一下，每天写点博客记录一下自己的点点
      
    
    </summary>
    
    
      <category term="日常" scheme="https://tengshe789.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Windows10" scheme="https://tengshe789.github.io/tags/Windows10/"/>
    
      <category term="Hexo" scheme="https://tengshe789.github.io/tags/Hexo/"/>
    
      <category term="git" scheme="https://tengshe789.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>WIN10 1809隐藏大杀器--卓越模式</title>
    <link href="https://tengshe789.github.io/2018/07/06/WIN10-1809%E9%9A%90%E8%97%8F%E5%A4%A7%E6%9D%80%E5%99%A8-%E5%8D%93%E8%B6%8A%E6%A8%A1%E5%BC%8F/"/>
    <id>https://tengshe789.github.io/2018/07/06/WIN10-1809隐藏大杀器-卓越模式/</id>
    <published>2018-07-06T12:24:29.000Z</published>
    <updated>2019-11-20T13:39:40.602Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 铛铛铛</strong><br><img src="/2018/07/06/WIN10-1809隐藏大杀器-卓越模式/1.jpg" alt=""></p><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p>快递来了！新cpu到了<br>其实也不算新cpu，毕竟这个cpu已经出了6年了。</p><p>放暑假了，总要娱乐一下。奈何家里的老电脑cpu性能不大够（二代i5 @2.9ghz），干啥啥不痛快，很是苦恼。正好，趁着i7 9900K将要发售的时候，赶快买了个E3-1240V2充值信仰！</p><p>先来回顾一下新买cpu的参数。</p><h6 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h6><p>CPU系列    Xeon E3 v2系列<br><br>制作工艺    22纳米<br><br>核心代号    Ivy Bridge<br></p><h6 id="性能参数"><a href="#性能参数" class="headerlink" title="性能参数"></a>性能参数</h6><p>核心数量    四核心<br><br>线程数量    八线程<br><br>CPU主频    3.4GHz<br><br>动态加速频率    3.8GHz<br><br>L3缓存    8MB<br><br>总线规格    DMI 5GT/s<br><br>热设计功耗(TDP)    69W<br></p><h6 id="内存规格"><a href="#内存规格" class="headerlink" title="内存规格"></a>内存规格</h6><p>支持最大内存容量    32GB<br><br>内存类型    DDR3 1333/1600MHz<br><br>内存描述    双通道DDR3-1333/1600MHz<br></p><h6 id="封装规格"><a href="#封装规格" class="headerlink" title="封装规格"></a>封装规格</h6><p>插槽类型    LGA 1155<br><br>封装大小    37.5×37.5mm<br><br>最大CPU配置    1颗</p><h6 id="技术参数"><a href="#技术参数" class="headerlink" title="技术参数"></a>技术参数</h6><p>睿频加速技术    支持，2.0<br><br>超线程技术    支持<br><br>虚拟化技术    Intel VT-x<br><br>指令集    AVX，SSE4.1，SSE4.2<br><br>64位处理器    支持<br><br>其它技术    支持博锐技术，定向I/O虚拟化技术，增强型SpeedStep技术，按需配电技术，温度监视技术，身份保护技术，数据保护技术，平台保护技术<br><br>集成显卡    不支持<br></p><p>这个cpu现在来看参数不怎么样，性能也大概比i3-8100高一点，但是这的确是LGA1155平台上性能比较高的了。不带集成显卡，规格主频和i7 3770k差不多，由于我这边老主板是b75，不能给i7超频，所以也就没选。</p><h2 id="装机"><a href="#装机" class="headerlink" title="装机"></a>装机</h2><p>装机过程没有拍摄，上一组装机成功的BIOS截图吧。<br><img src="/2018/07/06/WIN10-1809隐藏大杀器-卓越模式/2.jpg" alt=""><br>一次成功点亮！<br>由于我买的1240v2是二字头，体质好，可以调频。果断把c1、c3、c6关掉，节电关掉，内存超导1600，时序降低一点<br><img src="/2018/07/06/WIN10-1809隐藏大杀器-卓越模式/3.jpg" alt=""><br>设置成单核3.8ghz，最低3.6ghz</p><h3 id="游戏测试"><a href="#游戏测试" class="headerlink" title="游戏测试"></a>游戏测试</h3><p>测试一下我最近喜欢玩的游戏，惊魂5，画质全高<br><img src="/2018/07/06/WIN10-1809隐藏大杀器-卓越模式/4.png" alt=""></p><p><img src="/2018/07/06/WIN10-1809隐藏大杀器-卓越模式/5.png" alt=""></p><p><img src="/2018/07/06/WIN10-1809隐藏大杀器-卓越模式/6.png" alt=""></p><p>实际运行表明，最高帧81，最低62，可以流畅运行。而老平台最低51，最高72。流畅性有显著提升。</p><h2 id="win10电源管理–卓越模式"><a href="#win10电源管理–卓越模式" class="headerlink" title="win10电源管理–卓越模式"></a>win10电源管理–卓越模式</h2><p>接下来是标题内容了~</p><p>这个没什么好说的，Win10更新1803以来，微软不仅带来了一些新功能（和BUG），还悄悄地加入了一个“卓越性能模式”，开了它，CPU电压会比高性能模式更低，从而带来相对更低一些的温度以及稳定性，并且对内存超频也有一定帮助</p><h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><p>首先，我们需要按Win键搜索并右键以管理员身份打开[ Windows Powershell ]，<br><img src="/2018/07/06/WIN10-1809隐藏大杀器-卓越模式/7.png" alt=""></p><p>然后输入powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61：</p><p><img src="/2018/07/06/WIN10-1809隐藏大杀器-卓越模式/8.png" alt=""></p><p>那么恭喜你，你的电脑已经成功开启了“卓越性能模式”，在电源选项中轻松找到它啦~</p><p><img src="/2018/07/06/WIN10-1809隐藏大杀器-卓越模式/9.png" alt=""></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>此片完了~</p><p>开启卓越模式的文章网上一大堆一大堆的，这次呢重点还是主要分享一下我换cpu的故事。当然，“卓越性能”基本可以代替“高性能”模式使用，毕竟有了（看起来）更好的自然就选择更好的了。并且非常推荐喜欢超超频、玩硬件的用户使用，因为确实有性能提升，能开就开吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 铛铛铛&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/2018/07/06/WIN10-1809隐藏大杀器-卓越模式/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;开箱&quot;&gt;&lt;a href=&quot;#开箱&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="日常" scheme="https://tengshe789.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="技术" scheme="https://tengshe789.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Windows10" scheme="https://tengshe789.github.io/tags/Windows10/"/>
    
  </entry>
  
  <entry>
    <title>=_=我的上一个博客被攻击瘫痪了=_=</title>
    <link href="https://tengshe789.github.io/2018/07/04/HelloWorld/"/>
    <id>https://tengshe789.github.io/2018/07/04/HelloWorld/</id>
    <published>2018-07-04T02:15:23.000Z</published>
    <updated>2019-11-20T13:39:40.562Z</updated>
    
    <content type="html"><![CDATA[<p>  刚刚结束期末考试，呼呼(_　_)゜zｚＺ，累死了。<br><img src="/2018/07/04/HelloWorld/20170226153645068.jpg" alt=""></p><p>一想到原来的博客没有了，<img src="/2018/07/04/HelloWorld/20170226154012235.jpg" alt=""></p><p>还要在搭一个，就更累了！</p><p>  万事开头难，helloWorld不能不写。而且因为不是第一次写HelloWorld了，所以这次写的简单点吧。<br><br><img src="/2018/07/04/HelloWorld/20170226153942698.jpg" alt=""></p><p>哦，忘了交代了，我的上一个博客挂掉了，<img src="/2018/07/04/HelloWorld/20170226153729569.jpg" alt=""></p><p>被DDOS攻击攻击，攻击完了暂且不说，登陆密码又被暴力破解了。哎，难受，图省钱买的OpenVZ服务器，攻击后在数据中心管理员的几经确认下，被判定死亡。<br>数据无法修复，内核被破坏，无法启动。</p><p>而我也没有设置备份（还不是因为懒！），雪上加霜！</p><p>😕😕😕😕😕😕😕😕😕😕😕😕😕😕😕😕😕</p><p><strong> 本父亲好难受！</strong></p><p>😕😕😕😕😕😕😕😕😕😕😕😕😕😕😕😕😕</p><p>这次我学乖了，新的博客搭建在GithubPage上，黑客你们随便攻击，大不了就没有流量。待老夫有钱了，就去消费个CDN，爱咋地在地。</p><p>行，就这样吧，</p><p><img src="/2018/07/04/HelloWorld/20170226154126642.jpg" alt=""></p><p>想要解锁更多新姿势？请访问<a href="https://blog.tengshe789.tech/" target="_blank" rel="noopener">我的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  刚刚结束期末考试，呼呼(_　_)゜zｚＺ，累死了。&lt;br&gt;&lt;img src=&quot;/2018/07/04/HelloWorld/20170226153645068.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一想到原来的博客没有了，&lt;img src=&quot;/2018/07/04/H
      
    
    </summary>
    
    
      <category term="日常" scheme="https://tengshe789.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="初" scheme="https://tengshe789.github.io/tags/%E5%88%9D/"/>
    
  </entry>
  
</feed>
